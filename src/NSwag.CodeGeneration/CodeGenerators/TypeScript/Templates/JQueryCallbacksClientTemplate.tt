<#@ template visibility="internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="NJsonSchema.CodeGeneration" #>
<#@ import namespace="NSwag.CodeGeneration.CodeGenerators.TypeScript" #>
<#@ import namespace="System.Linq" #>

<#if(Model.HasOperations){#>
<#if(Model.GenerateClientInterfaces){#>
export interface I<#=Model.Class#> {
<#foreach(var operation in Model.Operations){#>
<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescriptionOrIsOptional){#>     * @<#=parameter.VariableNameLower#><#if(parameter.IsOptional){#> (optional)<#}#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>    <#=operation.OperationNameLower#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableNameLower#>: <#=parameter.Type#>, <#}#>onSuccess?: (<#if(operation.HasResultType){#>result: <#=operation.ResultType#><#}#>) => void, onFail?: (exception: <#=operation.ExceptionType#>, reason: string) => void): void;
<#}#>}
<#}#>

export class <#=Model.Class#> <#if(Model.GenerateClientInterfaces){#>implements I<#=Model.Class#> <#}#>{
    baseUrl: string = undefined; 
    beforeSend: any = undefined; 

    constructor(baseUrl?: string) {
        this.baseUrl = baseUrl !== undefined ? baseUrl : "<#=Model.BaseUrl#>"; 
    }
<#if(Model.IsExtended){#>

    protected transformOptions(options: any) {
        return options; 
    }

    protected transformResult(url: string, xhr: any, processor: (xhr: any) => any) {
        return processor(xhr);
    }
<#}#>
<#foreach(var operation in Model.Operations){#>

<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescriptionOrIsOptional){#>     * @<#=parameter.VariableNameLower#><#if(parameter.IsOptional){#> (optional)<#}#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>    <#=operation.OperationNameLower#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableNameLower#>: <#=parameter.Type#>, <#}#>onSuccess?: (<#if(operation.HasResultType){#>result: <#=operation.ResultType#><#}#>) => void, onFail?: (exception: <#=operation.ExceptionType#>, reason: string) => void) {
        var url = this.baseUrl + "/<#=operation.Path#><#if(operation.QueryParameters.Any()){#>?<# } #>"; 

<#foreach(var parameter in operation.PathParameters){#>
        if (<#=parameter.VariableNameLower#> === undefined || <#=parameter.VariableNameLower#> === null)
            throw new Error("The parameter '<#=parameter.VariableNameLower#>' must be defined.");
<#  if(parameter.IsDateArray){#>
        url = url.replace("{<#=parameter.Name#>}", encodeURIComponent(<#=parameter.VariableNameLower#>.map(s_ => s_.toJSON()).join())); 
<#  }else if(parameter.IsDate){#>
        url = url.replace("{<#=parameter.Name#>}", encodeURIComponent("" + <#=parameter.VariableNameLower#>.toJSON())); 
<#  }else if(parameter.IsArray){#>
        url = url.replace("{<#=parameter.Name#>}", encodeURIComponent(<#=parameter.VariableNameLower#>.join())); 
<#  }else{#>
        url = url.replace("{<#=parameter.Name#>}", encodeURIComponent("" + <#=parameter.VariableNameLower#>)); 
<#  }#>
<#}#>

<#foreach(var parameter in operation.QueryParameters){#>
<#  if (parameter.IsRequired) { 
        if(parameter.IsNullable){#>
        if (<#=parameter.VariableNameLower#> === undefined)
            throw new Error("The parameter '<#=parameter.VariableNameLower#>' must be defined.");
        else
<#      }else{#>
        if (<#=parameter.VariableNameLower#> === undefined || <#=parameter.VariableNameLower#> === null)
            throw new Error("The parameter '<#=parameter.VariableNameLower#>' must be defined and cannot be null.");
        else
<#      }
    }else{
        if(parameter.IsNullable){#>
        if (<#=parameter.VariableNameLower#> !== undefined)
<#      }else{#>
        if (<#=parameter.VariableNameLower#> === null)
            throw new Error("The parameter '<#=parameter.VariableNameLower#>' cannot be null.");
        else if (<#=parameter.VariableNameLower#> !== undefined)
<#      }
    }#>
<#  if(parameter.IsDateArray){#>
            <#=parameter.VariableNameLower#>.forEach(item => { url += "<#=parameter.Name#>=" + encodeURIComponent("" + item.toJSON()) + "&"; });
<#  }else if(parameter.IsDate){#>
            url += "<#=parameter.Name#>=" + encodeURIComponent("" + <#=parameter.VariableNameLower#>.toJSON()) + "&"; 
<#  }else if(parameter.IsArray){#>
            <#=parameter.VariableNameLower#>.forEach(item => { url += "<#=parameter.Name#>=" + encodeURIComponent("" + item) + "&"; });
<#  }else{#>
            url += "<#=parameter.Name#>=" + encodeURIComponent("" + <#=parameter.VariableNameLower#>) + "&"; 
<#  }
}#>

        <#=RequestBodyGenerator.Render(operation.ContentParameter, 2)#>

        jQuery.ajax(<#if(Model.IsExtended){#>this.transformOptions(<#}#>{
            url: url,
            beforeSend: this.beforeSend,
            type: "<#=operation.HttpMethodLower#>",
            data: content,
            dataType: "text",
            headers: {
<#foreach(var parameter in operation.HeaderParameters){#>
                "<#=parameter.Name#>": <#=parameter.VariableNameLower#>, 
<#}#>                "Content-Type": "application/json; charset=UTF-8"
            }
        }<#if(Model.IsExtended){#>)<#}#>).done((data, textStatus, xhr) => {
            this.process<#=operation.OperationNameUpper#>WithCallbacks(url, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.process<#=operation.OperationNameUpper#>WithCallbacks(url, xhr, onSuccess, onFail);
        });
    }

    private process<#=operation.OperationNameUpper#>WithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any) {
        try {
<#if(Model.IsExtended){#>
            var result = this.transformResult(url, xhr, (xhr) => this.process<#=operation.OperationNameUpper#>(xhr));
<#}else{#>
            var result = this.process<#=operation.OperationNameUpper#>(xhr);
<#}#>
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    private process<#=operation.OperationNameUpper#>(xhr: any) {
        var data = xhr.responseText; 
        var status = xhr.status.toString(); 

<#foreach(var response in operation.Responses){#>
        if (status === "<#=response.StatusCode#>") {
<#  if(response.HasType){#>
            var result<#=response.StatusCode#>: <#=response.Type#> = null; 
            if (data !== undefined && data !== null && data !== "") {
<#      if(response.IsDate){#>
                result<#=response.StatusCode#> = new Date(data);
<#      }else{#>
<#          if(response.IsFile){#>
                result<#=response.StatusCode#> = data;
<#          }else{#>
<#              if(response.UseDtoClass){#>
                var resultData<#=response.StatusCode#> = data === "" ? null : jQuery.parseJSON(data);
                <#=ConversionUtilities.Tab(response.DataConversionCode, 4)#>
<#              }else{#>
                result<#=response.StatusCode#> = data === "" ? null : <<#=response.Type#>>jQuery.parseJSON(data);
<#              }#>
<#          }
        }#>
            }
<#  }else{#>
            var result<#=response.StatusCode#>: any = undefined; 
<#  }#>
<#  if(response.IsSuccess){#>
            return result<#=response.StatusCode#>;
<#  }else{#>
            throw result<#=response.StatusCode#>;
<#  }#>
        }
        else
<#}#>
        {
<#if(operation.HasDefaultResponse){#>
<#  if(operation.DefaultResponse.HasType){#>
            var result: <#=operation.DefaultResponse.Type#> = null; 
            if (data !== undefined && data !== null && data !== "") {
<#      if(operation.DefaultResponse.IsDate){#>
                result = new Date(data);
<#      }else{#>
<#          if(operation.DefaultResponse.IsFile){#>
                result = data;
<#          }else{#>
<#              if(operation.DefaultResponse.UseDtoClass){#>
                var resultData = data === "" ? null : jQuery.parseJSON(data);
                <#=ConversionUtilities.Tab(operation.DefaultResponse.DataConversionCode, 4)#>
<#              }else{#>
                result = data === "" ? null : <<#=operation.DefaultResponse.Type#>>jQuery.parseJSON(data);
<#              }#>
<#          }#>
<#      }#>
            }
<#  }else{#>
            var result: any = undefined; 
<#  }#>

<#  if(operation.HasOnlyDefaultResponse){#>
            if (status.length === 3 && status.indexOf("2") === 0)
                return result;
            else
                throw result;
<#  }else{#>
            return result; 
<#  }
}else{#>
            throw new Error("error_no_callback_for_the_received_http_status");
<#}#>
        }
    }
<#}#>}
<#}#>