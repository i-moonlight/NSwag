/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.12.6295.17330 (NJsonSchema v8.16.6295.13527) (http://NSwag.org)
// </auto-generated>
//----------------------


export class GeoClient {
    baseUrl: string; 
    beforeSend: any = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string) {
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:13452"; 
    }

    fromBodyTest(location: GeoPoint): Promise<void> {
        return new Promise<void>((resolve, reject) => {
            this.fromBodyTestWithCallbacks(location, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    
    private fromBodyTestWithCallbacks(location: GeoPoint, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/FromBodyTest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(location ? location.toJSON() : null);

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processFromBodyTestWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFromBodyTestWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processFromBodyTestWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processFromBodyTest(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processFromBodyTest(xhr: any): void {
        const responseText = xhr.responseText; 
        const status = xhr.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    fromUriTest(latitude: number, longitude: number): Promise<void> {
        return new Promise<void>((resolve, reject) => {
            this.fromUriTestWithCallbacks(latitude, longitude, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    
    private fromUriTestWithCallbacks(latitude: number, longitude: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/FromUriTest?";
        if (latitude === null)
            throw new Error("The parameter 'latitude' cannot be null.");
        else if (latitude !== undefined)
            url_ += "Latitude=" + encodeURIComponent("" + latitude) + "&"; 
        if (longitude === null)
            throw new Error("The parameter 'longitude' cannot be null.");
        else if (longitude !== undefined)
            url_ += "Longitude=" + encodeURIComponent("" + longitude) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processFromUriTestWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFromUriTestWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processFromUriTestWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processFromUriTest(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processFromUriTest(xhr: any): void {
        const responseText = xhr.responseText; 
        const status = xhr.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    addPolygon(points: GeoPoint[]): Promise<void> {
        return new Promise<void>((resolve, reject) => {
            this.addPolygonWithCallbacks(points, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    
    private addPolygonWithCallbacks(points: GeoPoint[], onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/AddPolygon";
        url_ = url_.replace(/[?&]$/, "");

        let contentData_: any = [];
        if (points) {
            for (let item of points)
                contentData_.push(item.toJSON());
        }
        const content_ = JSON.stringify(points ? contentData_ : null);

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processAddPolygonWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAddPolygonWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processAddPolygonWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAddPolygon(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAddPolygon(xhr: any): void {
        const responseText = xhr.responseText; 
        const status = xhr.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    filter(currentStates: string[]): Promise<void> {
        return new Promise<void>((resolve, reject) => {
            this.filterWithCallbacks(currentStates, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    
    private filterWithCallbacks(currentStates: string[], onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/Filter?";
        if (currentStates !== undefined)
            currentStates.forEach(item => { url_ += "currentStates=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processFilterWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFilterWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processFilterWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processFilter(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processFilter(xhr: any): void {
        const responseText = xhr.responseText; 
        const status = xhr.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    reverse(values: string[]): Promise<string[]> {
        return new Promise<string[]>((resolve, reject) => {
            this.reverseWithCallbacks(values, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    
    private reverseWithCallbacks(values: string[], onSuccess?: (result: string[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/Reverse?";
        if (values !== undefined)
            values.forEach(item => { url_ += "values=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processReverseWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processReverseWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processReverseWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processReverse(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processReverse(xhr: any): string[] {
        const responseText = xhr.responseText; 
        const status = xhr.status; 

        if (status === 200) {
            let result200: string[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    refresh(): Promise<void> {
        return new Promise<void>((resolve, reject) => {
            this.refreshWithCallbacks((result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    
    private refreshWithCallbacks(onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/Refresh";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processRefreshWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processRefreshWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processRefreshWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processRefresh(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processRefresh(xhr: any): void {
        const responseText = xhr.responseText; 
        const status = xhr.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    uploadFile(file: FileParameter): Promise<boolean> {
        return new Promise<boolean>((resolve, reject) => {
            this.uploadFileWithCallbacks(file, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    
    private uploadFileWithCallbacks(file: FileParameter, onSuccess?: (result: boolean) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/UploadFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            mimeType: "multipart/form-data",
            contentType: false,
            headers: {
                "Content-Type": "multipart/form-data; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processUploadFileWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processUploadFileWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processUploadFileWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processUploadFile(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processUploadFile(xhr: any): boolean {
        const responseText = xhr.responseText; 
        const status = xhr.status; 

        if (status === 200) {
            let result200: boolean | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    uploadFiles(files: FileParameter[]): Promise<void> {
        return new Promise<void>((resolve, reject) => {
            this.uploadFilesWithCallbacks(files, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    
    private uploadFilesWithCallbacks(files: FileParameter[], onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/UploadFiles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (files !== null)
            files.forEach(item_ => content_.append("files", item_.data, item_.fileName ? item_.fileName : "files") );

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            mimeType: "multipart/form-data",
            contentType: false,
            headers: {
                "Content-Type": "multipart/form-data; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processUploadFilesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processUploadFilesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processUploadFilesWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processUploadFiles(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processUploadFiles(xhr: any): void {
        const responseText = xhr.responseText; 
        const status = xhr.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    saveItems(request: GenericRequestOfAddressAndPerson): Promise<void> {
        return new Promise<void>((resolve, reject) => {
            this.saveItemsWithCallbacks(request, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    
    private saveItemsWithCallbacks(request: GenericRequestOfAddressAndPerson, onSuccess?: (result: void) => void, onFail?: (exception: Exception | string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/SaveItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request ? request.toJSON() : null);

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processSaveItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSaveItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processSaveItemsWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSaveItems(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSaveItems(xhr: any): void {
        const responseText = xhr.responseText; 
        const status = xhr.status; 

        if (status === 204) {
            return null;
        } else if (status === 450) {
            let result450: Exception | null = null;
            let resultData450 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result450 = resultData450 ? Exception.fromJS(resultData450) : null;
            this.throwException("A server error occurred.", status, responseText, result450);
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    getUploadedFile(id: number, override: boolean): Promise<any> {
        return new Promise<any>((resolve, reject) => {
            this.getUploadedFileWithCallbacks(id, override, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    
    private getUploadedFileWithCallbacks(id: number, override: boolean, onSuccess?: (result: any) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/GetUploadedFile/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (override === null)
            throw new Error("The parameter 'override' cannot be null.");
        else if (override !== undefined)
            url_ += "override=" + encodeURIComponent("" + override) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
            }
        }).done((data, textStatus, xhr) => {
            this.processGetUploadedFileWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetUploadedFileWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetUploadedFileWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetUploadedFile(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetUploadedFile(xhr: any): any {
        const responseText = xhr.responseText; 
        const status = xhr.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export class PersonsClient {
    baseUrl: string; 
    beforeSend: any = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string) {
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:13452"; 
    }

    getAll(): Promise<Person[]> {
        return new Promise<Person[]>((resolve, reject) => {
            this.getAllWithCallbacks((result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    
    private getAllWithCallbacks(onSuccess?: (result: Person[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Persons";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAll(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAll(xhr: any): Person[] {
        const responseText = xhr.responseText; 
        const status = xhr.status; 

        if (status === 200) {
            let result200: Person[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    add(person: Person): Promise<void> {
        return new Promise<void>((resolve, reject) => {
            this.addWithCallbacks(person, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    
    private addWithCallbacks(person: Person, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Persons";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(person ? person.toJSON() : null);

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processAddWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAddWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processAddWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAdd(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAdd(xhr: any): void {
        const responseText = xhr.responseText; 
        const status = xhr.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    find(gender: Gender): Promise<Person[]> {
        return new Promise<Person[]>((resolve, reject) => {
            this.findWithCallbacks(gender, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    
    private findWithCallbacks(gender: Gender, onSuccess?: (result: Person[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Persons/find/{gender}";
        if (gender === undefined || gender === null)
            throw new Error("The parameter 'gender' must be defined.");
        url_ = url_.replace("{gender}", encodeURIComponent("" + gender)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processFindWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFindWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processFindWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processFind(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processFind(xhr: any): Person[] {
        const responseText = xhr.responseText; 
        const status = xhr.status; 

        if (status === 200) {
            let result200: Person[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    findOptional(gender: Gender): Promise<Person[]> {
        return new Promise<Person[]>((resolve, reject) => {
            this.findOptionalWithCallbacks(gender, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    
    private findOptionalWithCallbacks(gender: Gender, onSuccess?: (result: Person[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Persons/find2?";
        if (gender === undefined)
            throw new Error("The parameter 'gender' must be defined.");
        else
            url_ += "gender=" + encodeURIComponent("" + gender) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processFindOptionalWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFindOptionalWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processFindOptionalWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processFindOptional(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processFindOptional(xhr: any): Person[] {
        const responseText = xhr.responseText; 
        const status = xhr.status; 

        if (status === 200) {
            let result200: Person[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    get(id: string): Promise<Person> {
        return new Promise<Person>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    
    private getWithCallbacks(id: string, onSuccess?: (result: Person) => void, onFail?: (exception: PersonNotFoundException | string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Persons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): Person {
        const responseText = xhr.responseText; 
        const status = xhr.status; 

        if (status === 200) {
            let result200: Person | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Person.fromJS(resultData200) : null;
            return result200;
        } else if (status === 500) {
            let result500: PersonNotFoundException | null = null;
            let resultData500 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result500 = resultData500 ? PersonNotFoundException.fromJS(resultData500) : null;
            this.throwException("A server error occurred.", status, responseText, result500);
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    delete(id: string): Promise<void> {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    
    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Persons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const responseText = xhr.responseText; 
        const status = xhr.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    throw(id: string): Promise<Person> {
        return new Promise<Person>((resolve, reject) => {
            this.throwWithCallbacks(id, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    
    private throwWithCallbacks(id: string, onSuccess?: (result: Person) => void, onFail?: (exception: PersonNotFoundException | string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Persons/Throw?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processThrowWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processThrowWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processThrowWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processThrow(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processThrow(xhr: any): Person {
        const responseText = xhr.responseText; 
        const status = xhr.status; 

        if (status === 200) {
            let result200: Person | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Person.fromJS(resultData200) : null;
            return result200;
        } else if (status === 500) {
            let result500: PersonNotFoundException | null = null;
            let resultData500 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result500 = resultData500 ? PersonNotFoundException.fromJS(resultData500) : null;
            this.throwException("A server error occurred.", status, responseText, result500);
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * Gets the name of a person.
     * @id The person ID.
     * @return The person's name.
     */
    getName(id: string): Promise<string> {
        return new Promise<string>((resolve, reject) => {
            this.getNameWithCallbacks(id, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    
    private getNameWithCallbacks(id: string, onSuccess?: (result: string) => void, onFail?: (exception: PersonNotFoundException | string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Persons/{id}/Name";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processGetNameWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetNameWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetNameWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetName(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetName(xhr: any): string {
        const responseText = xhr.responseText; 
        const status = xhr.status; 

        if (status === 200) {
            let result200: string | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        } else if (status === 500) {
            let result500: PersonNotFoundException | null = null;
            let resultData500 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result500 = resultData500 ? PersonNotFoundException.fromJS(resultData500) : null;
            this.throwException("A server error occurred.", status, responseText, result500);
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    addXml(person: string): Promise<string> {
        return new Promise<string>((resolve, reject) => {
            this.addXmlWithCallbacks(person, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    
    private addXmlWithCallbacks(person: string, onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Persons/AddXml";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = person;

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/xml; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processAddXmlWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAddXmlWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processAddXmlWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAddXml(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAddXml(xhr: any): string {
        const responseText = xhr.responseText; 
        const status = xhr.status; 

        if (status === 200) {
            let result200: string | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export class GeoPoint {
    latitude: number | undefined;
    longitude: number | undefined;

    init(data?: any) {
        if (data !== undefined) {
            this.latitude = data["Latitude"];
            this.longitude = data["Longitude"];
        }
    }

    static fromJS(data: any): GeoPoint {
        let result = new GeoPoint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
        data["Latitude"] = this.latitude;
        data["Longitude"] = this.longitude;
        return data; 
    }
}

export class GenericRequestOfAddressAndPerson {
    item1: Address | null | undefined;
    item2: Person | null | undefined;

    init(data?: any) {
        if (data !== undefined) {
            this.item1 = data["Item1"] ? Address.fromJS(data["Item1"]) : undefined;
            this.item2 = data["Item2"] ? Person.fromJS(data["Item2"]) : undefined;
        }
    }

    static fromJS(data: any): GenericRequestOfAddressAndPerson {
        let result = new GenericRequestOfAddressAndPerson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
        data["Item1"] = this.item1 ? this.item1.toJSON() : undefined;
        data["Item2"] = this.item2 ? this.item2.toJSON() : undefined;
        return data; 
    }
}

export class Address {
    isPrimary: boolean | undefined;
    city: string | null | undefined;

    init(data?: any) {
        if (data !== undefined) {
            this.isPrimary = data["IsPrimary"];
            this.city = data["City"];
        }
    }

    static fromJS(data: any): Address {
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
        data["IsPrimary"] = this.isPrimary;
        data["City"] = this.city;
        return data; 
    }
}

export class Person {
    get fullName() {
        return this.firstName + " " + this.lastName;
    }

    id: string | undefined;
    /** Gets or sets the first name. */
    firstName: string | undefined;
    /** Gets or sets the last name. */
    lastName: string | undefined;
    gender: Gender | undefined;
    dateOfBirth: Date | undefined;
    weight: number | undefined;
    height: number | undefined;
    age: number | undefined;
    averageSleepTime: string | undefined;
    address: Address | undefined = new Address();
    children: Person[] | undefined = [];
    skills: { [key: string] : SkillLevel; } | null | undefined;

    protected _discriminator: string;

    constructor() {
        this._discriminator = "Person";
    }

    init(data?: any) {
        if (data !== undefined) {
            this.id = data["Id"];
            this.firstName = data["FirstName"];
            this.lastName = data["LastName"];
            this.gender = data["Gender"];
            this.dateOfBirth = data["DateOfBirth"] ? new Date(data["DateOfBirth"].toString()) : undefined;
            this.weight = data["Weight"];
            this.height = data["Height"];
            this.age = data["Age"];
            this.averageSleepTime = data["AverageSleepTime"];
            this.address = data["Address"] ? Address.fromJS(data["Address"]) : new Address();
            if (data["Children"] && data["Children"].constructor === Array) {
                this.children = [];
                for (let item of data["Children"])
                    this.children.push(Person.fromJS(item));
            }
            if (data["Skills"]) {
                this.skills = {};
                for (let key in data["Skills"]) {
                    if (data["Skills"].hasOwnProperty(key))
                        this.skills[key] = data["Skills"][key];
                }
            }
        }
    }

    static fromJS(data: any): Person {
        if (data["discriminator"] === "Teacher") {
            let result = new Teacher();
            result.init(data);
            return result;
        }
        let result = new Person();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
        data["discriminator"] = this._discriminator; 
        data["Id"] = this.id;
        data["FirstName"] = this.firstName;
        data["LastName"] = this.lastName;
        data["Gender"] = this.gender;
        data["DateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : undefined;
        data["Weight"] = this.weight;
        data["Height"] = this.height;
        data["Age"] = this.age;
        data["AverageSleepTime"] = this.averageSleepTime;
        data["Address"] = this.address ? this.address.toJSON() : undefined;
        if (this.children && this.children.constructor === Array) {
            data["Children"] = [];
            for (let item of this.children)
                data["Children"].push(item.toJSON());
        }
        if (this.skills) {
            data["Skills"] = {};
            for (let key in this.skills) {
                if (this.skills.hasOwnProperty(key))
                    data["Skills"][key] = this.skills[key];
            }
        }
        return data; 
    }
}

export enum Gender {
    Male = <any>"Male", 
    Female = <any>"Female", 
}

export enum SkillLevel {
    Low = 0, 
    Medium = 1, 
    Height = 2, 
}

export class Teacher extends Person {
    course: string | null | undefined;
    skillLevel: SkillLevel | undefined = SkillLevel.Medium;

    constructor() {
        super();
        this._discriminator = "Teacher";
    }

    init(data?: any) {
        super.init(data);
        if (data !== undefined) {
            this.course = data["Course"];
            this.skillLevel = data["SkillLevel"];
        }
    }

    static fromJS(data: any): Teacher {
        let result = new Teacher();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
        data["Course"] = this.course;
        data["SkillLevel"] = this.skillLevel;
        super.toJSON(data);
        return data; 
    }
}

export class Exception {
    message: string | null | undefined;
    innerException: Exception | null | undefined;
    stackTrace: string | null | undefined;
    source: string | null | undefined;

    init(data?: any) {
        if (data !== undefined) {
            this.message = data["Message"];
            this.innerException = data["InnerException"] ? Exception.fromJS(data["InnerException"]) : undefined;
            this.stackTrace = data["StackTrace"];
            this.source = data["Source"];
        }
    }

    static fromJS(data: any): Exception {
        let result = new Exception();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
        data["Message"] = this.message;
        data["InnerException"] = this.innerException ? this.innerException.toJSON() : undefined;
        data["StackTrace"] = this.stackTrace;
        data["Source"] = this.source;
        return data; 
    }
}

export class PersonNotFoundException extends Exception {
    id: string | undefined;

    init(data?: any) {
        super.init(data);
        if (data !== undefined) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): PersonNotFoundException {
        let result = new PersonNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

export interface FileParameter
{
    data: any;
    fileName: string;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}