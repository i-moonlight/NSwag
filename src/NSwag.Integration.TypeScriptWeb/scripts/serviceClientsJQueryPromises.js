//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v5.4.6091.41181 (http://NSwag.org)
// </auto-generated>
//----------------------
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var PersonsClient = (function () {
    function PersonsClient(baseUrl) {
        this.baseUrl = undefined;
        this.beforeSend = undefined;
        this.baseUrl = baseUrl !== undefined ? baseUrl : "http://localhost:13452";
    }
    PersonsClient.prototype.getAll = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.getAllWithCallbacks(function (result) { return resolve(result); }, function (exception, reason) { return reject(exception); });
        });
    };
    PersonsClient.prototype.getAllWithCallbacks = function (onSuccess, onFail) {
        var _this = this;
        var url = this.baseUrl + "/api/Persons";
        var content = "";
        jQuery.ajax({
            url: url,
            beforeSend: this.beforeSend,
            type: "get",
            data: content,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).done(function (data, textStatus, xhr) {
            _this.processGetAllWithCallbacks(url, xhr, onSuccess, onFail);
        }).fail(function (xhr) {
            _this.processGetAllWithCallbacks(url, xhr, onSuccess, onFail);
        });
    };
    PersonsClient.prototype.processGetAllWithCallbacks = function (url, xhr, onSuccess, onFail) {
        try {
            var result = this.processGetAll(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    };
    PersonsClient.prototype.processGetAll = function (xhr) {
        var data = xhr.responseText;
        var status = xhr.status.toString();
        if (status === "200") {
            var result200 = null;
            if (data !== undefined && data !== null && data !== "") {
                var resultData200 = data === "" ? null : jQuery.parseJSON(data);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                        var item = resultData200_1[_i];
                        result200.push(Person.fromJS(item));
                    }
                }
            }
            return result200;
        }
        else {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    };
    PersonsClient.prototype.add = function (person) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.addWithCallbacks(person, function (result) { return resolve(result); }, function (exception, reason) { return reject(exception); });
        });
    };
    PersonsClient.prototype.addWithCallbacks = function (person, onSuccess, onFail) {
        var _this = this;
        var url = this.baseUrl + "/api/Persons";
        var content = JSON.stringify(person ? person.toJS() : null);
        jQuery.ajax({
            url: url,
            beforeSend: this.beforeSend,
            type: "post",
            data: content,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).done(function (data, textStatus, xhr) {
            _this.processAddWithCallbacks(url, xhr, onSuccess, onFail);
        }).fail(function (xhr) {
            _this.processAddWithCallbacks(url, xhr, onSuccess, onFail);
        });
    };
    PersonsClient.prototype.processAddWithCallbacks = function (url, xhr, onSuccess, onFail) {
        try {
            var result = this.processAdd(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    };
    PersonsClient.prototype.processAdd = function (xhr) {
        var data = xhr.responseText;
        var status = xhr.status.toString();
        if (status === "204") {
            var result204 = undefined;
            return result204;
        }
        else {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    };
    PersonsClient.prototype.get = function (id) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.getWithCallbacks(id, function (result) { return resolve(result); }, function (exception, reason) { return reject(exception); });
        });
    };
    PersonsClient.prototype.getWithCallbacks = function (id, onSuccess, onFail) {
        var _this = this;
        var url = this.baseUrl + "/api/Persons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));
        var content = "";
        jQuery.ajax({
            url: url,
            beforeSend: this.beforeSend,
            type: "get",
            data: content,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).done(function (data, textStatus, xhr) {
            _this.processGetWithCallbacks(url, xhr, onSuccess, onFail);
        }).fail(function (xhr) {
            _this.processGetWithCallbacks(url, xhr, onSuccess, onFail);
        });
    };
    PersonsClient.prototype.processGetWithCallbacks = function (url, xhr, onSuccess, onFail) {
        try {
            var result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    };
    PersonsClient.prototype.processGet = function (xhr) {
        var data = xhr.responseText;
        var status = xhr.status.toString();
        if (status === "200") {
            var result200 = null;
            if (data !== undefined && data !== null && data !== "") {
                var resultData200 = data === "" ? null : jQuery.parseJSON(data);
                result200 = resultData200 ? Person.fromJS(resultData200) : new Person();
            }
            return result200;
        }
        else {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    };
    PersonsClient.prototype.delete = function (id) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.deleteWithCallbacks(id, function (result) { return resolve(result); }, function (exception, reason) { return reject(exception); });
        });
    };
    PersonsClient.prototype.deleteWithCallbacks = function (id, onSuccess, onFail) {
        var _this = this;
        var url = this.baseUrl + "/api/Persons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));
        var content = "";
        jQuery.ajax({
            url: url,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).done(function (data, textStatus, xhr) {
            _this.processDeleteWithCallbacks(url, xhr, onSuccess, onFail);
        }).fail(function (xhr) {
            _this.processDeleteWithCallbacks(url, xhr, onSuccess, onFail);
        });
    };
    PersonsClient.prototype.processDeleteWithCallbacks = function (url, xhr, onSuccess, onFail) {
        try {
            var result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    };
    PersonsClient.prototype.processDelete = function (xhr) {
        var data = xhr.responseText;
        var status = xhr.status.toString();
        if (status === "204") {
            var result204 = undefined;
            return result204;
        }
        else {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    };
    /**
     * Gets the name of a person.
     * @id The person ID.
     * @return The person's name.
     */
    PersonsClient.prototype.getName = function (id) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.getNameWithCallbacks(id, function (result) { return resolve(result); }, function (exception, reason) { return reject(exception); });
        });
    };
    PersonsClient.prototype.getNameWithCallbacks = function (id, onSuccess, onFail) {
        var _this = this;
        var url = this.baseUrl + "/api/Persons/{id}/Name";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));
        var content = "";
        jQuery.ajax({
            url: url,
            beforeSend: this.beforeSend,
            type: "get",
            data: content,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).done(function (data, textStatus, xhr) {
            _this.processGetNameWithCallbacks(url, xhr, onSuccess, onFail);
        }).fail(function (xhr) {
            _this.processGetNameWithCallbacks(url, xhr, onSuccess, onFail);
        });
    };
    PersonsClient.prototype.processGetNameWithCallbacks = function (url, xhr, onSuccess, onFail) {
        try {
            var result = this.processGetName(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    };
    PersonsClient.prototype.processGetName = function (xhr) {
        var data = xhr.responseText;
        var status = xhr.status.toString();
        if (status === "200") {
            var result200 = null;
            if (data !== undefined && data !== null && data !== "") {
                var resultData200 = data === "" ? null : jQuery.parseJSON(data);
                result200 = resultData200 !== undefined ? resultData200 : null;
            }
            return result200;
        }
        else {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    };
    return PersonsClient;
}());
exports.PersonsClient = PersonsClient;
var Person = (function () {
    function Person(data) {
        this.address = new Address();
        this.children = [];
        this.discriminator = "Person";
        if (data !== undefined) {
            this.id = data["Id"] !== undefined ? data["Id"] : null;
            this.firstName = data["FirstName"] !== undefined ? data["FirstName"] : null;
            this.lastName = data["LastName"] !== undefined ? data["LastName"] : null;
            this.gender = data["Gender"] !== undefined ? data["Gender"] : null;
            this.dateOfBirth = data["DateOfBirth"] ? new Date(data["DateOfBirth"].toString()) : null;
            this.address = data["Address"] ? Address.fromJS(data["Address"]) : new Address();
            if (data["Children"] && data["Children"].constructor === Array) {
                this.children = [];
                for (var _i = 0, _a = data["Children"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.children.push(Person.fromJS(item));
                }
            }
            if (data["Skills"]) {
                this.skills = {};
                for (var key in data["Skills"]) {
                    if (data["Skills"].hasOwnProperty(key))
                        this.skills[key] = data["Skills"][key] !== undefined ? data["Skills"][key] : null;
                }
            }
            this.discriminator = data["discriminator"] !== undefined ? data["discriminator"] : null;
        }
    }
    Person.fromJS = function (data) {
        if (data["discriminator"] === "Teacher")
            return new Teacher(data);
        return new Person(data);
    };
    Person.prototype.toJS = function (data) {
        data = data === undefined ? {} : data;
        data["Id"] = this.id !== undefined ? this.id : null;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : null;
        data["LastName"] = this.lastName !== undefined ? this.lastName : null;
        data["Gender"] = this.gender !== undefined ? this.gender : null;
        data["DateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : null;
        data["Address"] = this.address ? this.address.toJS() : null;
        if (this.children && this.children.constructor === Array) {
            data["Children"] = [];
            for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                var item = _a[_i];
                data["Children"].push(item.toJS());
            }
        }
        if (this.skills) {
            data["Skills"] = {};
            for (var key in this.skills) {
                if (this.skills.hasOwnProperty(key))
                    data["Skills"][key] = this.skills[key] !== undefined ? this.skills[key] : null;
            }
        }
        data["discriminator"] = this.discriminator !== undefined ? this.discriminator : null;
        return data;
    };
    Person.prototype.toJSON = function () {
        return JSON.stringify(this.toJS());
    };
    Person.prototype.clone = function () {
        var json = this.toJSON();
        return new Person(JSON.parse(json));
    };
    return Person;
}());
exports.Person = Person;
var Teacher = (function (_super) {
    __extends(Teacher, _super);
    function Teacher(data) {
        _super.call(this, data);
        this.discriminator = "Teacher";
        if (data !== undefined) {
            this.course = data["Course"] !== undefined ? data["Course"] : null;
        }
    }
    Teacher.fromJS = function (data) {
        return new Teacher(data);
    };
    Teacher.prototype.toJS = function (data) {
        data = data === undefined ? {} : data;
        data["Course"] = this.course !== undefined ? this.course : null;
        _super.prototype.toJS.call(this, data);
        return data;
    };
    Teacher.prototype.toJSON = function () {
        return JSON.stringify(this.toJS());
    };
    Teacher.prototype.clone = function () {
        var json = this.toJSON();
        return new Teacher(JSON.parse(json));
    };
    return Teacher;
}(Person));
exports.Teacher = Teacher;
(function (GenderAsInteger) {
    GenderAsInteger[GenderAsInteger["Male"] = 0] = "Male";
    GenderAsInteger[GenderAsInteger["Female"] = 1] = "Female";
})(exports.GenderAsInteger || (exports.GenderAsInteger = {}));
var GenderAsInteger = exports.GenderAsInteger;
var Address = (function () {
    function Address(data) {
        if (data !== undefined) {
            this.city = data["City"] !== undefined ? data["City"] : null;
        }
    }
    Address.fromJS = function (data) {
        return new Address(data);
    };
    Address.prototype.toJS = function (data) {
        data = data === undefined ? {} : data;
        data["City"] = this.city !== undefined ? this.city : null;
        return data;
    };
    Address.prototype.toJSON = function () {
        return JSON.stringify(this.toJS());
    };
    Address.prototype.clone = function () {
        var json = this.toJSON();
        return new Address(JSON.parse(json));
    };
    return Address;
}());
exports.Address = Address;
(function (SkillLevelAsInteger) {
    SkillLevelAsInteger[SkillLevelAsInteger["Low"] = 0] = "Low";
    SkillLevelAsInteger[SkillLevelAsInteger["Medium"] = 1] = "Medium";
    SkillLevelAsInteger[SkillLevelAsInteger["Height"] = 2] = "Height";
})(exports.SkillLevelAsInteger || (exports.SkillLevelAsInteger = {}));
var SkillLevelAsInteger = exports.SkillLevelAsInteger;
//# sourceMappingURL=serviceClientsJQueryPromises.js.map