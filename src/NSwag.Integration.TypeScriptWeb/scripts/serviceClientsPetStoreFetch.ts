/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.12.6295.17330 (NJsonSchema v8.16.6295.13527) (http://NSwag.org)
// </auto-generated>
//----------------------


export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.baseUrl = baseUrl ? baseUrl : "";
        this.http = http ? http : <any>window;
    }

    /**
     * Add a new pet to the store
     * @body Pet object that needs to be added to the store
     */
    addPet(body: Pet): Promise<void> {
        let url_ = this.baseUrl + "/pet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body ? body.toJSON() : null);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processAddPet(response);
        });
    }

    protected processAddPet(response: Response): Promise<void> {
        return response.text().then((responseText) => {
            const status = response.status; 

            if (status === 405) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status !== 200 && status !== 204) {
                this.throwException("An unexpected server error occurred.", status, responseText);
            }
            return null;
        });
    }

    /**
     * Update an existing pet
     * @body Pet object that needs to be added to the store
     */
    updatePet(body: Pet): Promise<void> {
        let url_ = this.baseUrl + "/pet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body ? body.toJSON() : null);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processUpdatePet(response);
        });
    }

    protected processUpdatePet(response: Response): Promise<void> {
        return response.text().then((responseText) => {
            const status = response.status; 

            if (status === 400) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status === 404) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status === 405) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status !== 200 && status !== 204) {
                this.throwException("An unexpected server error occurred.", status, responseText);
            }
            return null;
        });
    }

    /**
     * Finds Pets by status
     * @status Status values that need to be considered for filter
     * @return successful operation
     */
    findPetsByStatus(status: Status[]): Promise<Pet[]> {
        let url_ = this.baseUrl + "/pet/findByStatus?";
        if (status === undefined || status === null)
            throw new Error("The parameter 'status' must be defined and cannot be null.");
        else
            status.forEach(item => { url_ += "status=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processFindPetsByStatus(response);
        });
    }

    protected processFindPetsByStatus(response: Response): Promise<Pet[]> {
        return response.text().then((responseText) => {
            const status = response.status; 

            if (status === 200) {
                let result200: Pet[] | null = null;
                let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(Pet.fromJS(item));
                }
                return result200;
            } else if (status === 400) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status !== 200 && status !== 204) {
                this.throwException("An unexpected server error occurred.", status, responseText);
            }
            return null;
        });
    }

    /**
     * Finds Pets by tags
     * @tags Tags to filter by
     * @return successful operation
     * @deprecated
     */
    findPetsByTags(tags: string[]): Promise<Pet[]> {
        let url_ = this.baseUrl + "/pet/findByTags?";
        if (tags === undefined || tags === null)
            throw new Error("The parameter 'tags' must be defined and cannot be null.");
        else
            tags.forEach(item => { url_ += "tags=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processFindPetsByTags(response);
        });
    }

    protected processFindPetsByTags(response: Response): Promise<Pet[]> {
        return response.text().then((responseText) => {
            const status = response.status; 

            if (status === 200) {
                let result200: Pet[] | null = null;
                let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(Pet.fromJS(item));
                }
                return result200;
            } else if (status === 400) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status !== 200 && status !== 204) {
                this.throwException("An unexpected server error occurred.", status, responseText);
            }
            return null;
        });
    }

    /**
     * Find pet by ID
     * @petId ID of pet to return
     * @return successful operation
     */
    getPetById(petId: number): Promise<Pet> {
        let url_ = this.baseUrl + "/pet/{petId}";
        if (petId === undefined || petId === null)
            throw new Error("The parameter 'petId' must be defined.");
        url_ = url_.replace("{petId}", encodeURIComponent("" + petId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processGetPetById(response);
        });
    }

    protected processGetPetById(response: Response): Promise<Pet> {
        return response.text().then((responseText) => {
            const status = response.status; 

            if (status === 200) {
                let result200: Pet | null = null;
                let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
                result200 = resultData200 ? Pet.fromJS(resultData200) : new Pet();
                return result200;
            } else if (status === 400) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status === 404) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status !== 200 && status !== 204) {
                this.throwException("An unexpected server error occurred.", status, responseText);
            }
            return null;
        });
    }

    /**
     * Updates a pet in the store with form data
     * @petId ID of pet that needs to be updated
     * @name Updated name of the pet
     * @status Updated status of the pet
     */
    updatePetWithForm(petId: number, name: string, status: string): Promise<void> {
        let url_ = this.baseUrl + "/pet/{petId}";
        if (petId === undefined || petId === null)
            throw new Error("The parameter 'petId' must be defined.");
        url_ = url_.replace("{petId}", encodeURIComponent("" + petId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (name !== null)
            content_.append("name", name.toString());
        if (status !== null)
            content_.append("status", status.toString());

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processUpdatePetWithForm(response);
        });
    }

    protected processUpdatePetWithForm(response: Response): Promise<void> {
        return response.text().then((responseText) => {
            const status = response.status; 

            if (status === 405) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status !== 200 && status !== 204) {
                this.throwException("An unexpected server error occurred.", status, responseText);
            }
            return null;
        });
    }

    /**
     * Deletes a pet
     * @petId Pet id to delete
     */
    deletePet(api_key: string, petId: number): Promise<void> {
        let url_ = this.baseUrl + "/pet/{petId}";
        if (petId === undefined || petId === null)
            throw new Error("The parameter 'petId' must be defined.");
        url_ = url_.replace("{petId}", encodeURIComponent("" + petId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        let options_ = <RequestInit>{
            body: content_,
            method: "DELETE",
            headers: {
                "api_key": api_key, 
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processDeletePet(response);
        });
    }

    protected processDeletePet(response: Response): Promise<void> {
        return response.text().then((responseText) => {
            const status = response.status; 

            if (status === 400) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status === 404) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status !== 200 && status !== 204) {
                this.throwException("An unexpected server error occurred.", status, responseText);
            }
            return null;
        });
    }

    /**
     * uploads an image
     * @petId ID of pet to update
     * @additionalMetadata Additional data to pass to server
     * @file file to upload
     * @return successful operation
     */
    uploadFile(petId: number, additionalMetadata: string, file: FileParameter): Promise<ApiResponse> {
        let url_ = this.baseUrl + "/pet/{petId}/uploadImage";
        if (petId === undefined || petId === null)
            throw new Error("The parameter 'petId' must be defined.");
        url_ = url_.replace("{petId}", encodeURIComponent("" + petId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (additionalMetadata !== null)
            content_.append("additionalMetadata", additionalMetadata.toString());
        if (file !== null)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processUploadFile(response);
        });
    }

    protected processUploadFile(response: Response): Promise<ApiResponse> {
        return response.text().then((responseText) => {
            const status = response.status; 

            if (status === 200) {
                let result200: ApiResponse | null = null;
                let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
                result200 = resultData200 ? ApiResponse.fromJS(resultData200) : new ApiResponse();
                return result200;
            } else if (status !== 200 && status !== 204) {
                this.throwException("An unexpected server error occurred.", status, responseText);
            }
            return null;
        });
    }

    /**
     * Returns pet inventories by status
     * @return successful operation
     */
    getInventory(): Promise<{ [key: string] : number; }> {
        let url_ = this.baseUrl + "/store/inventory";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processGetInventory(response);
        });
    }

    protected processGetInventory(response: Response): Promise<{ [key: string] : number; }> {
        return response.text().then((responseText) => {
            const status = response.status; 

            if (status === 200) {
                let result200: { [key: string] : number; } | null = null;
                let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
                if (resultData200) {
                    result200 = {};
                    for (let key in resultData200) {
                        if (resultData200.hasOwnProperty(key))
                            result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                    }
                }
                return result200;
            } else if (status !== 200 && status !== 204) {
                this.throwException("An unexpected server error occurred.", status, responseText);
            }
            return null;
        });
    }

    /**
     * Place an order for a pet
     * @body order placed for purchasing the pet
     * @return successful operation
     */
    placeOrder(body: Order): Promise<Order> {
        let url_ = this.baseUrl + "/store/order";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body ? body.toJSON() : null);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processPlaceOrder(response);
        });
    }

    protected processPlaceOrder(response: Response): Promise<Order> {
        return response.text().then((responseText) => {
            const status = response.status; 

            if (status === 200) {
                let result200: Order | null = null;
                let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
                result200 = resultData200 ? Order.fromJS(resultData200) : new Order();
                return result200;
            } else if (status === 400) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status !== 200 && status !== 204) {
                this.throwException("An unexpected server error occurred.", status, responseText);
            }
            return null;
        });
    }

    /**
     * Find purchase order by ID
     * @orderId ID of pet that needs to be fetched
     * @return successful operation
     */
    getOrderById(orderId: number): Promise<Order> {
        let url_ = this.baseUrl + "/store/order/{orderId}";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processGetOrderById(response);
        });
    }

    protected processGetOrderById(response: Response): Promise<Order> {
        return response.text().then((responseText) => {
            const status = response.status; 

            if (status === 200) {
                let result200: Order | null = null;
                let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
                result200 = resultData200 ? Order.fromJS(resultData200) : new Order();
                return result200;
            } else if (status === 400) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status === 404) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status !== 200 && status !== 204) {
                this.throwException("An unexpected server error occurred.", status, responseText);
            }
            return null;
        });
    }

    /**
     * Delete purchase order by ID
     * @orderId ID of the order that needs to be deleted
     */
    deleteOrder(orderId: number): Promise<void> {
        let url_ = this.baseUrl + "/store/order/{orderId}";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        let options_ = <RequestInit>{
            body: content_,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processDeleteOrder(response);
        });
    }

    protected processDeleteOrder(response: Response): Promise<void> {
        return response.text().then((responseText) => {
            const status = response.status; 

            if (status === 400) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status === 404) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status !== 200 && status !== 204) {
                this.throwException("An unexpected server error occurred.", status, responseText);
            }
            return null;
        });
    }

    /**
     * Create user
     * @body Created user object
     * @return successful operation
     */
    createUser(body: User): Promise<void> {
        let url_ = this.baseUrl + "/user";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body ? body.toJSON() : null);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processCreateUser(response);
        });
    }

    protected processCreateUser(response: Response): Promise<void> {
        return response.text().then((responseText) => {
            const status = response.status; 

            {
                return null;
            }
        });
    }

    /**
     * Creates list of users with given input array
     * @body List of user object
     * @return successful operation
     */
    createUsersWithArrayInput(body: User[]): Promise<void> {
        let url_ = this.baseUrl + "/user/createWithArray";
        url_ = url_.replace(/[?&]$/, "");

        let contentData_: any = [];
        if (body) {
            for (let item of body)
                contentData_.push(item.toJSON());
        }
        const content_ = JSON.stringify(body ? contentData_ : null);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processCreateUsersWithArrayInput(response);
        });
    }

    protected processCreateUsersWithArrayInput(response: Response): Promise<void> {
        return response.text().then((responseText) => {
            const status = response.status; 

            {
                return null;
            }
        });
    }

    /**
     * Creates list of users with given input array
     * @body List of user object
     * @return successful operation
     */
    createUsersWithListInput(body: User[]): Promise<void> {
        let url_ = this.baseUrl + "/user/createWithList";
        url_ = url_.replace(/[?&]$/, "");

        let contentData_: any = [];
        if (body) {
            for (let item of body)
                contentData_.push(item.toJSON());
        }
        const content_ = JSON.stringify(body ? contentData_ : null);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processCreateUsersWithListInput(response);
        });
    }

    protected processCreateUsersWithListInput(response: Response): Promise<void> {
        return response.text().then((responseText) => {
            const status = response.status; 

            {
                return null;
            }
        });
    }

    /**
     * Logs user into the system
     * @username The user name for login
     * @password The password for login in clear text
     * @return successful operation
     */
    loginUser(username: string, password: string): Promise<string> {
        let url_ = this.baseUrl + "/user/login?";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined and cannot be null.");
        else
            url_ += "username=" + encodeURIComponent("" + username) + "&"; 
        if (password === undefined || password === null)
            throw new Error("The parameter 'password' must be defined and cannot be null.");
        else
            url_ += "password=" + encodeURIComponent("" + password) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processLoginUser(response);
        });
    }

    protected processLoginUser(response: Response): Promise<string> {
        return response.text().then((responseText) => {
            const status = response.status; 

            if (status === 200) {
                let result200: string | null = null;
                let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            } else if (status === 400) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status !== 200 && status !== 204) {
                this.throwException("An unexpected server error occurred.", status, responseText);
            }
            return null;
        });
    }

    /**
     * Logs out current logged in user session
     * @return successful operation
     */
    logoutUser(): Promise<void> {
        let url_ = this.baseUrl + "/user/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processLogoutUser(response);
        });
    }

    protected processLogoutUser(response: Response): Promise<void> {
        return response.text().then((responseText) => {
            const status = response.status; 

            {
                return null;
            }
        });
    }

    /**
     * Get user by user name
     * @username The name that needs to be fetched. Use user1 for testing.
     * @return successful operation
     */
    getUserByName(username: string): Promise<User> {
        let url_ = this.baseUrl + "/user/{username}";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processGetUserByName(response);
        });
    }

    protected processGetUserByName(response: Response): Promise<User> {
        return response.text().then((responseText) => {
            const status = response.status; 

            if (status === 200) {
                let result200: User | null = null;
                let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
                result200 = resultData200 ? User.fromJS(resultData200) : new User();
                return result200;
            } else if (status === 400) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status === 404) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status !== 200 && status !== 204) {
                this.throwException("An unexpected server error occurred.", status, responseText);
            }
            return null;
        });
    }

    /**
     * Updated user
     * @username name that need to be updated
     * @body Updated user object
     */
    updateUser(username: string, body: User): Promise<void> {
        let url_ = this.baseUrl + "/user/{username}";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body ? body.toJSON() : null);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processUpdateUser(response);
        });
    }

    protected processUpdateUser(response: Response): Promise<void> {
        return response.text().then((responseText) => {
            const status = response.status; 

            if (status === 400) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status === 404) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status !== 200 && status !== 204) {
                this.throwException("An unexpected server error occurred.", status, responseText);
            }
            return null;
        });
    }

    /**
     * Delete user
     * @username The name that needs to be deleted
     */
    deleteUser(username: string): Promise<void> {
        let url_ = this.baseUrl + "/user/{username}";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        let options_ = <RequestInit>{
            body: content_,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((response: Response) => {
            return this.processDeleteUser(response);
        });
    }

    protected processDeleteUser(response: Response): Promise<void> {
        return response.text().then((responseText) => {
            const status = response.status; 

            if (status === 400) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status === 404) {
                this.throwException("A server error occurred.", status, responseText);
            } else if (status !== 200 && status !== 204) {
                this.throwException("An unexpected server error occurred.", status, responseText);
            }
            return null;
        });
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export class Order {
    id: number | null | undefined;
    petId: number | null | undefined;
    quantity: number | null | undefined;
    shipDate: Date | null | undefined;
    /** Order Status */
    status: OrderStatus | null | undefined;
    complete: boolean | null | undefined = false;

    init(data?: any) {
        if (data !== undefined) {
            this.id = data["id"];
            this.petId = data["petId"];
            this.quantity = data["quantity"];
            this.shipDate = data["shipDate"] ? new Date(data["shipDate"].toString()) : undefined;
            this.status = data["status"];
            this.complete = data["complete"] !== undefined ? data["complete"] : false;
        }
    }

    static fromJS(data: any): Order {
        let result = new Order();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id;
        data["petId"] = this.petId;
        data["quantity"] = this.quantity;
        data["shipDate"] = this.shipDate ? this.shipDate.toISOString() : undefined;
        data["status"] = this.status;
        data["complete"] = this.complete;
        return data; 
    }
}

export class Category {
    id: number | null | undefined;
    name: string | null | undefined;

    init(data?: any) {
        if (data !== undefined) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): Category {
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export class User {
    id: number | null | undefined;
    username: string | null | undefined;
    firstName: string | null | undefined;
    lastName: string | null | undefined;
    email: string | null | undefined;
    password: string | null | undefined;
    phone: string | null | undefined;
    /** User Status */
    userStatus: number | null | undefined;

    init(data?: any) {
        if (data !== undefined) {
            this.id = data["id"];
            this.username = data["username"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.email = data["email"];
            this.password = data["password"];
            this.phone = data["phone"];
            this.userStatus = data["userStatus"];
        }
    }

    static fromJS(data: any): User {
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id;
        data["username"] = this.username;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["password"] = this.password;
        data["phone"] = this.phone;
        data["userStatus"] = this.userStatus;
        return data; 
    }
}

export class Tag {
    id: number | null | undefined;
    name: string | null | undefined;

    init(data?: any) {
        if (data !== undefined) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): Tag {
        let result = new Tag();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export class Pet {
    id: number | null | undefined;
    category: Category | null | undefined;
    name: string | undefined;
    photoUrls: string[] | undefined = [];
    tags: Tag[] | null | undefined;
    /** pet status in the store */
    status: PetStatus | null | undefined;

    init(data?: any) {
        if (data !== undefined) {
            this.id = data["id"];
            this.category = data["category"] ? Category.fromJS(data["category"]) : undefined;
            this.name = data["name"];
            if (data["photoUrls"] && data["photoUrls"].constructor === Array) {
                this.photoUrls = [];
                for (let item of data["photoUrls"])
                    this.photoUrls.push(item);
            }
            if (data["tags"] && data["tags"].constructor === Array) {
                this.tags = [];
                for (let item of data["tags"])
                    this.tags.push(Tag.fromJS(item));
            }
            this.status = data["status"];
        }
    }

    static fromJS(data: any): Pet {
        let result = new Pet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id;
        data["category"] = this.category ? this.category.toJSON() : undefined;
        data["name"] = this.name;
        if (this.photoUrls && this.photoUrls.constructor === Array) {
            data["photoUrls"] = [];
            for (let item of this.photoUrls)
                data["photoUrls"].push(item);
        }
        if (this.tags && this.tags.constructor === Array) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["status"] = this.status;
        return data; 
    }
}

export class ApiResponse {
    code: number | null | undefined;
    type: string | null | undefined;
    message: string | null | undefined;

    init(data?: any) {
        if (data !== undefined) {
            this.code = data["code"];
            this.type = data["type"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): ApiResponse {
        let result = new ApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
        data["code"] = this.code;
        data["type"] = this.type;
        data["message"] = this.message;
        return data; 
    }
}

export enum Status {
    Available = <any>"available", 
    Pending = <any>"pending", 
    Sold = <any>"sold", 
}

export enum OrderStatus {
    Placed = <any>"placed", 
    Approved = <any>"approved", 
    Delivered = <any>"delivered", 
}

export enum PetStatus {
    Available = <any>"available", 
    Pending = <any>"pending", 
    Sold = <any>"sold", 
}

export interface FileParameter
{
    data: any;
    fileName: string;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}