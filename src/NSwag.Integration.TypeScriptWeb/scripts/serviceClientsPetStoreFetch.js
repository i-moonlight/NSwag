/* tslint: disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v7.7.6174.25699 (NJsonSchema v5.19.6171.28316) (http://NSwag.org)
// </auto-generated>
//----------------------
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
define(["require", "exports"], function (require, exports) {
    "use strict";
    var Client = (function () {
        function Client(baseUrl, http) {
            this.jsonParseReviver = undefined;
            this.baseUrl = baseUrl ? baseUrl : "";
            this.http = http ? http : window;
        }
        /**
         * Add a new pet to the store
         * @body Pet object that needs to be added to the store
         */
        Client.prototype.addPet = function (body) {
            var _this = this;
            var url_ = this.baseUrl + "/pet";
            var content_ = JSON.stringify(body ? body.toJS() : null);
            return this.http.fetch(url_, {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json; charset=UTF-8"
                }
            }).then(function (response) {
                return _this.processAddPet(response);
            });
        };
        Client.prototype.processAddPet = function (response) {
            var _this = this;
            return response.text().then(function (responseText) {
                var status = response.status;
                if (status === 405) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status !== 200 && status !== 204)
                    return _this.throwException("An unexpected server error occurred.", status, responseText);
                return null;
            });
        };
        /**
         * Update an existing pet
         * @body Pet object that needs to be added to the store
         */
        Client.prototype.updatePet = function (body) {
            var _this = this;
            var url_ = this.baseUrl + "/pet";
            var content_ = JSON.stringify(body ? body.toJS() : null);
            return this.http.fetch(url_, {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json; charset=UTF-8"
                }
            }).then(function (response) {
                return _this.processUpdatePet(response);
            });
        };
        Client.prototype.processUpdatePet = function (response) {
            var _this = this;
            return response.text().then(function (responseText) {
                var status = response.status;
                if (status === 400) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status === 404) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status === 405) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status !== 200 && status !== 204)
                    return _this.throwException("An unexpected server error occurred.", status, responseText);
                return null;
            });
        };
        /**
         * Finds Pets by status
         * @status Status values that need to be considered for filter
         * @return successful operation
         */
        Client.prototype.findPetsByStatus = function (status) {
            var _this = this;
            var url_ = this.baseUrl + "/pet/findByStatus?";
            if (status === undefined || status === null)
                throw new Error("The parameter 'status' must be defined and cannot be null.");
            else
                status.forEach(function (item) { url_ += "status=" + encodeURIComponent("" + item) + "&"; });
            return this.http.fetch(url_, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json; charset=UTF-8"
                }
            }).then(function (response) {
                return _this.processFindPetsByStatus(response);
            });
        };
        Client.prototype.processFindPetsByStatus = function (response) {
            var _this = this;
            return response.text().then(function (responseText) {
                var status = response.status;
                if (status === 200) {
                    var result200 = null;
                    var resultData200 = responseText === "" ? null : JSON.parse(responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                            var item = resultData200_1[_i];
                            result200.push(Pet.fromJS(item));
                        }
                    }
                    return result200;
                }
                else if (status === 400) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status !== 200 && status !== 204)
                    return _this.throwException("An unexpected server error occurred.", status, responseText);
                return null;
            });
        };
        /**
         * Finds Pets by tags
         * @tags Tags to filter by
         * @return successful operation
         * @deprecated
         */
        Client.prototype.findPetsByTags = function (tags) {
            var _this = this;
            var url_ = this.baseUrl + "/pet/findByTags?";
            if (tags === undefined || tags === null)
                throw new Error("The parameter 'tags' must be defined and cannot be null.");
            else
                tags.forEach(function (item) { url_ += "tags=" + encodeURIComponent("" + item) + "&"; });
            return this.http.fetch(url_, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json; charset=UTF-8"
                }
            }).then(function (response) {
                return _this.processFindPetsByTags(response);
            });
        };
        Client.prototype.processFindPetsByTags = function (response) {
            var _this = this;
            return response.text().then(function (responseText) {
                var status = response.status;
                if (status === 200) {
                    var result200 = null;
                    var resultData200 = responseText === "" ? null : JSON.parse(responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_2 = resultData200; _i < resultData200_2.length; _i++) {
                            var item = resultData200_2[_i];
                            result200.push(Pet.fromJS(item));
                        }
                    }
                    return result200;
                }
                else if (status === 400) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status !== 200 && status !== 204)
                    return _this.throwException("An unexpected server error occurred.", status, responseText);
                return null;
            });
        };
        /**
         * Find pet by ID
         * @petId ID of pet to return
         * @return successful operation
         */
        Client.prototype.getPetById = function (petId) {
            var _this = this;
            var url_ = this.baseUrl + "/pet/{petId}";
            if (petId === undefined || petId === null)
                throw new Error("The parameter 'petId' must be defined.");
            url_ = url_.replace("{petId}", encodeURIComponent("" + petId));
            return this.http.fetch(url_, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json; charset=UTF-8"
                }
            }).then(function (response) {
                return _this.processGetPetById(response);
            });
        };
        Client.prototype.processGetPetById = function (response) {
            var _this = this;
            return response.text().then(function (responseText) {
                var status = response.status;
                if (status === 200) {
                    var result200 = null;
                    var resultData200 = responseText === "" ? null : JSON.parse(responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Pet.fromJS(resultData200) : new Pet();
                    return result200;
                }
                else if (status === 400) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status === 404) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status !== 200 && status !== 204)
                    return _this.throwException("An unexpected server error occurred.", status, responseText);
                return null;
            });
        };
        /**
         * Updates a pet in the store with form data
         * @petId ID of pet that needs to be updated
         * @name Updated name of the pet
         * @status Updated status of the pet
         */
        Client.prototype.updatePetWithForm = function (petId, name, status) {
            var _this = this;
            var url_ = this.baseUrl + "/pet/{petId}";
            if (petId === undefined || petId === null)
                throw new Error("The parameter 'petId' must be defined.");
            url_ = url_.replace("{petId}", encodeURIComponent("" + petId));
            var content_ = new FormData();
            if (name !== null)
                content_.append("name", name.toString());
            if (status !== null)
                content_.append("status", status.toString());
            return this.http.fetch(url_, {
                body: content_,
                method: "POST",
                headers: {
                    'Content-Type': undefined
                }
            }).then(function (response) {
                return _this.processUpdatePetWithForm(response);
            });
        };
        Client.prototype.processUpdatePetWithForm = function (response) {
            var _this = this;
            return response.text().then(function (responseText) {
                var status = response.status;
                if (status === 405) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status !== 200 && status !== 204)
                    return _this.throwException("An unexpected server error occurred.", status, responseText);
                return null;
            });
        };
        /**
         * Deletes a pet
         * @petId Pet id to delete
         */
        Client.prototype.deletePet = function (api_key, petId) {
            var _this = this;
            var url_ = this.baseUrl + "/pet/{petId}";
            if (petId === undefined || petId === null)
                throw new Error("The parameter 'petId' must be defined.");
            url_ = url_.replace("{petId}", encodeURIComponent("" + petId));
            var content_ = "";
            return this.http.fetch(url_, {
                body: content_,
                method: "DELETE",
                headers: {
                    "api_key": api_key,
                    "Content-Type": "application/json; charset=UTF-8"
                }
            }).then(function (response) {
                return _this.processDeletePet(response);
            });
        };
        Client.prototype.processDeletePet = function (response) {
            var _this = this;
            return response.text().then(function (responseText) {
                var status = response.status;
                if (status === 400) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status === 404) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status !== 200 && status !== 204)
                    return _this.throwException("An unexpected server error occurred.", status, responseText);
                return null;
            });
        };
        /**
         * uploads an image
         * @petId ID of pet to update
         * @additionalMetadata Additional data to pass to server
         * @file file to upload
         * @return successful operation
         */
        Client.prototype.uploadFile = function (petId, additionalMetadata, file) {
            var _this = this;
            var url_ = this.baseUrl + "/pet/{petId}/uploadImage";
            if (petId === undefined || petId === null)
                throw new Error("The parameter 'petId' must be defined.");
            url_ = url_.replace("{petId}", encodeURIComponent("" + petId));
            var content_ = new FormData();
            if (additionalMetadata !== null)
                content_.append("additionalMetadata", additionalMetadata.toString());
            if (file !== null)
                content_.append("file", file.data, file.fileName ? file.fileName : "file");
            return this.http.fetch(url_, {
                body: content_,
                method: "POST",
                headers: {
                    'Content-Type': undefined
                }
            }).then(function (response) {
                return _this.processUploadFile(response);
            });
        };
        Client.prototype.processUploadFile = function (response) {
            var _this = this;
            return response.text().then(function (responseText) {
                var status = response.status;
                if (status === 200) {
                    var result200 = null;
                    var resultData200 = responseText === "" ? null : JSON.parse(responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? ApiResponse.fromJS(resultData200) : new ApiResponse();
                    return result200;
                }
                else if (status !== 200 && status !== 204)
                    return _this.throwException("An unexpected server error occurred.", status, responseText);
                return null;
            });
        };
        /**
         * Returns pet inventories by status
         * @return successful operation
         */
        Client.prototype.getInventory = function () {
            var _this = this;
            var url_ = this.baseUrl + "/store/inventory";
            return this.http.fetch(url_, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json; charset=UTF-8"
                }
            }).then(function (response) {
                return _this.processGetInventory(response);
            });
        };
        Client.prototype.processGetInventory = function (response) {
            var _this = this;
            return response.text().then(function (responseText) {
                var status = response.status;
                if (status === 200) {
                    var result200 = null;
                    var resultData200 = responseText === "" ? null : JSON.parse(responseText, _this.jsonParseReviver);
                    if (resultData200) {
                        result200 = {};
                        for (var key in resultData200) {
                            if (resultData200.hasOwnProperty(key))
                                result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                        }
                    }
                    return result200;
                }
                else if (status !== 200 && status !== 204)
                    return _this.throwException("An unexpected server error occurred.", status, responseText);
                return null;
            });
        };
        /**
         * Place an order for a pet
         * @body order placed for purchasing the pet
         * @return successful operation
         */
        Client.prototype.placeOrder = function (body) {
            var _this = this;
            var url_ = this.baseUrl + "/store/order";
            var content_ = JSON.stringify(body ? body.toJS() : null);
            return this.http.fetch(url_, {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json; charset=UTF-8"
                }
            }).then(function (response) {
                return _this.processPlaceOrder(response);
            });
        };
        Client.prototype.processPlaceOrder = function (response) {
            var _this = this;
            return response.text().then(function (responseText) {
                var status = response.status;
                if (status === 200) {
                    var result200 = null;
                    var resultData200 = responseText === "" ? null : JSON.parse(responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Order.fromJS(resultData200) : new Order();
                    return result200;
                }
                else if (status === 400) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status !== 200 && status !== 204)
                    return _this.throwException("An unexpected server error occurred.", status, responseText);
                return null;
            });
        };
        /**
         * Find purchase order by ID
         * @orderId ID of pet that needs to be fetched
         * @return successful operation
         */
        Client.prototype.getOrderById = function (orderId) {
            var _this = this;
            var url_ = this.baseUrl + "/store/order/{orderId}";
            if (orderId === undefined || orderId === null)
                throw new Error("The parameter 'orderId' must be defined.");
            url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
            return this.http.fetch(url_, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json; charset=UTF-8"
                }
            }).then(function (response) {
                return _this.processGetOrderById(response);
            });
        };
        Client.prototype.processGetOrderById = function (response) {
            var _this = this;
            return response.text().then(function (responseText) {
                var status = response.status;
                if (status === 200) {
                    var result200 = null;
                    var resultData200 = responseText === "" ? null : JSON.parse(responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Order.fromJS(resultData200) : new Order();
                    return result200;
                }
                else if (status === 400) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status === 404) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status !== 200 && status !== 204)
                    return _this.throwException("An unexpected server error occurred.", status, responseText);
                return null;
            });
        };
        /**
         * Delete purchase order by ID
         * @orderId ID of the order that needs to be deleted
         */
        Client.prototype.deleteOrder = function (orderId) {
            var _this = this;
            var url_ = this.baseUrl + "/store/order/{orderId}";
            if (orderId === undefined || orderId === null)
                throw new Error("The parameter 'orderId' must be defined.");
            url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
            var content_ = "";
            return this.http.fetch(url_, {
                body: content_,
                method: "DELETE",
                headers: {
                    "Content-Type": "application/json; charset=UTF-8"
                }
            }).then(function (response) {
                return _this.processDeleteOrder(response);
            });
        };
        Client.prototype.processDeleteOrder = function (response) {
            var _this = this;
            return response.text().then(function (responseText) {
                var status = response.status;
                if (status === 400) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status === 404) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status !== 200 && status !== 204)
                    return _this.throwException("An unexpected server error occurred.", status, responseText);
                return null;
            });
        };
        /**
         * Create user
         * @body Created user object
         * @return successful operation
         */
        Client.prototype.createUser = function (body) {
            var _this = this;
            var url_ = this.baseUrl + "/user";
            var content_ = JSON.stringify(body ? body.toJS() : null);
            return this.http.fetch(url_, {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json; charset=UTF-8"
                }
            }).then(function (response) {
                return _this.processCreateUser(response);
            });
        };
        Client.prototype.processCreateUser = function (response) {
            return response.text().then(function (responseText) {
                var status = response.status;
                {
                    return null;
                }
            });
        };
        /**
         * Creates list of users with given input array
         * @body List of user object
         * @return successful operation
         */
        Client.prototype.createUsersWithArrayInput = function (body) {
            var _this = this;
            var url_ = this.baseUrl + "/user/createWithArray";
            var contentData_ = [];
            if (body) {
                for (var _i = 0, body_1 = body; _i < body_1.length; _i++) {
                    var item = body_1[_i];
                    contentData_.push(item.toJS());
                }
            }
            var content_ = JSON.stringify(body ? contentData_ : null);
            return this.http.fetch(url_, {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json; charset=UTF-8"
                }
            }).then(function (response) {
                return _this.processCreateUsersWithArrayInput(response);
            });
        };
        Client.prototype.processCreateUsersWithArrayInput = function (response) {
            return response.text().then(function (responseText) {
                var status = response.status;
                {
                    return null;
                }
            });
        };
        /**
         * Creates list of users with given input array
         * @body List of user object
         * @return successful operation
         */
        Client.prototype.createUsersWithListInput = function (body) {
            var _this = this;
            var url_ = this.baseUrl + "/user/createWithList";
            var contentData_ = [];
            if (body) {
                for (var _i = 0, body_2 = body; _i < body_2.length; _i++) {
                    var item = body_2[_i];
                    contentData_.push(item.toJS());
                }
            }
            var content_ = JSON.stringify(body ? contentData_ : null);
            return this.http.fetch(url_, {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json; charset=UTF-8"
                }
            }).then(function (response) {
                return _this.processCreateUsersWithListInput(response);
            });
        };
        Client.prototype.processCreateUsersWithListInput = function (response) {
            return response.text().then(function (responseText) {
                var status = response.status;
                {
                    return null;
                }
            });
        };
        /**
         * Logs user into the system
         * @username The user name for login
         * @password The password for login in clear text
         * @return successful operation
         */
        Client.prototype.loginUser = function (username, password) {
            var _this = this;
            var url_ = this.baseUrl + "/user/login?";
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined and cannot be null.");
            else
                url_ += "username=" + encodeURIComponent("" + username) + "&";
            if (password === undefined || password === null)
                throw new Error("The parameter 'password' must be defined and cannot be null.");
            else
                url_ += "password=" + encodeURIComponent("" + password) + "&";
            return this.http.fetch(url_, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json; charset=UTF-8"
                }
            }).then(function (response) {
                return _this.processLoginUser(response);
            });
        };
        Client.prototype.processLoginUser = function (response) {
            var _this = this;
            return response.text().then(function (responseText) {
                var status = response.status;
                if (status === 200) {
                    var result200 = null;
                    var resultData200 = responseText === "" ? null : JSON.parse(responseText, _this.jsonParseReviver);
                    result200 = resultData200 !== undefined ? resultData200 : null;
                    return result200;
                }
                else if (status === 400) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status !== 200 && status !== 204)
                    return _this.throwException("An unexpected server error occurred.", status, responseText);
                return null;
            });
        };
        /**
         * Logs out current logged in user session
         * @return successful operation
         */
        Client.prototype.logoutUser = function () {
            var _this = this;
            var url_ = this.baseUrl + "/user/logout";
            return this.http.fetch(url_, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json; charset=UTF-8"
                }
            }).then(function (response) {
                return _this.processLogoutUser(response);
            });
        };
        Client.prototype.processLogoutUser = function (response) {
            return response.text().then(function (responseText) {
                var status = response.status;
                {
                    return null;
                }
            });
        };
        /**
         * Get user by user name
         * @username The name that needs to be fetched. Use user1 for testing.
         * @return successful operation
         */
        Client.prototype.getUserByName = function (username) {
            var _this = this;
            var url_ = this.baseUrl + "/user/{username}";
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            return this.http.fetch(url_, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json; charset=UTF-8"
                }
            }).then(function (response) {
                return _this.processGetUserByName(response);
            });
        };
        Client.prototype.processGetUserByName = function (response) {
            var _this = this;
            return response.text().then(function (responseText) {
                var status = response.status;
                if (status === 200) {
                    var result200 = null;
                    var resultData200 = responseText === "" ? null : JSON.parse(responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? User.fromJS(resultData200) : new User();
                    return result200;
                }
                else if (status === 400) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status === 404) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status !== 200 && status !== 204)
                    return _this.throwException("An unexpected server error occurred.", status, responseText);
                return null;
            });
        };
        /**
         * Updated user
         * @username name that need to be updated
         * @body Updated user object
         */
        Client.prototype.updateUser = function (username, body) {
            var _this = this;
            var url_ = this.baseUrl + "/user/{username}";
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            var content_ = JSON.stringify(body ? body.toJS() : null);
            return this.http.fetch(url_, {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json; charset=UTF-8"
                }
            }).then(function (response) {
                return _this.processUpdateUser(response);
            });
        };
        Client.prototype.processUpdateUser = function (response) {
            var _this = this;
            return response.text().then(function (responseText) {
                var status = response.status;
                if (status === 400) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status === 404) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status !== 200 && status !== 204)
                    return _this.throwException("An unexpected server error occurred.", status, responseText);
                return null;
            });
        };
        /**
         * Delete user
         * @username The name that needs to be deleted
         */
        Client.prototype.deleteUser = function (username) {
            var _this = this;
            var url_ = this.baseUrl + "/user/{username}";
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            var content_ = "";
            return this.http.fetch(url_, {
                body: content_,
                method: "DELETE",
                headers: {
                    "Content-Type": "application/json; charset=UTF-8"
                }
            }).then(function (response) {
                return _this.processDeleteUser(response);
            });
        };
        Client.prototype.processDeleteUser = function (response) {
            var _this = this;
            return response.text().then(function (responseText) {
                var status = response.status;
                if (status === 400) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status === 404) {
                    return _this.throwException("A server error occurred.", status, responseText);
                }
                else if (status !== 200 && status !== 204)
                    return _this.throwException("An unexpected server error occurred.", status, responseText);
                return null;
            });
        };
        Client.prototype.throwException = function (message, status, response, result) {
            if (result !== null && result !== undefined)
                throw result;
            else
                throw new SwaggerException(message, status, response);
        };
        return Client;
    }());
    exports.Client = Client;
    var Order = (function () {
        function Order(data) {
            this.complete = false;
            if (data !== undefined) {
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.petId = data["petId"] !== undefined ? data["petId"] : null;
                this.quantity = data["quantity"] !== undefined ? data["quantity"] : null;
                this.shipDate = data["shipDate"] ? new Date(data["shipDate"].toString()) : null;
                this.status = data["status"] !== undefined ? data["status"] : null;
                this.complete = data["complete"] !== undefined ? data["complete"] : false;
            }
        }
        Order.fromJS = function (data) {
            return new Order(data);
        };
        Order.prototype.toJS = function (data) {
            data = data === undefined ? {} : data;
            data["id"] = this.id !== undefined ? this.id : null;
            data["petId"] = this.petId !== undefined ? this.petId : null;
            data["quantity"] = this.quantity !== undefined ? this.quantity : null;
            data["shipDate"] = this.shipDate ? this.shipDate.toISOString() : null;
            data["status"] = this.status !== undefined ? this.status : null;
            data["complete"] = this.complete !== undefined ? this.complete : false;
            return data;
        };
        Order.prototype.toJSON = function () {
            return JSON.stringify(this.toJS());
        };
        Order.prototype.clone = function () {
            var json = this.toJSON();
            return new Order(JSON.parse(json));
        };
        return Order;
    }());
    exports.Order = Order;
    var Category = (function () {
        function Category(data) {
            if (data !== undefined) {
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        }
        Category.fromJS = function (data) {
            return new Category(data);
        };
        Category.prototype.toJS = function (data) {
            data = data === undefined ? {} : data;
            data["id"] = this.id !== undefined ? this.id : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        Category.prototype.toJSON = function () {
            return JSON.stringify(this.toJS());
        };
        Category.prototype.clone = function () {
            var json = this.toJSON();
            return new Category(JSON.parse(json));
        };
        return Category;
    }());
    exports.Category = Category;
    var User = (function () {
        function User(data) {
            if (data !== undefined) {
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.username = data["username"] !== undefined ? data["username"] : null;
                this.firstName = data["firstName"] !== undefined ? data["firstName"] : null;
                this.lastName = data["lastName"] !== undefined ? data["lastName"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.password = data["password"] !== undefined ? data["password"] : null;
                this.phone = data["phone"] !== undefined ? data["phone"] : null;
                this.userStatus = data["userStatus"] !== undefined ? data["userStatus"] : null;
            }
        }
        User.fromJS = function (data) {
            return new User(data);
        };
        User.prototype.toJS = function (data) {
            data = data === undefined ? {} : data;
            data["id"] = this.id !== undefined ? this.id : null;
            data["username"] = this.username !== undefined ? this.username : null;
            data["firstName"] = this.firstName !== undefined ? this.firstName : null;
            data["lastName"] = this.lastName !== undefined ? this.lastName : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["password"] = this.password !== undefined ? this.password : null;
            data["phone"] = this.phone !== undefined ? this.phone : null;
            data["userStatus"] = this.userStatus !== undefined ? this.userStatus : null;
            return data;
        };
        User.prototype.toJSON = function () {
            return JSON.stringify(this.toJS());
        };
        User.prototype.clone = function () {
            var json = this.toJSON();
            return new User(JSON.parse(json));
        };
        return User;
    }());
    exports.User = User;
    var Tag = (function () {
        function Tag(data) {
            if (data !== undefined) {
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        }
        Tag.fromJS = function (data) {
            return new Tag(data);
        };
        Tag.prototype.toJS = function (data) {
            data = data === undefined ? {} : data;
            data["id"] = this.id !== undefined ? this.id : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        Tag.prototype.toJSON = function () {
            return JSON.stringify(this.toJS());
        };
        Tag.prototype.clone = function () {
            var json = this.toJSON();
            return new Tag(JSON.parse(json));
        };
        return Tag;
    }());
    exports.Tag = Tag;
    var Pet = (function () {
        function Pet(data) {
            this.photoUrls = [];
            if (data !== undefined) {
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.category = data["category"] ? Category.fromJS(data["category"]) : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                if (data["photoUrls"] && data["photoUrls"].constructor === Array) {
                    this.photoUrls = [];
                    for (var _i = 0, _a = data["photoUrls"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.photoUrls.push(item);
                    }
                }
                if (data["tags"] && data["tags"].constructor === Array) {
                    this.tags = [];
                    for (var _b = 0, _c = data["tags"]; _b < _c.length; _b++) {
                        var item = _c[_b];
                        this.tags.push(Tag.fromJS(item));
                    }
                }
                this.status = data["status"] !== undefined ? data["status"] : null;
            }
        }
        Pet.fromJS = function (data) {
            return new Pet(data);
        };
        Pet.prototype.toJS = function (data) {
            data = data === undefined ? {} : data;
            data["id"] = this.id !== undefined ? this.id : null;
            data["category"] = this.category ? this.category.toJS() : null;
            data["name"] = this.name !== undefined ? this.name : null;
            if (this.photoUrls && this.photoUrls.constructor === Array) {
                data["photoUrls"] = [];
                for (var _i = 0, _a = this.photoUrls; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["photoUrls"].push(item);
                }
            }
            if (this.tags && this.tags.constructor === Array) {
                data["tags"] = [];
                for (var _b = 0, _c = this.tags; _b < _c.length; _b++) {
                    var item = _c[_b];
                    data["tags"].push(item.toJS());
                }
            }
            data["status"] = this.status !== undefined ? this.status : null;
            return data;
        };
        Pet.prototype.toJSON = function () {
            return JSON.stringify(this.toJS());
        };
        Pet.prototype.clone = function () {
            var json = this.toJSON();
            return new Pet(JSON.parse(json));
        };
        return Pet;
    }());
    exports.Pet = Pet;
    var ApiResponse = (function () {
        function ApiResponse(data) {
            if (data !== undefined) {
                this.code = data["code"] !== undefined ? data["code"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.message = data["message"] !== undefined ? data["message"] : null;
            }
        }
        ApiResponse.fromJS = function (data) {
            return new ApiResponse(data);
        };
        ApiResponse.prototype.toJS = function (data) {
            data = data === undefined ? {} : data;
            data["code"] = this.code !== undefined ? this.code : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["message"] = this.message !== undefined ? this.message : null;
            return data;
        };
        ApiResponse.prototype.toJSON = function () {
            return JSON.stringify(this.toJS());
        };
        ApiResponse.prototype.clone = function () {
            var json = this.toJSON();
            return new ApiResponse(JSON.parse(json));
        };
        return ApiResponse;
    }());
    exports.ApiResponse = ApiResponse;
    (function (Status) {
        Status[Status["Available"] = "available"] = "Available";
        Status[Status["Pending"] = "pending"] = "Pending";
        Status[Status["Sold"] = "sold"] = "Sold";
    })(exports.Status || (exports.Status = {}));
    var Status = exports.Status;
    (function (OrderStatus) {
        OrderStatus[OrderStatus["Placed"] = "placed"] = "Placed";
        OrderStatus[OrderStatus["Approved"] = "approved"] = "Approved";
        OrderStatus[OrderStatus["Delivered"] = "delivered"] = "Delivered";
    })(exports.OrderStatus || (exports.OrderStatus = {}));
    var OrderStatus = exports.OrderStatus;
    (function (PetStatus) {
        PetStatus[PetStatus["Available"] = "available"] = "Available";
        PetStatus[PetStatus["Pending"] = "pending"] = "Pending";
        PetStatus[PetStatus["Sold"] = "sold"] = "Sold";
    })(exports.PetStatus || (exports.PetStatus = {}));
    var PetStatus = exports.PetStatus;
    var SwaggerException = (function (_super) {
        __extends(SwaggerException, _super);
        function SwaggerException(message, status, response, result) {
            _super.call(this);
            this.message = message;
            this.status = status;
            this.response = response;
            this.result = result;
        }
        return SwaggerException;
    }(Error));
    exports.SwaggerException = SwaggerException;
});
//# sourceMappingURL=serviceClientsPetStoreFetch.js.map