<#@ template visibility="internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="NJsonSchema.CodeGeneration" #>
<#@ import namespace="System.Linq" #>

<#if(Model.HasOperations){#>
<#if(Model.GenerateContracts && Model.GenerateClientInterfaces){#>
[GeneratedCode("NSwag", "<#=SwaggerService.ToolchainVersion#>")]
public partial interface I<#=Model.Class#>
{
<#foreach(var operation in Model.Operations){#>
<#  if(operation.HasSummary){#>    /// <summary><#=ConversionUtilities.ConvertCSharpDocBreaks(operation.Summary, 1)#></summary>
<#  }foreach (var parameter in operation.Parameters){#>
<#      if(parameter.HasDescription){#>    /// <param name="<#=parameter.VariableNameLower#>"><#=ConversionUtilities.ConvertCSharpDocBreaks(parameter.Description, 1)#></param>
<#  }}if(operation.HasResultDescription){#>    /// <returns><#=ConversionUtilities.ConvertCSharpDocBreaks(operation.ResultDescription, 1)#></returns>
<#  }#>    /// <exception cref="<#=Model.ExceptionClass#>">A server side error occurred.</exception>
<#  if(operation.IsDeprecated){#>    [Obsolete]
<#  }#>    <#=operation.ResultType#> <#=operation.OperationNameUpper#>Async(<#foreach(var parameter in operation.Parameters){#><#=parameter.Type#> <#=parameter.VariableNameLower#><#if(!parameter.IsLast){#>, <#}}#>);

<#  if(operation.HasSummary){#>    /// <summary><#=ConversionUtilities.ConvertCSharpDocBreaks(operation.Summary, 1)#></summary>
<#  }foreach (var parameter in operation.Parameters){#>
<#      if(parameter.HasDescription){#>    /// <param name="<#=parameter.VariableNameLower#>"><#=ConversionUtilities.ConvertCSharpDocBreaks(parameter.Description, 1)#></param>
<#  }}#>    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
<#  if(operation.HasResultDescription){#>    /// <returns><#=ConversionUtilities.ConvertCSharpDocBreaks(operation.ResultDescription, 1)#></returns>
<#  }#>    /// <exception cref="<#=Model.ExceptionClass#>">A server side error occurred.</exception>
<#  if(operation.IsDeprecated){#>    [Obsolete]
<#  }#>    <#=operation.ResultType#> <#=operation.OperationNameUpper#>Async(<#foreach(var parameter in operation.Parameters){#><#=parameter.Type#> <#=parameter.VariableNameLower#>, <#}#>CancellationToken cancellationToken);

<#}#>
}
<#}#>

<#if(Model.GenerateImplementation){#>
[GeneratedCode("NSwag", "<#=SwaggerService.ToolchainVersion#>")]
public partial class <#=Model.Class#> <#if(Model.HasBaseType){#>: <#}#><#if(Model.HasBaseClass){#><#=Model.BaseClass#><#if(Model.GenerateClientInterfaces){#>, <#}#><#}#><#if(Model.GenerateClientInterfaces){#>I<#=Model.Class#><#}#>

{
<#if(Model.HasConfigurationClass){#>
    public <#=Model.Class#>() : this("<#=Model.BaseUrl#>", null) { }

    public <#=Model.Class#>(string baseUrl) : this(baseUrl, null) { }

    public <#=Model.Class#>(string baseUrl, <#=Model.ConfigurationClass#> configuration) : base(configuration)
    {
        BaseUrl = baseUrl; 
    }
<#}else{#>
    public <#=Model.Class#>() : this("<#=Model.BaseUrl#>") { }

    public <#=Model.Class#>(string baseUrl)
    {
        BaseUrl = baseUrl; 
    }
<#}#>

    partial void PrepareRequest(HttpClient request, ref string url);

    partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

    public string BaseUrl { get; set; }

<#foreach(var operation in Model.Operations){#>
<#  if(operation.HasSummary){#>    /// <summary><#=ConversionUtilities.ConvertCSharpDocBreaks(operation.Summary, 1)#></summary>
<#  }foreach (var parameter in operation.Parameters){#>
<#      if(parameter.HasDescription){#>    /// <param name="<#=parameter.VariableNameLower#>"><#=ConversionUtilities.ConvertCSharpDocBreaks(parameter.Description, 1)#></param>
<#  }}if(operation.HasResultDescription){#>    /// <returns><#=ConversionUtilities.ConvertCSharpDocBreaks(operation.ResultDescription, 1)#></returns>
<#  }#>    /// <exception cref="<#=Model.ExceptionClass#>">A server side error occurred.</exception>
<#  if(operation.IsDeprecated){#>    [Obsolete]
<#  }#>    public <#=operation.ResultType#> <#=operation.OperationNameUpper#>Async(<#foreach(var parameter in operation.Parameters){#><#=parameter.Type#> <#=parameter.VariableNameLower#><#if(!parameter.IsLast){#>, <#}}#>)
    {
        return <#=operation.OperationNameUpper#>Async(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableNameLower#>, <#}#>CancellationToken.None);
    }

<#  if(operation.HasSummary){#>    /// <summary><#=ConversionUtilities.ConvertCSharpDocBreaks(operation.Summary, 1)#></summary>
<#  }foreach (var parameter in operation.Parameters){#>
<#      if(parameter.HasDescription){#>    /// <param name="<#=parameter.VariableNameLower#>"><#=ConversionUtilities.ConvertCSharpDocBreaks(parameter.Description, 1)#></param>
<#  }}#>    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
<#  if(operation.HasResultDescription){#>    /// <returns><#=ConversionUtilities.ConvertCSharpDocBreaks(operation.ResultDescription, 1)#></returns>
<#  }#>    /// <exception cref="<#=Model.ExceptionClass#>">A server side error occurred.</exception>
<#  if(operation.IsDeprecated){#>    [Obsolete]
<#  }#>    public async <#=operation.ResultType#> <#=operation.OperationNameUpper#>Async(<#foreach(var parameter in operation.Parameters){#><#=parameter.Type#> <#=parameter.VariableNameLower#>, <#}#>CancellationToken cancellationToken)
    {
        var url_ = string.Format("{0}/{1}<#if(operation.QueryParameters.Any()){#>?<#}#>", BaseUrl, "<#=operation.Path#>");
<#foreach(var parameter in operation.PathParameters){#>

        if (<#=parameter.VariableNameLower#> == null)
            throw new ArgumentNullException("<#=parameter.VariableNameLower#>");
<#  if(parameter.IsDateArray){#>
        url_ = url_.Replace("{<#=parameter.Name#>}", Uri.EscapeDataString(string.Join(",", <#=parameter.VariableNameLower#>.Select(s_ => s_.ToString("s", CultureInfo.InvariantCulture)))));
<#  }else if(parameter.IsDate){#>
        url_ = url_.Replace("{<#=parameter.Name#>}", Uri.EscapeDataString(<#=parameter.VariableNameLower#>.ToString("s", CultureInfo.InvariantCulture)));
<#  }else if(parameter.IsArray){#>
        url_ = url_.Replace("{<#=parameter.Name#>}", Uri.EscapeDataString(string.Join(",", <#=parameter.VariableNameLower#>.Select(s_ => s_.ToString()))));
<#  }else{#>
        url_ = url_.Replace("{<#=parameter.Name#>}", Uri.EscapeDataString(<#=parameter.VariableNameLower#>.ToString()));
<#  }#>
<#}#>
<#foreach(var parameter in operation.QueryParameters){#>

<#  if(!parameter.IsNullable){#>
        if (<#=parameter.VariableNameLower#> == null)
            throw new ArgumentNullException("<#=parameter.VariableNameLower#>");
        else
<#  }else{#>
        if (<#=parameter.VariableNameLower#> != null)
<#  }#>
<#  if(parameter.IsDateArray){#>
            foreach(var item_ in <#=parameter.VariableNameLower#>) { url_ += string.Format("<#=parameter.Name#>={0}&", Uri.EscapeDataString(item_.ToString("s", CultureInfo.InvariantCulture))); }
<#  }else if(parameter.IsDate){#>
            url_ += string.Format("<#=parameter.Name#>={0}&", Uri.EscapeDataString(<#=parameter.VariableNameLower#><#if(parameter.Type.EndsWith("?")){#>.Value<#}#>.ToString("s", CultureInfo.InvariantCulture)));
<#  }else if(parameter.IsArray){#>
            foreach(var item_ in <#=parameter.VariableNameLower#>) { url_ += string.Format("<#=parameter.Name#>={0}&", Uri.EscapeDataString(item_.ToString())); }
<#  }else{#>
            url_ += string.Format("<#=parameter.Name#>={0}&", Uri.EscapeDataString(<#=parameter.VariableNameLower#><#if(parameter.Type.EndsWith("?")){#>.Value<#}#>.ToString()));
<#  }#>
<#}#>

<#      if(Model.UseHttpClientCreationMethod){#>
        var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
<#      }else{#>
        var client_ = new HttpClient();
<#      }#>
<#      if(Model.UseHttpRequestMessageCreationMethod){#>
        var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
<#      }else{#>
        var request_ = new HttpRequestMessage();
<#      }#>
        PrepareRequest(client_, ref url_);
<#foreach(var parameter in operation.HeaderParameters){#>
        request_.Headers.TryAddWithoutValidation("<#=parameter.Name#>", <#=parameter.VariableNameLower#>);
<#}#>
<#if(operation.HasContent){#>
        var content_ = new StringContent(JsonConvert.SerializeObject(<#=operation.ContentParameter.VariableNameLower#><#=Model.JsonConverters#>));
        content_.Headers.ContentType.MediaType = "application/json";
<#}else{#>
<#  if(operation.HasFormParameters){#>
      var content_ = new MultipartFormDataContent();
<#    foreach(var parameter in operation.FormParameters){#>
<#      if(parameter.IsNullable){#>
          if (<#=parameter.VariableNameLower#> != null)
<#      }else{#>
          if (<#=parameter.VariableNameLower#> == null)
              throw new ArgumentNullException("<#=parameter.VariableNameLower#>");
          else
<#      }#>
<#      if(parameter.IsFile){
          if(parameter.IsArray){#>
              foreach(var item_ in <#=parameter.VariableNameLower#>) { content_.Add(new StreamContent(item_.Data), "<#=parameter.Name#>", item_.FileName ?? "<#=parameter.Name#>"); }
<#        }else{#>
              content_.Add(new StreamContent(<#=parameter.VariableNameLower#>.Data), "<#=parameter.Name#>", <#=parameter.VariableNameLower#>.FileName ?? "<#=parameter.Name#>");
<#        }
        }else{#>
              content_.Add(new StringContent(<#=parameter.VariableNameLower#>.ToString()), "<#=parameter.Name#>");
<#      }#>
<#    }#>
<#  }else if(!operation.IsGetOrDelete){#>
        var content_ = new StringContent(string.Empty);
<#  }#>
<#}#>
<#  if(!operation.IsGetOrDelete){#>
        request_.Content = content_;
<#  }#>
        request_.Method = new HttpMethod("<#=operation.HttpMethod.ToString().ToUpperInvariant()#>");
        request_.RequestUri = new Uri(url_);
        var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
        ProcessResponse(client_, response_);

        var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
        var status_ = ((int)response_.StatusCode).ToString();

<#foreach(var response in operation.Responses){#>
        if (status_ == "<#=response.StatusCode#>") 
        {
<#if(response.HasType){#>
<#  if(response.IsFile){#>
<#      if(response.IsSuccess){#>
            return responseData_; 
<#      }else{#>
            throw new <#=Model.ExceptionClass#><byte[]>("A server side error occurred.", status_, responseData_, responseData_, null);
<#      }#>
<#  }else{#>
            var result_ = default(<#=response.Type#>); 
            try
            {
                if (responseData_.Length > 0)
                    result_ = JsonConvert.DeserializeObject<<#=response.Type#>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length)<#=Model.JsonConverters#>);                                
<#      if(response.IsSuccess){#>
                return result_; 
            } 
            catch (Exception exception) 
            {
                throw new <#=Model.ExceptionClass#>("Could not deserialize the response body.", status_, responseData_, exception);
            }
<#      }else{#>
            } 
            catch (Exception exception) 
            {
                throw new <#=Model.ExceptionClass#>("Could not deserialize the response body.", status_, responseData_, exception);
            }
<#          if(response.HasExceptionSchema){#>
            if (result_ == null)
                result_ = new <#=response.Type#>();
            result_.Data.Add("HttpStatus", status_);
            result_.Data.Add("ResponseData", Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
            throw new <#=Model.ExceptionClass#><<#=response.Type#>>("A server side error occurred.", status_, responseData_, result_, result_);
<#          }else{#>
            throw new <#=Model.ExceptionClass#><<#=response.Type#>>("A server side error occurred.", status_, responseData_, result_, null);
<#          }#>
<#      }#>
<#  }#>
<#}else{#>
<#  if(response.IsSuccess){#>
<#      if(operation.HasResultType){#>
            return default(<#=operation.ResultType.Substring(5, operation.ResultType.Length - 6)#>);
<#      }else{#>
            return;     
<#      }#> 
<#  }else{#>
            throw new <#=Model.ExceptionClass#>("A server side error occurred.", status_, responseData_, null);
<#  }#>
<#}#>
        }
        else
<#      }#>
        {
<#if(operation.HasDefaultResponse){#>
<#  if(operation.DefaultResponse.HasType){#>
<#      if(operation.DefaultResponse.IsFile){#>
<#          if(operation.DefaultResponse.IsSuccess){#>
            return responseData_; 
<#          }else{#>
            throw new <#=Model.ExceptionClass#><byte[]>("A server side error occurred.", status_, responseData_, responseData_, null);
<#          }#>
<#      }else{#>
            var result_ = default(<#=operation.DefaultResponse.Type#>); 
            try
            {
                if (responseData_.Length > 0)
                    result_ = JsonConvert.DeserializeObject<<#=operation.DefaultResponse.Type#>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length)<#=Model.JsonConverters#>);

<#  if(operation.HasOnlyDefaultResponse){#>
                if (status_.Length == 3 && status_.StartsWith("2"))
                    return result_;
<#  }#>
            } 
            catch (Exception exception_) 
            {
                throw new <#=Model.ExceptionClass#>("Could not deserialize the response body.", status_, responseData_, exception_);
            }

            throw new <#=Model.ExceptionClass#><<#=operation.DefaultResponse.Type#>>("A server side error occurred.", status_, responseData_, result_, null);
<#      }#>
<#  }else{#>
            return;
<#  }#>
<#}#>
        }

        throw new <#=Model.ExceptionClass#>("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
    }

<#}#>
}
<#}#>
<#}#>