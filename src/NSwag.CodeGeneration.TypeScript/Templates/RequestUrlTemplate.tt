<#@ template visibility="internal" #>
<#@ import namespace="System.Linq" #>
let url_ = this.baseUrl + "/<#=Model.Path#><#if(Model.QueryParameters.Any()){#>?<#}#>";
<#foreach(var parameter in Model.PathParameters){#>
<#  if(parameter.IsRequired){#>
if (<#=parameter.VariableName#> === undefined || <#=parameter.VariableName#> === null)
    throw new Error("The parameter '<#=parameter.VariableName#>' must be defined.");
<#  }else{#>
if (<#=parameter.VariableName#> !== null && <#=parameter.VariableName#> !== undefined)
<#  }#>
<#  if(parameter.IsDateArray){#>
url_ = url_.replace("{<#=parameter.Name#>}", encodeURIComponent(<#=parameter.VariableName#>.map(s_ => s_ ? s_.toJSON() : "null").join())); 
<#  }else if(parameter.IsDate){#>
url_ = url_.replace("{<#=parameter.Name#>}", encodeURIComponent(<#=parameter.VariableName#> ? "" + <#=parameter.VariableName#>.toJSON() : "null")); 
<#  }else if(parameter.IsArray){#>
url_ = url_.replace("{<#=parameter.Name#>}", encodeURIComponent(<#=parameter.VariableName#>.join())); 
<#  }else{#>
url_ = url_.replace("{<#=parameter.Name#>}", encodeURIComponent("" + <#=parameter.VariableName#>)); 
<#  }#>
<#  if(parameter.IsOptional){#>
else
    url_ = url_.replace("/{<#=parameter.Name#>}", ""); 
<#  }#>
<#}
  foreach(var parameter in Model.QueryParameters){
    if (parameter.IsRequired) { 
        if(parameter.IsNullable){#>
if (<#=parameter.VariableName#> === undefined)
    throw new Error("The parameter '<#=parameter.VariableName#>' must be defined.");
else
<#      }else{#>
if (<#=parameter.VariableName#> === undefined || <#=parameter.VariableName#> === null)
    throw new Error("The parameter '<#=parameter.VariableName#>' must be defined and cannot be null.");
else
<#      }
    }else{
        if(parameter.IsNullable){#>
if (<#=parameter.VariableName#> !== undefined)
<#      }else{#>
if (<#=parameter.VariableName#> === null)
    throw new Error("The parameter '<#=parameter.VariableName#>' cannot be null.");
else if (<#=parameter.VariableName#> !== undefined)
<#      }
    }
    if(parameter.IsDateArray){#>
    <#=parameter.VariableName#> && <#=parameter.VariableName#>.forEach(item_ => { url_ += "<#=parameter.Name#>=" + encodeURIComponent(item_ ? "" + item_.toJSON() : "null") + "&"; });
<#  }else if(parameter.IsObjectArray){#>
    <#=parameter.VariableName#> && <#=parameter.VariableName#>.forEach((item, index) => { 
        for (let attr in item)
            url_ += "<#=parameter.Name#>[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
    });
<#  }else if(parameter.IsDate){#>
    url_ += "<#=parameter.Name#>=" + encodeURIComponent(<#=parameter.VariableName#> ? "" + <#=parameter.VariableName#>.toJSON() : "null") + "&"; 
<#  }else if(parameter.IsArray){#>
    <#=parameter.VariableName#> && <#=parameter.VariableName#>.forEach(item => { url_ += "<#=parameter.Name#>=" + encodeURIComponent("" + item) + "&"; });
<#  }else{#>
    url_ += "<#=parameter.Name#>=" + encodeURIComponent("" + <#=parameter.VariableName#>) + "&"; 
<#  }
}#>
url_ = url_.replace(/[?&]$/, "");