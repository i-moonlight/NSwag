// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace NSwag.CodeGeneration.TypeScript.Templates
{
    using NJsonSchema;
    using CodeGeneration.TypeScript;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    internal partial class AngularJSClientTemplate : AngularJSClientTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            
            #line 5 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(Model.HasOperations){
            
            #line default
            #line hidden
            
            #line 6 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(Model.GenerateClientInterfaces){
            
            #line default
            #line hidden
            this.Write("export interface I");
            
            #line 7 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Class));
            
            #line default
            #line hidden
            this.Write(" {\r\n");
            
            #line 8 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
foreach(var operation in Model.Operations){
            
            #line default
            #line hidden
            
            #line 9 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(operation.HasDocumentation){
            
            #line default
            #line hidden
            this.Write("    /**\r\n");
            
            #line 10 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(operation.HasSummary){
            
            #line default
            #line hidden
            this.Write("     * ");
            
            #line 10 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.Summary));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 11 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 11 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
foreach(var parameter in operation.Parameters){
            
            #line default
            #line hidden
            
            #line 12 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(parameter.HasDescription){
            
            #line default
            #line hidden
            this.Write("     * @");
            
            #line 12 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 12 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Description ?? ""));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 13 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 13 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 13 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(operation.HasResultDescription){
            
            #line default
            #line hidden
            this.Write("     * @return ");
            
            #line 13 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.ResultDescription));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 14 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 14 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(operation.IsDeprecated){
            
            #line default
            #line hidden
            this.Write("     * @deprecated\r\n");
            
            #line 15 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("     */\r\n");
            
            #line 16 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 16 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.OperationNameLower));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 16 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
foreach(var parameter in operation.Parameters){
            
            #line default
            #line hidden
            
            #line 16 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableName));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 16 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Type));
            
            #line default
            #line hidden
            
            #line 16 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(!parameter.IsLast){
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 16 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 16 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("): ng.IPromise<");
            
            #line 16 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.ResultType));
            
            #line default
            #line hidden
            this.Write(">;\r\n");
            
            #line 17 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("}\r\n");
            
            #line 18 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\nexport class ");
            
            #line 20 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Class));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 20 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(Model.HasClientBaseClass){
            
            #line default
            #line hidden
            this.Write("extends ");
            
            #line 20 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.ClientBaseClass));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 20 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 20 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(Model.GenerateClientInterfaces){
            
            #line default
            #line hidden
            this.Write("implements I");
            
            #line 20 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Class));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 20 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("{\r\n    private baseUrl: string = undefined; \r\n    private http: ng.IHttpService =" +
                    " null; \r\n    protected jsonParseReviver: ");
            
            #line 23 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(Model.SupportsStrictNullChecks){
            
            #line default
            #line hidden
            this.Write("((key: string, value: any) => any) | undefined");
            
            #line 23 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}else{
            
            #line default
            #line hidden
            this.Write("(key: string, value: any) => any");
            
            #line 23 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write(" = undefined;\r\n\r\n    constructor($http: ng.IHttpService, baseUrl?: string) {\r\n");
            
            #line 26 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(Model.HasClientBaseClass){
            
            #line default
            #line hidden
            this.Write("        super();\r\n");
            
            #line 28 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("        this.http = $http; \r\n        this.baseUrl = baseUrl !== undefined ? baseU" +
                    "rl : \"");
            
            #line 30 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.BaseUrl));
            
            #line default
            #line hidden
            this.Write("\"; \r\n    }\r\n");
            
            #line 32 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(Model.HasExtensionClass && !Model.HasClientBaseClass){
            
            #line default
            #line hidden
            
            #line 33 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
  if(Model.UseTransformOptionsMethod){
            
            #line default
            #line hidden
            this.Write("\r\n    protected transformOptions(options: any) {\r\n        throw new Error(\"transf" +
                    "ormOptions is not implemented.\");\r\n    }\r\n");
            
            #line 38 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
  }
            
            #line default
            #line hidden
            
            #line 39 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
  if(Model.UseTransformResultMethod){
            
            #line default
            #line hidden
            this.Write("\r\n    protected transformResult(url: string, response: any, processor: (response:" +
                    " any) => any) {\r\n        return processor(response);\r\n    }\r\n");
            
            #line 44 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
  }
            
            #line default
            #line hidden
            
            #line 45 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 46 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
foreach(var operation in Model.Operations){
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 48 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(operation.HasDocumentation){
            
            #line default
            #line hidden
            this.Write("    /**\r\n");
            
            #line 49 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(operation.HasSummary){
            
            #line default
            #line hidden
            this.Write("     * ");
            
            #line 49 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.Summary));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 50 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 50 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
foreach(var parameter in operation.Parameters){
            
            #line default
            #line hidden
            
            #line 51 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(parameter.HasDescription){
            
            #line default
            #line hidden
            this.Write("     * @");
            
            #line 51 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 51 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Description ?? ""));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 52 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 52 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 52 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(operation.HasResultDescription){
            
            #line default
            #line hidden
            this.Write("     * @return ");
            
            #line 52 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.ResultDescription));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 53 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 53 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(operation.IsDeprecated){
            
            #line default
            #line hidden
            this.Write("     * @deprecated\r\n");
            
            #line 54 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("     */\r\n");
            
            #line 55 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 55 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.OperationNameLower));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 55 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
foreach(var parameter in operation.Parameters){
            
            #line default
            #line hidden
            
            #line 55 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableName));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 55 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Type));
            
            #line default
            #line hidden
            
            #line 55 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(!parameter.IsLast){
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 55 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 55 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("): ng.IPromise<");
            
            #line 55 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.ResultType));
            
            #line default
            #line hidden
            this.Write("> {\r\n        ");
            
            #line 56 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeScriptTemplatePartGenerator.RenderRequestUrlCode(operation, 2)));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n        ");
            
            #line 58 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeScriptTemplatePartGenerator.RenderRequestBodyCode(operation, 2)));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n        var options_ = <ng.IRequestConfig>{\r\n            url: url_,\r\n        " +
                    "    method: \"");
            
            #line 62 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.HttpMethodUpper.ToUpperInvariant()));
            
            #line default
            #line hidden
            this.Write("\",\r\n            data: content_,\r\n            transformResponse: [], \r\n           " +
                    " headers: {\r\n");
            
            #line 66 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
foreach(var parameter in operation.HeaderParameters){
            
            #line default
            #line hidden
            this.Write("                \"");
            
            #line 67 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("\": ");
            
            #line 67 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableName));
            
            #line default
            #line hidden
            this.Write(", \r\n");
            
            #line 68 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 69 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(operation.HasFormParameters){
            
            #line default
            #line hidden
            this.Write("                \'Content-Type\': undefined, \r\n");
            
            #line 70 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}else{
            
            #line default
            #line hidden
            this.Write("                \"Content-Type\": \"");
            
            #line 71 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.Consumes));
            
            #line default
            #line hidden
            this.Write("; charset=UTF-8\", \r\n");
            
            #line 72 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("                \"Accept\": \"");
            
            #line 73 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.Produces));
            
            #line default
            #line hidden
            this.Write("; charset=UTF-8\"\r\n            }\r\n        };\r\n\r\n");
            
            #line 77 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(Model.UseTransformOptionsMethod){
            
            #line default
            #line hidden
            this.Write("        return this.transformOptions(options_).then(transformedOptions_ => {\r\n   " +
                    "         return this.http(transformedOptions_);\r\n        }).then((response) => {" +
                    "\r\n");
            
            #line 81 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}else{
            
            #line default
            #line hidden
            this.Write("        return this.http(options_).then((response) => {\r\n");
            
            #line 83 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 84 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(Model.UseTransformResultMethod){
            
            #line default
            #line hidden
            this.Write("            return this.transformResult(url_, response, (response) => this.proces" +
                    "s");
            
            #line 85 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.OperationNameUpper));
            
            #line default
            #line hidden
            this.Write("(response));\r\n");
            
            #line 86 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}else{
            
            #line default
            #line hidden
            this.Write("            return this.process");
            
            #line 87 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.OperationNameUpper));
            
            #line default
            #line hidden
            this.Write("(response);\r\n");
            
            #line 88 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("        }, (response) => {\r\n            if (response.status)\r\n");
            
            #line 91 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
if(Model.UseTransformResultMethod){
            
            #line default
            #line hidden
            this.Write("                return this.transformResult(url_, response, (response) => this.pr" +
                    "ocess");
            
            #line 92 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.OperationNameUpper));
            
            #line default
            #line hidden
            this.Write("(response));\r\n");
            
            #line 93 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}else{
            
            #line default
            #line hidden
            this.Write("                return this.process");
            
            #line 94 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.OperationNameUpper));
            
            #line default
            #line hidden
            this.Write("(response);\r\n");
            
            #line 95 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("            throw response;\r\n        });\r\n    }\r\n\r\n    protected process");
            
            #line 100 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.OperationNameUpper));
            
            #line default
            #line hidden
            this.Write("(response: any): ");
            
            #line 100 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.ResultType));
            
            #line default
            #line hidden
            this.Write(" {\r\n        const responseText = response.data;\r\n        const status = response." +
                    "status; \r\n\r\n        ");
            
            #line 104 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeScriptTemplatePartGenerator.RenderProcessResponseCode(operation, 2)));
            
            #line default
            #line hidden
            this.Write("\r\n    }\r\n");
            
            #line 106 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n    ");
            
            #line 108 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeScriptTemplatePartGenerator.RenderClientMethodsCode(Model, 1)));
            
            #line default
            #line hidden
            this.Write("\r\n}\r\n");
            
            #line 110 "C:\Data\NSwag\src\NSwag.CodeGeneration.TypeScript\Templates\AngularJSClientTemplate.tt"
}
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    internal class AngularJSClientTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
