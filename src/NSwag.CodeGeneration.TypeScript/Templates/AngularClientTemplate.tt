<#@ template visibility="internal" #>
<#@ import namespace="NJsonSchema" #>
<#@ import namespace="CodeGeneration.TypeScript" #>

<#if(Model.HasOperations){#>
<#if(Model.GenerateClientInterfaces){#>
export interface I<#=Model.Class#> {
<#foreach(var operation in Model.Operations){#>
<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescription){#>     * @<#=parameter.VariableName#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>    <#=operation.MethodAccessModifier#><#=operation.ActualOperationName#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#><#if(Model.GenerateOptionalParameters && parameter.IsOptional){#>?<#}#>: <#=parameter.Type#><#=parameter.TypePostfix#><#if(!parameter.IsLast){#>, <#}#><#}#>): Observable<<#=operation.ResultType#>>;
<#}#>}
<#}#>

@Injectable()
export class <#=Model.Class#> <#if(Model.HasBaseClass){#>extends <#=Model.BaseClass#> <#}#><#if(Model.GenerateClientInterfaces){#>implements I<#=Model.Class#> <#}#>{
    private http: <#=Model.AngularHttpClass#>;
    private baseUrl: string;
    protected jsonParseReviver: <#if(Model.SupportsStrictNullChecks){#>((key: string, value: any) => any) | undefined<#}else{#>(key: string, value: any) => any<#}#> = undefined;

<#if(!Model.HasExtendedConstructor){#>
    constructor(<#if(Model.HasConfigurationClass){#>@Inject(<#=Model.ConfigurationClass#>) configuration: <#=Model.ConfigurationClass#>, <#}#>@Inject(<#=Model.AngularHttpClass#>) http: <#=Model.AngularHttpClass#>, @Optional() @Inject(<#=Model.BaseUrlTokenName#>) baseUrl?: string) {
<#if(Model.HasBaseClass){#>
        super(<#if(Model.HasConfigurationClass){#>configuration<#}#>);
<#}#>
        this.http = http;
<#if(Model.UseGetBaseUrlMethod){#>
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("<#=Model.BaseUrl#>");
<#}else{#>
        this.baseUrl = baseUrl ? baseUrl : "<#=Model.BaseUrl#>";
<#}#>
    }
<#}#>
<#if(Model.HasExtensionCode){#>
    <#=Model.ExtensionCode#>
    
<#}#>
<#foreach(var operation in Model.Operations){#>

<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescription){#>     * @<#=parameter.VariableName#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>
    <#=operation.MethodAccessModifier#><#=operation.ActualOperationName#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#><#if(Model.GenerateOptionalParameters && parameter.IsOptional){#>?<#}#>: <#=parameter.Type#><#=parameter.TypePostfix#><#if(!parameter.IsLast){#>, <#}#><#}#>): Observable<<#=operation.ResultType#>> {
        <#=TypeScriptTemplatePartGenerator.RenderRequestUrlCode(operation, 2)#>

<#if(operation.HasBody){#>
        <#=TypeScriptTemplatePartGenerator.RenderRequestBodyCode(operation, 2)#>

<#}#>
        let options_ : any = {
<#if(operation.HasBody){#>
            body: content_,
<#}#>
<#if(Model.UseAngularHttpClient){#>
            observe: "response",
            responseType: "blob",
<#}else{#>
            method: "<#=operation.HttpMethodLower#>",
<#}#>
<#if(operation.IsFile && !Model.UseAngularHttpClient){#>
            responseType: ResponseContentType.Blob,
<#}#>
            headers: new <#if(Model.UseAngularHttpClient){#>HttpHeaders<#}else{#>Headers<#}#>({
<#foreach(var parameter in operation.HeaderParameters){#>
                "<#=parameter.Name#>": <#=parameter.VariableName#> !== undefined && <#=parameter.VariableName#> !== null ? "" + <#=parameter.VariableName#> : "", 
<#}#>
<#if(!operation.HasFormParameters){#>
                "Content-Type": "<#=operation.Consumes#>", 
<#}#>
<#if(operation.HasResultType && !operation.HasAcceptHeaderParameterParameter){#>
                "Accept": "<#=operation.Produces#>"
<#}#>
            })
        };

<#if(Model.UseTransformOptionsMethod){#>
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(<#if(Model.UseAngularHttpClient){#>"<#=operation.HttpMethodLower#>", <#}#>url_, transformedOptions_);
        }).flatMap((response_: any) => {
<#}else{#>
        return this.http.request(<#if(Model.UseAngularHttpClient){#>"<#=operation.HttpMethodLower#>", <#}#>url_, options_).flatMap((response_ : any) => {
<#}#>
<#if(Model.UseTransformResultMethod){#>
            return this.transformResult(url_, response_, (r) => this.process<#=operation.ActualOperationNameUpper#>(r));
<#}else{#>
            return this.process<#=operation.ActualOperationNameUpper#>(response_);
<#}#>
        }).catch((response_: any) => {
            if (response_ instanceof <#if(Model.UseAngularHttpClient){#>HttpResponse<#}else{#>Response<#}#>) {
                try {
<#if(Model.UseTransformResultMethod){#>
                    return this.transformResult(url_, response_, (r) => this.process<#=operation.ActualOperationNameUpper#>(r));
<#}else{#>
                    return this.process<#=operation.ActualOperationNameUpper#>(response_);
<#}#>
                } catch (e) {
                    return <Observable<<#=operation.ResultType#>>><any>Observable.throw(e);
                }
            } else
                return <Observable<<#=operation.ResultType#>>><any>Observable.throw(response_);
        });
    }

    protected process<#=operation.ActualOperationNameUpper#>(response: <#if(Model.UseAngularHttpClient){#>HttpResponse<Blob><#}else{#>Response<#}#>): Observable<<#=operation.ResultType#>> {
        const status = response.status; 

        <#=TypeScriptTemplatePartGenerator.RenderProcessResponseCode(operation, 2)#>
    }
<#}#>
}
<#}#>