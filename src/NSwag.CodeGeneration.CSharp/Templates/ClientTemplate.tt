<#@ template visibility="internal" #>
<#@ import namespace="NJsonSchema" #>
<#@ import namespace="System.Linq" #>

<#if(Model.HasOperations){#>
<#if(Model.GenerateContracts && Model.GenerateClientInterfaces){#>
[System.CodeDom.Compiler.GeneratedCode("NSwag", "<#=SwaggerDocument.ToolchainVersion#>")]
public partial interface I<#=Model.Class#>
{
<#foreach(var operation in Model.Operations.Where(o => o.IsInterfaceMethod)){#>
<#  if(!Model.GenerateOptionalParameters){#>
<#      if(operation.HasSummary){#>
    /// <summary><#=ConversionUtilities.ConvertCSharpDocBreaks(operation.Summary, 1)#></summary>
<#      }foreach (var parameter in operation.Parameters){#>
<#          if(parameter.HasDescription){#>
    /// <param name="<#=parameter.VariableName#>"><#=ConversionUtilities.ConvertCSharpDocBreaks(parameter.Description, 1)#></param>
<#      }}if(operation.HasResultDescription){#>
    /// <returns><#=ConversionUtilities.ConvertCSharpDocBreaks(operation.ResultDescription, 1)#></returns>
<#      }#>
    /// <exception cref="<#=Model.ExceptionClass#>">A server side error occurred.</exception>
<#      foreach(var exception in operation.ExceptionDescriptions){#>
    /// <exception cref="<#=exception.Type#>"><#=exception.Description#></exception>
<#      }#>
<#      if(operation.IsDeprecated){#>
    [System.Obsolete]
<#      }#>
    <#=operation.ResultType#> <#=operation.ActualOperationName#>Async(<#foreach(var parameter in operation.Parameters){#><#=parameter.Type#> <#=parameter.VariableName#><#if(Model.GenerateOptionalParameters && parameter.IsOptional){#> = null<#}#><#if(!parameter.IsLast){#>, <#}}#>);

<#  }#>
<#  if(Model.GenerateSyncMethods){#>
<#      if(operation.HasSummary){#>
    /// <summary><#=ConversionUtilities.ConvertCSharpDocBreaks(operation.Summary, 1)#></summary>
<#      }foreach (var parameter in operation.Parameters){#>
<#          if(parameter.HasDescription){#>
    /// <param name="<#=parameter.VariableName#>"><#=ConversionUtilities.ConvertCSharpDocBreaks(parameter.Description, 1)#></param>
<#      }}if(operation.HasResultDescription){#>
    /// <returns><#=ConversionUtilities.ConvertCSharpDocBreaks(operation.ResultDescription, 1)#></returns>
<#      }#>
    /// <exception cref="<#=Model.ExceptionClass#>">A server side error occurred.</exception>
<#      foreach(var exception in operation.ExceptionDescriptions){#>
    /// <exception cref="<#=exception.Type#>"><#=exception.Description#></exception>
<#      }#>
<#      if(operation.IsDeprecated){#>
    [System.Obsolete]
<#      }#>
    <#=operation.UnwrappedResultType#> <#=operation.ActualOperationName#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.Type#> <#=parameter.VariableName#><#if(Model.GenerateOptionalParameters && parameter.IsOptional){#> = null<#}#><#if(!parameter.IsLast){#>, <#}}#>);

<#  }#>
<#  if(operation.HasSummary){#>
    /// <summary><#=ConversionUtilities.ConvertCSharpDocBreaks(operation.Summary, 1)#></summary>
<#  }foreach (var parameter in operation.Parameters){#>
<#      if(parameter.HasDescription){#>
    /// <param name="<#=parameter.VariableName#>"><#=ConversionUtilities.ConvertCSharpDocBreaks(parameter.Description, 1)#></param>
<#  }}#>    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
<#  if(operation.HasResultDescription){#>
    /// <returns><#=ConversionUtilities.ConvertCSharpDocBreaks(operation.ResultDescription, 1)#></returns>
<#  }#>
    /// <exception cref="<#=Model.ExceptionClass#>">A server side error occurred.</exception>
<#      foreach(var exception in operation.ExceptionDescriptions){#>
    /// <exception cref="<#=exception.Type#>"><#=exception.Description#></exception>
<#      }#>
<#      if(operation.IsDeprecated){#>
    [System.Obsolete]
<#      }#>
    <#=operation.ResultType#> <#=operation.ActualOperationName#>Async(<#foreach(var parameter in operation.Parameters){#><#=parameter.Type#> <#=parameter.VariableName#><#if(Model.GenerateOptionalParameters && parameter.IsOptional){#> = null<#}#>, <#}#>System.Threading.CancellationToken cancellationToken<#if(Model.GenerateOptionalParameters){#> = default(System.Threading.CancellationToken)<#}#>);

<#}#>
}
<#}#>

<#if(Model.GenerateImplementation){#>
[System.CodeDom.Compiler.GeneratedCode("NSwag", "<#=SwaggerDocument.ToolchainVersion#>")]
<#=Model.ClientClassAccessModifier#> partial class <#=Model.Class#> <#if(Model.HasBaseType){#>: <#}#><#if(Model.HasBaseClass){#><#=Model.BaseClass#><#if(Model.GenerateClientInterfaces){#>, <#}#><#}#><#if(Model.GenerateClientInterfaces){#>I<#=Model.Class#><#}#>

{
<#if(Model.UseBaseUrl){#>
    private string _baseUrl = "<#=Model.BaseUrl#>";
    
<#}#>
<#if(Model.InjectHttpClient){#>
    private <#=Model.HttpClientType#> _httpClient; 

<#}#>
<#if(Model.HasConfigurationClass){#>
    public <#=Model.Class#>(<#=Model.ConfigurationClass#> configuration<#if(Model.InjectHttpClient){#>, <#=Model.HttpClientType#> httpClient<#}#>) : base(configuration)
    {
<#if(Model.InjectHttpClient){#>
        _httpClient = httpClient; 
<#}#>
    }

<#}else if(Model.UseBaseUrl && string.IsNullOrEmpty(Model.BaseUrl)){#>
    public <#=Model.Class#>(string baseUrl<#if(Model.InjectHttpClient){#>, <#=Model.HttpClientType#> httpClient<#}#>)
    {
<#if(Model.InjectHttpClient){#>
        _httpClient = httpClient; 
<#}#>
        BaseUrl = baseUrl; 
    }

<#}else if(Model.InjectHttpClient){#>
    public <#=Model.Class#>(<#=Model.HttpClientType#> httpClient)
    {
        _httpClient = httpClient; 
    }

<#}#>
<#if(Model.UseBaseUrl){#>
    public string BaseUrl 
    {
        get { return _baseUrl; }
        set { _baseUrl = value; }
    }

<#}#>
    partial void PrepareRequest(<#=Model.HttpClientType#> request, string url);
    partial void PrepareRequest(<#=Model.HttpClientType#> request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(<#=Model.HttpClientType#> request, System.Net.Http.HttpResponseMessage response);

<#foreach(var operation in Model.Operations){#>
<#  if(!Model.GenerateOptionalParameters){#>
<#      if(operation.HasSummary){#>
    /// <summary><#=ConversionUtilities.ConvertCSharpDocBreaks(operation.Summary, 1)#></summary>
<#      }foreach (var parameter in operation.Parameters){#>
<#          if(parameter.HasDescription){#>
    /// <param name="<#=parameter.VariableName#>"><#=ConversionUtilities.ConvertCSharpDocBreaks(parameter.Description, 1)#></param>
<#      }}if(operation.HasResultDescription){#>
    /// <returns><#=ConversionUtilities.ConvertCSharpDocBreaks(operation.ResultDescription, 1)#></returns>
<#      }#>
    /// <exception cref="<#=Model.ExceptionClass#>">A server side error occurred.</exception>
<#  foreach(var exception in operation.ExceptionDescriptions){#>
    /// <exception cref="<#=exception.Type#>"><#=exception.Description#></exception>
<#      }#>
<#  if(operation.IsDeprecated){#>
    [System.Obsolete]
<#  }#>
    <#=operation.MethodAccessModifier#> <#=operation.ResultType#> <#=operation.ActualOperationName#>Async(<#foreach(var parameter in operation.Parameters){#><#=parameter.Type#> <#=parameter.VariableName#><#if(Model.GenerateOptionalParameters && parameter.IsOptional){#> = null<#}#><#if(!parameter.IsLast){#>, <#}}#>)
    {
        return <#=operation.ActualOperationName#>Async(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#>, <#}#>System.Threading.CancellationToken.None);
    }

<#  }#>
<#  if(Model.GenerateSyncMethods){#>
<#      if(operation.HasSummary){#>
    /// <summary><#=ConversionUtilities.ConvertCSharpDocBreaks(operation.Summary, 1)#></summary>
<#      }foreach (var parameter in operation.Parameters){#>
<#          if(parameter.HasDescription){#>
    /// <param name="<#=parameter.VariableName#>"><#=ConversionUtilities.ConvertCSharpDocBreaks(parameter.Description, 1)#></param>
<#      }}if(operation.HasResultDescription){#>
    /// <returns><#=ConversionUtilities.ConvertCSharpDocBreaks(operation.ResultDescription, 1)#></returns>
<#      }#>
    /// <exception cref="<#=Model.ExceptionClass#>">A server side error occurred.</exception>
<#  foreach(var exception in operation.ExceptionDescriptions){#>
    /// <exception cref="<#=exception.Type#>"><#=exception.Description#></exception>
<#      }#>
<#  if(operation.IsDeprecated){#>
    [System.Obsolete]
<#  }#>
    <#=operation.MethodAccessModifier#> <#=operation.UnwrappedResultType#> <#=operation.ActualOperationName#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.Type#> <#=parameter.VariableName#><#if(Model.GenerateOptionalParameters && parameter.IsOptional){#> = null<#}#><#if(!parameter.IsLast){#>, <#}}#>)
    {
        <#if(operation.HasResult){#>return <#}#>System.Threading.Tasks.Task.Run(async () => await <#=operation.ActualOperationName#>Async(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#>, <#}#>System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

<#  }#>
<#  if(operation.HasSummary){#>
    /// <summary><#=ConversionUtilities.ConvertCSharpDocBreaks(operation.Summary, 1)#></summary>
<#  }foreach (var parameter in operation.Parameters){#>
<#      if(parameter.HasDescription){#>
    /// <param name="<#=parameter.VariableName#>"><#=ConversionUtilities.ConvertCSharpDocBreaks(parameter.Description, 1)#></param>
<#  }}#>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
<#  if(operation.HasResultDescription){#>
    /// <returns><#=ConversionUtilities.ConvertCSharpDocBreaks(operation.ResultDescription, 1)#></returns>
<#  }#>
    /// <exception cref="<#=Model.ExceptionClass#>">A server side error occurred.</exception>
<#  foreach(var exception in operation.ExceptionDescriptions){#>
    /// <exception cref="<#=exception.Type#>"><#=exception.Description#></exception>
<#      }#>
<#  if(operation.IsDeprecated){#>
    [System.Obsolete]
<#  }#>
    <#=operation.MethodAccessModifier#> async <#=operation.ResultType#> <#=operation.ActualOperationName#>Async(<#foreach(var parameter in operation.Parameters){#><#=parameter.Type#> <#=parameter.VariableName#><#if(Model.GenerateOptionalParameters && parameter.IsOptional){#> = null<#}#>, <#}#>System.Threading.CancellationToken cancellationToken<#if(Model.GenerateOptionalParameters){#> = default(System.Threading.CancellationToken)<#}#>)
    {
<#foreach(var parameter in operation.PathParameters){#>
        if (<#=parameter.VariableName#> == null)
            throw new System.ArgumentNullException("<#=parameter.VariableName#>");

<#}#>
<#foreach(var parameter in operation.QueryParameters){#>
<#  if(!parameter.IsNullable){#>
        if (<#=parameter.VariableName#> == null)
            throw new System.ArgumentNullException("<#=parameter.VariableName#>");

<#  }#>
<#}#>
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(<#if(Model.UseBaseUrl){#>BaseUrl).Append("/<#}else{#>"<#}#><#=operation.Path#><#if(operation.HasQueryParameters){#>?<#}#>");
<#foreach(var parameter in operation.PathParameters){#>
<#  if(parameter.IsDateArray){#>
        urlBuilder_.Replace("{<#=parameter.Name#>}", System.Uri.EscapeDataString(string.Join(",", <#=parameter.VariableName#>.Select(s_ => s_.ToString("s", System.Globalization.CultureInfo.InvariantCulture)))));
<#  }else if(parameter.IsDate){#>
        urlBuilder_.Replace("{<#=parameter.Name#>}", System.Uri.EscapeDataString(<#=parameter.VariableName#>.ToString("s", System.Globalization.CultureInfo.InvariantCulture)));
<#  }else if(parameter.IsArray){#>
        urlBuilder_.Replace("{<#=parameter.Name#>}", System.Uri.EscapeDataString(string.Join(",", <#=parameter.VariableName#>.Select(s_ => s_.ToString()))));
<#  }else{#>
        urlBuilder_.Replace("{<#=parameter.Name#>}", System.Uri.EscapeDataString(<#=parameter.VariableName#>.ToString()));
<#  }#>
<#}#>
<#foreach(var parameter in operation.QueryParameters){#>
        <#  if(parameter.IsNullable){#>if (<#=parameter.VariableName#> != null) <#}#>
<#  if(parameter.IsDateArray){#>
foreach (var item_ in <#=parameter.VariableName#>) { urlBuilder_.Append("<#=parameter.Name#>=").Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
<#  }else if(parameter.IsDate){#>
urlBuilder_.Append("<#=parameter.Name#>=").Append(System.Uri.EscapeDataString(<#=parameter.VariableName#><#if(parameter.Type.EndsWith("?")){#>.Value<#}#>.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
<#  }else if(parameter.IsArray){#>
foreach (var item_ in <#=parameter.VariableName#>) { urlBuilder_.Append("<#=parameter.Name#>=").Append(System.Uri.EscapeDataString(item_.ToString())).Append("&"); }
<#  }else{#>
urlBuilder_.Append("<#=parameter.Name#>=").Append(System.Uri.EscapeDataString(<#=parameter.VariableName#><#if(parameter.Type.EndsWith("?")){#>.Value<#}#>.ToString())).Append("&");
<#  }#>
<#}#>
<#if(operation.HasQueryParameters){#>
        urlBuilder_.Length--;
<#}#>

<#      if(Model.InjectHttpClient){#>
        var client_ = _httpClient;
<#      }else if(Model.UseHttpClientCreationMethod){#>
        var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
<#      }else{#>
        var client_ = new <#=Model.HttpClientType#>();
<#      }#>
        try
        {
<#      if(Model.UseHttpRequestMessageCreationMethod){#>
            using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
<#      }else{#>
            using (var request_ = new System.Net.Http.HttpRequestMessage())
<#      }#>
            {
                PrepareRequest(client_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                PrepareRequest(client_, url_);

<#foreach(var parameter in operation.HeaderParameters){#>
                request_.Headers.TryAddWithoutValidation("<#=parameter.Name#>", <#=parameter.VariableName#> != null ? <#=parameter.VariableName#>.ToString() : null);
<#}#>
<#if(operation.HasContent){#>
                var content_ = new System.Net.Http.StringContent(<#if(operation.HasXmlBodyParameter){#><#=operation.ContentParameter.VariableName#><#}else{#>Newtonsoft.Json.JsonConvert.SerializeObject(<#=operation.ContentParameter.VariableName#><#=Model.JsonSerializerParameterCode#>)<#}#>);
                content_.Headers.ContentType.MediaType = "<#=operation.Consumes#>";
<#}else{#>
<#  if(operation.HasFormParameters){#>
                var content_ = new System.Net.Http.MultipartFormDataContent();
<#    foreach(var parameter in operation.FormParameters){#>
<#      if(parameter.IsNullable){#>
                if (<#=parameter.VariableName#> != null)
<#      }else{#>
                if (<#=parameter.VariableName#> == null)
                    throw new System.ArgumentNullException("<#=parameter.VariableName#>");
                else
<#      }#>
<#      if(parameter.IsFile){
          if(parameter.IsArray){#>
                    foreach (var item_ in <#=parameter.VariableName#>) { content_.Add(new System.Net.Http.StreamContent(item_.Data), "<#=parameter.Name#>", item_.FileName ?? "<#=parameter.Name#>"); }
<#        }else{#>
                        content_.Add(new System.Net.Http.StreamContent(<#=parameter.VariableName#>.Data), "<#=parameter.Name#>", <#=parameter.VariableName#>.FileName ?? "<#=parameter.Name#>");
<#        }
        }else{#>
                        content_.Add(new System.Net.Http.StringContent(<#=parameter.VariableName#>.ToString()), "<#=parameter.Name#>");
<#      }#>
<#    }#>
<#  }else if(!operation.IsGetOrDelete){#>
                var content_ = new System.Net.Http.StringContent(string.Empty);
<#  }#>
<#}#>
<#  if(!operation.IsGetOrDelete){#>
                request_.Content = content_;
<#  }#>
                request_.Method = new System.Net.Http.HttpMethod("<#=operation.HttpMethod.ToString().ToUpperInvariant()#>");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("<#=operation.Produces#>"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
<#foreach(var response in operation.Responses){#>
                    if (status_ == "<#=response.StatusCode#>"<#if(response.IsFile && response.StatusCode == "200"){#> || status_ == "206"<#}#>) 
                    {
<#if(response.HasType){#>
<#  if(response.IsFile){#>
<#      if(response.IsSuccess(operation)){#>
                        var responseStream_ = await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                        var fileResponse_ = new FileResponse(status_, headers_, responseStream_, <#if(Model.InjectHttpClient){#>null<#}else{#>client_<#}#>, response_); 
                        client_ = null; response_ = null; // response and client are disposed by FileResponse
                        return fileResponse_;
<#      }else{#>
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                        throw new <#=Model.ExceptionClass#>("<#=response.ExceptionDescription#>", status_, responseData_, headers_, null);
<#      }#>
<#  }else{#>
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                        var result_ = default(<#=response.Type#>); 
                        try
                        {
                            result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<<#=response.Type#>>(responseData_<#=Model.JsonSerializerParameterCode#>);
<#      if(response.IsSuccess(operation)){#>
<#          if (Model.WrapResponses){#>
                            return new <#=Model.ResponseClass#><<#=operation.UnwrappedResultType#>>(status_, headers_, result_); 
<#          }else{#>
                            return result_; 
<#          }#>
<#      }#>
                        } 
                        catch (System.Exception exception) 
                        {
                            throw new <#=Model.ExceptionClass#>("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                        }
<#      if(!response.IsSuccess(operation)){#>
<#          if(response.InheritsExceptionSchema){#>
                        if (result_ == null)
                            result_ = new <#=response.Type#>();
                        result_.Data.Add("HttpStatus", status_);
                        result_.Data.Add("HttpHeaders", headers_);
                        result_.Data.Add("HttpResponse", responseData_);
<#                if(Model.WrapDtoExceptions){#>
                        throw new <#=Model.ExceptionClass#><<#=response.Type#>>("<#=response.ExceptionDescription#>", status_, responseData_, headers_, result_, result_);
<#                }else{#>
                        throw result_;
<#                }#>
<#          }else{#>
                        throw new <#=Model.ExceptionClass#><<#=response.Type#>>("<#=response.ExceptionDescription#>", status_, responseData_, headers_, result_, null);
<#          }#>
<#      }#>
<#  }#>
<#}else{#>
<#  if(response.IsSuccess(operation)){#>
<#      if(operation.HasResultType){#>
<#          if (Model.WrapResponses){#>
                        return new <#=Model.ResponseClass#><<#=operation.UnwrappedResultType#>>(status_, headers_, default(<#=operation.UnwrappedResultType#>)); 
<#          }else{#>
                        return default(<#=operation.UnwrappedResultType#>);
<#          }#>
<#      }else{#>
<#          if (Model.WrapResponses){#>
                        return new <#=Model.ResponseClass#>(status_, headers_); 
<#          }else{#>
                        return;
<#          }#>
<#      }#>
<#  }else{#>
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                        throw new <#=Model.ExceptionClass#>("<#=response.ExceptionDescription#>", status_, responseData_, headers_, null);
<#  }#>
<#}#>
                    }
                    else
<#      }#>
<#if(operation.HasDefaultResponse){#>
<#  if(operation.DefaultResponse.HasType){#>
                    {
<#      if(operation.DefaultResponse.IsFile){#>
<#          if(operation.DefaultResponse.IsSuccess(operation)){#>
                        var responseStream_ = await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                        var fileResponse_ = new FileResponse(status_, headers_, responseStream_, <#if(Model.InjectHttpClient){#>null<#}else{#>client_<#}#>, response_); 
                        client_ = null; response_ = null; // response and client are disposed by FileResponse
                        return fileResponse_;
<#          }else{#>
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                        throw new <#=Model.ExceptionClass#>("<#=operation.DefaultResponse.ExceptionDescription#>", status_, responseData_, headers_, null);
<#          }#>
<#      }else{#>
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                        var result_ = default(<#=operation.DefaultResponse.Type#>); 
                        try
                        {
                            result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<<#=operation.DefaultResponse.Type#>>(responseData_<#=Model.JsonSerializerParameterCode#>);

<#          if(operation.HasOnlyDefaultResponse){#>
                            if (status_.Length == 3 && status_.StartsWith("2"))
<#              if (Model.WrapResponses){#>
                                return new <#=Model.ResponseClass#><<#=operation.UnwrappedResultType#>>(status_, headers_, result_); 
<#              }else{#>
                                return result_; 
<#              }#>
<#          }#>
                        } 
                        catch (System.Exception exception_) 
                        {
                            throw new <#=Model.ExceptionClass#>("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                        }

<#          if(operation.DefaultResponse.InheritsExceptionSchema){#>
                        if (result_ == null)
                            result_ = new <#=operation.DefaultResponse.Type#>();
                        result_.Data.Add("HttpStatus", status_);
                        result_.Data.Add("HttpHeaders", headers_);
                        result_.Data.Add("HttpResponse", responseData_);
<#                if(Model.WrapDtoExceptions){#>
                        throw new <#=Model.ExceptionClass#><<#=operation.DefaultResponse.Type#>>("<#=operation.DefaultResponse.ExceptionDescription#>", status_, responseData_, headers_, result_, null);
<#                }else{#>
                        throw result_;
<#                }#>
<#          }else{#>
                        throw new <#=Model.ExceptionClass#><<#=operation.DefaultResponse.Type#>>("<#=operation.DefaultResponse.ExceptionDescription#>", status_, responseData_, headers_, result_, null);
<#          }#>
<#      }#>
                    }
<#  }else{#>
<#      if(operation.HasSuccessResponse){#>
                    var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                    throw new <#=Model.ExceptionClass#>("<#=operation.DefaultResponse.ExceptionDescription#>", status_, responseData_, headers_, null);
<#      }#>
<#  }#>
<#}else{#>
                    if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                        throw new <#=Model.ExceptionClass#>("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                    }
<#}#>
<#      if(operation.HasResultType){#>
        
<#          if (Model.WrapResponses && operation.UnwrappedResultType != "FileResponse"){#>
                    return new <#=Model.ResponseClass#><<#=operation.UnwrappedResultType#>>(status_, headers_, default(<#=operation.UnwrappedResultType#>)); 
<#          }else{#>
                    return default(<#=operation.UnwrappedResultType#>);
<#          }#>
<#      }else if(Model.WrapResponses){#>

                    return new <#=Model.ResponseClass#>(status_, headers_); 
<#      }#>
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
<#if(!Model.InjectHttpClient){#>
            if (client_ != null)
                client_.Dispose();
<#}#>
        }
    }

<#}#>
}
<#}#>
<#}#>