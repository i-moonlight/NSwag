//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.4.3.0 (NJsonSchema v9.4.10.0) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace MyGitHubTest
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.4.3.0")]
    public partial class GitHubClient 
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        private string _baseUrl = "https://api.github.com";
        
        public GitHubClient()
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Emojis> EmojisAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return EmojisAsync(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Emojis> EmojisAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/emojis");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Emojis); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Emojis>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Emojis);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Events> EventsAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return EventsAsync(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Events> EventsAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/events");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Events); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Events>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Events);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Feeds> FeedsAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return FeedsAsync(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Feeds> FeedsAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/feeds");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Feeds); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Feeds>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Feeds);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="since">Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ.
        /// Only gists updated at or after this time are returned.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous>> GistsAllAsync(string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return GistsAllAsync(since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="since">Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ.
        /// Only gists updated at or after this time are returned.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous>> GistsAllAsync(string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/gists?");
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(System.Convert.ToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Gist> GistsAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, PostGist body)
        {
            return GistsAsync(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Gist> GistsAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, PostGist body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/gists");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Gist); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Gist>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Gist);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="since">Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ.
        /// Only gists updated at or after this time are returned.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous>> PublicAllAsync(string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return PublicAllAsync(since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="since">Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ.
        /// Only gists updated at or after this time are returned.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous>> PublicAllAsync(string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/gists/public?");
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(System.Convert.ToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="since">Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ.
        /// Only gists updated at or after this time are returned.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous>> StarredAllAsync(string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return StarredAllAsync(since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="since">Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ.
        /// Only gists updated at or after this time are returned.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous>> StarredAllAsync(string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/gists/starred?");
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(System.Convert.ToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Gists2Async(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Gists2Async(id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Gists2Async(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/gists/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Gist> Gists3Async(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Gists3Async(id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Gist> Gists3Async(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/gists/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Gist); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Gist>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Gist);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Gist> Gists4Async(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, PatchGist body)
        {
            return Gists4Async(id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Gist> Gists4Async(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, PatchGist body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/gists/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Gist); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Gist>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Gist);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous2>> CommentsAllAsync(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return CommentsAllAsync(id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous2>> CommentsAllAsync(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/gists/{id}/comments");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous2>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous2>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous2>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Comment> CommentsAsync(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, CommentBody body)
        {
            return CommentsAsync(id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Comment> CommentsAsync(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, CommentBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/gists/{id}/comments");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Comment); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Comment>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Comment);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="commentId">Id of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Comments2Async(int id, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Comments2Async(id, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="commentId">Id of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Comments2Async(int id, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (commentId == null)
                throw new System.ArgumentNullException("commentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/gists/{id}/comments/{commentId}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{commentId}", System.Uri.EscapeDataString(System.Convert.ToString(commentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="commentId">Id of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Comment> Comments3Async(int id, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Comments3Async(id, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="commentId">Id of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Comment> Comments3Async(int id, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (commentId == null)
                throw new System.ArgumentNullException("commentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/gists/{id}/comments/{commentId}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{commentId}", System.Uri.EscapeDataString(System.Convert.ToString(commentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Comment); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Comment>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Comment);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="commentId">Id of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Comment> Comments4Async(int id, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, Comment body)
        {
            return Comments4Async(id, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="commentId">Id of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Comment> Comments4Async(int id, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, Comment body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (commentId == null)
                throw new System.ArgumentNullException("commentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/gists/{id}/comments/{commentId}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{commentId}", System.Uri.EscapeDataString(System.Convert.ToString(commentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Comment); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Comment>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Comment);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Exists.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ForksAsync(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return ForksAsync(id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Exists.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ForksAsync(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/gists/{id}/forks");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not exists.", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Item removed.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task StarAsync(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return StarAsync(id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Item removed.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task StarAsync(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/gists/{id}/star");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Exists.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Star2Async(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Star2Async(id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Exists.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Star2Async(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/gists/{id}/star");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not exists.", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Starred.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Star3Async(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Star3Async(id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">Id of gist.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Starred.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Star3Async(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/gists/{id}/star");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<object>> TemplatesAllAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return TemplatesAllAsync(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<object>> TemplatesAllAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/gitignore/templates");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<object>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<object>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<object>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GitignoreLang> TemplatesAsync(string language, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return TemplatesAsync(language, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GitignoreLang> TemplatesAsync(string language, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (language == null)
                throw new System.ArgumentNullException("language");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/gitignore/templates/{language}");
            urlBuilder_.Replace("{language}", System.Uri.EscapeDataString(System.Convert.ToString(language, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(GitignoreLang); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GitignoreLang>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(GitignoreLang);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="filter">Issues assigned to you / created by you / mentioning you / you're
        /// subscribed to updates for / All issues the authenticated user can see</param>
        /// <param name="labels">String list of comma separated Label names. Example - bug,ui,@high.</param>
        /// <param name="since">Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Only issues updated at or after this time are returned.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous3>> IssuesAllAsync(Filter filter, State state, string labels, Sort sort, Direction direction, string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return IssuesAllAsync(filter, state, labels, sort, direction, since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="filter">Issues assigned to you / created by you / mentioning you / you're
        /// subscribed to updates for / All issues the authenticated user can see</param>
        /// <param name="labels">String list of comma separated Label names. Example - bug,ui,@high.</param>
        /// <param name="since">Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Only issues updated at or after this time are returned.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous3>> IssuesAllAsync(Filter filter, State state, string labels, Sort sort, Direction direction, string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (filter == null)
                throw new System.ArgumentNullException("filter");
    
            if (state == null)
                throw new System.ArgumentNullException("state");
    
            if (labels == null)
                throw new System.ArgumentNullException("labels");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            if (direction == null)
                throw new System.ArgumentNullException("direction");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/issues?");
            urlBuilder_.Append("filter=").Append(System.Uri.EscapeDataString(System.Convert.ToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("state=").Append(System.Uri.EscapeDataString(System.Convert.ToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("labels=").Append(System.Uri.EscapeDataString(System.Convert.ToString(labels, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("direction=").Append(System.Uri.EscapeDataString(System.Convert.ToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(System.Convert.ToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous3>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous3>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous3>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="keyword">The search term.</param>
        /// <param name="state">Indicates the state of the issues to return. Can be either open or closed.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchIssuesByKeyword> SearchAsync(string keyword, State2 state, string owner, string repository, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return SearchAsync(keyword, state, owner, repository, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="keyword">The search term.</param>
        /// <param name="state">Indicates the state of the issues to return. Can be either open or closed.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchIssuesByKeyword> SearchAsync(string keyword, State2 state, string owner, string repository, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (keyword == null)
                throw new System.ArgumentNullException("keyword");
    
            if (state == null)
                throw new System.ArgumentNullException("state");
    
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repository == null)
                throw new System.ArgumentNullException("repository");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/legacy/issues/search/{owner}/{repository}/{state}/{keyword}");
            urlBuilder_.Replace("{keyword}", System.Uri.EscapeDataString(System.Convert.ToString(keyword, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{state}", System.Uri.EscapeDataString(System.Convert.ToString(state, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repository}", System.Uri.EscapeDataString(System.Convert.ToString(repository, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SearchIssuesByKeyword); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SearchIssuesByKeyword>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SearchIssuesByKeyword);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="keyword">The search term</param>
        /// <param name="order">The sort field. if sort param is provided. Can be either asc or desc.</param>
        /// <param name="language">Filter results by language</param>
        /// <param name="start_page">The page number to fetch</param>
        /// <param name="sort">The sort field. One of stars, forks, or updated. Default: results are sorted by best match.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchRepositoriesByKeyword> Search2Async(string keyword, Order? order, string language, string start_page, Sort2? sort, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Search2Async(keyword, order, language, start_page, sort, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="keyword">The search term</param>
        /// <param name="order">The sort field. if sort param is provided. Can be either asc or desc.</param>
        /// <param name="language">Filter results by language</param>
        /// <param name="start_page">The page number to fetch</param>
        /// <param name="sort">The sort field. One of stars, forks, or updated. Default: results are sorted by best match.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchRepositoriesByKeyword> Search2Async(string keyword, Order? order, string language, string start_page, Sort2? sort, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (keyword == null)
                throw new System.ArgumentNullException("keyword");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/legacy/repos/search/{keyword}?");
            urlBuilder_.Replace("{keyword}", System.Uri.EscapeDataString(System.Convert.ToString(keyword, System.Globalization.CultureInfo.InvariantCulture)));
            if (order != null) urlBuilder_.Append("order=").Append(System.Uri.EscapeDataString(System.Convert.ToString(order.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (language != null) urlBuilder_.Append("language=").Append(System.Uri.EscapeDataString(System.Convert.ToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (start_page != null) urlBuilder_.Append("start_page=").Append(System.Uri.EscapeDataString(System.Convert.ToString(start_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SearchRepositoriesByKeyword); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SearchRepositoriesByKeyword>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SearchRepositoriesByKeyword);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="email">The email address</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchUserByEmail> EmailAsync(string email, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return EmailAsync(email, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="email">The email address</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchUserByEmail> EmailAsync(string email, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/legacy/user/email/{email}");
            urlBuilder_.Replace("{email}", System.Uri.EscapeDataString(System.Convert.ToString(email, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SearchUserByEmail); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SearchUserByEmail>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SearchUserByEmail);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="keyword">The search term</param>
        /// <param name="order">The sort field. if sort param is provided. Can be either asc or desc.</param>
        /// <param name="start_page">The page number to fetch</param>
        /// <param name="sort">The sort field. One of stars, forks, or updated. Default: results are sorted by best match.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchUsersByKeyword> Search3Async(string keyword, Order2? order, string start_page, Sort3? sort, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Search3Async(keyword, order, start_page, sort, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="keyword">The search term</param>
        /// <param name="order">The sort field. if sort param is provided. Can be either asc or desc.</param>
        /// <param name="start_page">The page number to fetch</param>
        /// <param name="sort">The sort field. One of stars, forks, or updated. Default: results are sorted by best match.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchUsersByKeyword> Search3Async(string keyword, Order2? order, string start_page, Sort3? sort, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (keyword == null)
                throw new System.ArgumentNullException("keyword");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/legacy/user/search/{keyword}?");
            urlBuilder_.Replace("{keyword}", System.Uri.EscapeDataString(System.Convert.ToString(keyword, System.Globalization.CultureInfo.InvariantCulture)));
            if (order != null) urlBuilder_.Append("order=").Append(System.Uri.EscapeDataString(System.Convert.ToString(order.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (start_page != null) urlBuilder_.Append("start_page=").Append(System.Uri.EscapeDataString(System.Convert.ToString(start_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SearchUsersByKeyword); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SearchUsersByKeyword>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SearchUsersByKeyword);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task MarkdownAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, Markdown body)
        {
            return MarkdownAsync(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task MarkdownAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, Markdown body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/markdown");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RawAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return RawAsync(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RawAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/markdown/raw");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Meta> MetaAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return MetaAsync(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Meta> MetaAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/meta");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Meta); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Meta>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Meta);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of the owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Events> Events2Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Events2Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of the owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Events> Events2Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/networks/{owner}/{repo}/events");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Events); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Events>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Events);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="all">True to show notifications marked as read.</param>
        /// <param name="participating">True to show only notifications in which the user is directly participating
        /// or mentioned.</param>
        /// <param name="since">The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Example: "2012-10-09T23:39:01Z".</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Notifications> NotificationsAsync(bool? all, bool? participating, string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return NotificationsAsync(all, participating, since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="all">True to show notifications marked as read.</param>
        /// <param name="participating">True to show only notifications in which the user is directly participating
        /// or mentioned.</param>
        /// <param name="since">The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Example: "2012-10-09T23:39:01Z".</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Notifications> NotificationsAsync(bool? all, bool? participating, string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/notifications?");
            if (all != null) urlBuilder_.Append("all=").Append(System.Uri.EscapeDataString(System.Convert.ToString(all.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (participating != null) urlBuilder_.Append("participating=").Append(System.Uri.EscapeDataString(System.Convert.ToString(participating.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(System.Convert.ToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Notifications); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Notifications>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Notifications);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Marked as read.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Notifications2Async(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, NotificationMarkRead body)
        {
            return Notifications2Async(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Marked as read.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Notifications2Async(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, NotificationMarkRead body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/notifications");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "205") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="id">Id of thread.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Notifications> ThreadsAsync(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return ThreadsAsync(id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">Id of thread.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Notifications> ThreadsAsync(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/notifications/threads/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Notifications); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Notifications>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Notifications);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="id">Id of thread.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Thread marked as read.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Threads2Async(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Threads2Async(id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">Id of thread.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Thread marked as read.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Threads2Async(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/notifications/threads/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "205") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="id">Id of thread.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SubscriptionAsync(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return SubscriptionAsync(id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">Id of thread.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SubscriptionAsync(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/notifications/threads/{id}/subscription");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="id">Id of thread.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Subscription> Subscription2Async(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Subscription2Async(id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">Id of thread.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Subscription> Subscription2Async(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/notifications/threads/{id}/subscription");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Subscription); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Subscription>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Subscription);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="id">Id of thread.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Subscription> Subscription3Async(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, PutSubscription body)
        {
            return Subscription3Async(id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">Id of thread.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Subscription> Subscription3Async(int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, PutSubscription body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/notifications/threads/{id}/subscription");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Subscription); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Subscription>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Subscription);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Organization> OrgsAsync(string org, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return OrgsAsync(org, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Organization> OrgsAsync(string org, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/orgs/{org}");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(System.Convert.ToString(org, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Organization); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Organization>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Organization);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Organization> Orgs2Async(string org, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, PatchOrg body)
        {
            return Orgs2Async(org, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Organization> Orgs2Async(string org, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, PatchOrg body, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/orgs/{org}");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(System.Convert.ToString(org, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Organization); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Organization>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Organization);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Events> Events3Async(string org, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Events3Async(org, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Events> Events3Async(string org, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/orgs/{org}/events");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(System.Convert.ToString(org, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Events); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Events>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Events);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="filter">Issues assigned to you / created by you / mentioning you / you're
        /// subscribed to updates for / All issues the authenticated user can see</param>
        /// <param name="labels">String list of comma separated Label names. Example - bug,ui,@high.</param>
        /// <param name="since">Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Only issues updated at or after this time are returned.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous3>> IssuesAsync(string org, Filter2 filter, State3 state, string labels, Sort4 sort, Direction2 direction, string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return IssuesAsync(org, filter, state, labels, sort, direction, since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="filter">Issues assigned to you / created by you / mentioning you / you're
        /// subscribed to updates for / All issues the authenticated user can see</param>
        /// <param name="labels">String list of comma separated Label names. Example - bug,ui,@high.</param>
        /// <param name="since">Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Only issues updated at or after this time are returned.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous3>> IssuesAsync(string org, Filter2 filter, State3 state, string labels, Sort4 sort, Direction2 direction, string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            if (filter == null)
                throw new System.ArgumentNullException("filter");
    
            if (state == null)
                throw new System.ArgumentNullException("state");
    
            if (labels == null)
                throw new System.ArgumentNullException("labels");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            if (direction == null)
                throw new System.ArgumentNullException("direction");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/orgs/{org}/issues?");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(System.Convert.ToString(org, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("filter=").Append(System.Uri.EscapeDataString(System.Convert.ToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("state=").Append(System.Uri.EscapeDataString(System.Convert.ToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("labels=").Append(System.Uri.EscapeDataString(System.Convert.ToString(labels, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("direction=").Append(System.Uri.EscapeDataString(System.Convert.ToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(System.Convert.ToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous3>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous3>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous3>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> MembersAllAsync(string org, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return MembersAllAsync(org, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> MembersAllAsync(string org, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/orgs/{org}/members");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(System.Convert.ToString(org, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous4>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "302") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Response if requester is not an organization member.", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="username">Name of the user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task MembersAsync(string org, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return MembersAsync(org, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="username">Name of the user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task MembersAsync(string org, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/orgs/{org}/members/{username}");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(System.Convert.ToString(org, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="username">Name of the user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No content. Response if requester is an organization member and user is a member</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Members2Async(string org, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Members2Async(org, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="username">Name of the user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content. Response if requester is an organization member and user is a member</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Members2Async(string org, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/orgs/{org}/members/{username}");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(System.Convert.ToString(org, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "302") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Found. Response if requester is not an organization member\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Found.\na. Response if requester is an organization member and user is not a member\nb. Response if requester is not an organization member and is inquiring about themselves\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous5>> ReposAllAsync(string org, Type? type, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return ReposAllAsync(org, type, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous5>> ReposAllAsync(string org, Type? type, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/orgs/{org}/repos?");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(System.Convert.ToString(org, System.Globalization.CultureInfo.InvariantCulture)));
            if (type != null) urlBuilder_.Append("type=").Append(System.Uri.EscapeDataString(System.Convert.ToString(type.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous5>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous5>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous5>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous5>> ReposAsync(string org, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, PostRepo body)
        {
            return ReposAsync(org, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous5>> ReposAsync(string org, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, PostRepo body, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/orgs/{org}/repos");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(System.Convert.ToString(org, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous5>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous5>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous5>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous6>> TeamsAllAsync(string org, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return TeamsAllAsync(org, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous6>> TeamsAllAsync(string org, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/orgs/{org}/teams");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(System.Convert.ToString(org, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous6>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous6>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous6>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Team> TeamsAsync(string org, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, OrgTeamsPost body)
        {
            return TeamsAsync(org, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Team> TeamsAsync(string org, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, OrgTeamsPost body, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/orgs/{org}/teams");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(System.Convert.ToString(org, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Team); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Team>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Team);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Item removed.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Repos2Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Repos2Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Item removed.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Repos2Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Repo> Repos3Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Repos3Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Repo> Repos3Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Repo); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Repo>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Repo);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Repo> Repos4Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, RepoEdit body)
        {
            return Repos4Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Repo> Repos4Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, RepoEdit body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Repo); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Repo>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Repo);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous7>> AssigneesAllAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return AssigneesAllAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous7>> AssigneesAllAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/assignees");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous7>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous7>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous7>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="assignee">Login of the assignee.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>User is an assignee.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AssigneesAsync(string owner, string repo, string assignee, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return AssigneesAsync(owner, repo, assignee, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="assignee">Login of the assignee.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>User is an assignee.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AssigneesAsync(string owner, string repo, string assignee, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (assignee == null)
                throw new System.ArgumentNullException("assignee");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/assignees/{assignee}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{assignee}", System.Uri.EscapeDataString(System.Convert.ToString(assignee, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("User isn\'t an assignee.", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous8>> BranchesAllAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return BranchesAllAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous8>> BranchesAllAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/branches");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous8>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous8>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous8>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="branch">Name of the branch.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Branch> BranchesAsync(string owner, string repo, string branch, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return BranchesAsync(owner, repo, branch, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="branch">Name of the branch.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Branch> BranchesAsync(string owner, string repo, string branch, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (branch == null)
                throw new System.ArgumentNullException("branch");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/branches/{branch}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{branch}", System.Uri.EscapeDataString(System.Convert.ToString(branch, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Branch); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Branch>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Branch);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> CollaboratorsAllAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return CollaboratorsAllAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> CollaboratorsAllAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/collaborators");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous4>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="user">Login of the user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Collaborator removed.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task CollaboratorsAsync(string owner, string repo, string user, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return CollaboratorsAsync(owner, repo, user, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="user">Login of the user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Collaborator removed.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task CollaboratorsAsync(string owner, string repo, string user, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (user == null)
                throw new System.ArgumentNullException("user");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/collaborators/{user}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{user}", System.Uri.EscapeDataString(System.Convert.ToString(user, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="user">Login of the user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>User is a collaborator.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Collaborators2Async(string owner, string repo, string user, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Collaborators2Async(owner, repo, user, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="user">Login of the user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>User is a collaborator.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Collaborators2Async(string owner, string repo, string user, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (user == null)
                throw new System.ArgumentNullException("user");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/collaborators/{user}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{user}", System.Uri.EscapeDataString(System.Convert.ToString(user, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("User is not a collaborator.", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="user">Login of the user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Collaborator added.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Collaborators3Async(string owner, string repo, string user, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Collaborators3Async(owner, repo, user, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="user">Login of the user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Collaborator added.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Collaborators3Async(string owner, string repo, string user, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (user == null)
                throw new System.ArgumentNullException("user");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/collaborators/{user}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{user}", System.Uri.EscapeDataString(System.Convert.ToString(user, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous9>> Comments5Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Comments5Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous9>> Comments5Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/comments");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous9>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous9>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous9>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="commentId">Id of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Comments6Async(string owner, string repo, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Comments6Async(owner, repo, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="commentId">Id of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Comments6Async(string owner, string repo, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (commentId == null)
                throw new System.ArgumentNullException("commentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/comments/{commentId}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{commentId}", System.Uri.EscapeDataString(System.Convert.ToString(commentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="commentId">Id of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CommitComments> Comments7Async(string owner, string repo, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Comments7Async(owner, repo, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="commentId">Id of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CommitComments> Comments7Async(string owner, string repo, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (commentId == null)
                throw new System.ArgumentNullException("commentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/comments/{commentId}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{commentId}", System.Uri.EscapeDataString(System.Convert.ToString(commentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CommitComments); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CommitComments>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CommitComments);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="commentId">Id of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CommitComments> Comments8Async(string owner, string repo, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, CommentBody body)
        {
            return Comments8Async(owner, repo, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="commentId">Id of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CommitComments> Comments8Async(string owner, string repo, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, CommentBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (commentId == null)
                throw new System.ArgumentNullException("commentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/comments/{commentId}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{commentId}", System.Uri.EscapeDataString(System.Convert.ToString(commentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CommitComments); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CommitComments>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CommitComments);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="since">The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Example: "2012-10-09T23:39:01Z".</param>
        /// <param name="sha">Sha or branch to start listing commits from.</param>
        /// <param name="path">Only commits containing this file path will be returned.</param>
        /// <param name="author">GitHub login, name, or email by which to filter by commit author.</param>
        /// <param name="until">ISO 8601 Date - Only commits before this date will be returned.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous10>> CommitsAllAsync(string owner, string repo, string since, string sha, string path, string author, string until, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return CommitsAllAsync(owner, repo, since, sha, path, author, until, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="since">The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Example: "2012-10-09T23:39:01Z".</param>
        /// <param name="sha">Sha or branch to start listing commits from.</param>
        /// <param name="path">Only commits containing this file path will be returned.</param>
        /// <param name="author">GitHub login, name, or email by which to filter by commit author.</param>
        /// <param name="until">ISO 8601 Date - Only commits before this date will be returned.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous10>> CommitsAllAsync(string owner, string repo, string since, string sha, string path, string author, string until, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/commits?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(System.Convert.ToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sha != null) urlBuilder_.Append("sha=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sha, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (path != null) urlBuilder_.Append("path=").Append(System.Uri.EscapeDataString(System.Convert.ToString(path, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (author != null) urlBuilder_.Append("author=").Append(System.Uri.EscapeDataString(System.Convert.ToString(author, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (until != null) urlBuilder_.Append("until=").Append(System.Uri.EscapeDataString(System.Convert.ToString(until, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous10>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous10>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous10>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous11>> StatusAsync(string owner, string repo, string @ref, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return StatusAsync(owner, repo, @ref, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous11>> StatusAsync(string owner, string repo, string @ref, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (@ref == null)
                throw new System.ArgumentNullException("@ref");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/commits/{ref}/status");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ref}", System.Uri.EscapeDataString(System.Convert.ToString(@ref, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous11>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous11>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous11>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="shaCode">SHA-1 code of the commit.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Commit> CommitsAsync(string owner, string repo, string shaCode, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return CommitsAsync(owner, repo, shaCode, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="shaCode">SHA-1 code of the commit.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Commit> CommitsAsync(string owner, string repo, string shaCode, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (shaCode == null)
                throw new System.ArgumentNullException("shaCode");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/commits/{shaCode}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{shaCode}", System.Uri.EscapeDataString(System.Convert.ToString(shaCode, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Commit); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Commit>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Commit);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="shaCode">SHA-1 code of the commit.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous9>> Comments9Async(string owner, string repo, string shaCode, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Comments9Async(owner, repo, shaCode, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="shaCode">SHA-1 code of the commit.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous9>> Comments9Async(string owner, string repo, string shaCode, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (shaCode == null)
                throw new System.ArgumentNullException("shaCode");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/commits/{shaCode}/comments");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{shaCode}", System.Uri.EscapeDataString(System.Convert.ToString(shaCode, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous9>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous9>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous9>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="shaCode">SHA-1 code of the commit.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CommitComments> Comments10Async(string owner, string repo, string shaCode, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, CommitBody body)
        {
            return Comments10Async(owner, repo, shaCode, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="shaCode">SHA-1 code of the commit.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CommitComments> Comments10Async(string owner, string repo, string shaCode, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, CommitBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (shaCode == null)
                throw new System.ArgumentNullException("shaCode");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/commits/{shaCode}/comments");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{shaCode}", System.Uri.EscapeDataString(System.Convert.ToString(shaCode, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CommitComments); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CommitComments>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CommitComments);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CompareCommits> CompareAsync(string owner, string repo, string baseId, string headId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return CompareAsync(owner, repo, baseId, headId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CompareCommits> CompareAsync(string owner, string repo, string baseId, string headId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (baseId == null)
                throw new System.ArgumentNullException("baseId");
    
            if (headId == null)
                throw new System.ArgumentNullException("headId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/compare/{baseId}...{headId}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{baseId}", System.Uri.EscapeDataString(System.Convert.ToString(baseId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{headId}", System.Uri.EscapeDataString(System.Convert.ToString(headId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CompareCommits); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CompareCommits>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CompareCommits);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeleteFile> ContentsAsync(string owner, string repo, string path, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, DeleteFileBody body)
        {
            return ContentsAsync(owner, repo, path, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeleteFile> ContentsAsync(string owner, string repo, string path, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, DeleteFileBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (path == null)
                throw new System.ArgumentNullException("path");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/contents/{path}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{path}", System.Uri.EscapeDataString(System.Convert.ToString(path, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(DeleteFile); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<DeleteFile>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(DeleteFile);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="pathQuery">The content path.</param>
        /// <param name="@ref">The String name of the Commit/Branch/Tag. Defaults to 'master'.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ContentsPath> Contents2Async(string owner, string repo, string pathPath, string pathQuery, string @ref, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Contents2Async(owner, repo, pathPath, pathQuery, @ref, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="pathQuery">The content path.</param>
        /// <param name="@ref">The String name of the Commit/Branch/Tag. Defaults to 'master'.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ContentsPath> Contents2Async(string owner, string repo, string pathPath, string pathQuery, string @ref, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (pathPath == null)
                throw new System.ArgumentNullException("pathPath");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/contents/{path}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{path}", System.Uri.EscapeDataString(System.Convert.ToString(pathPath, System.Globalization.CultureInfo.InvariantCulture)));
            if (pathQuery != null) urlBuilder_.Append("path=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pathQuery, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (@ref != null) urlBuilder_.Append("ref=").Append(System.Uri.EscapeDataString(System.Convert.ToString(@ref, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ContentsPath); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ContentsPath>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ContentsPath);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CreateFile> Contents3Async(string owner, string repo, string path, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, CreateFileBody body)
        {
            return Contents3Async(owner, repo, path, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CreateFile> Contents3Async(string owner, string repo, string path, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, CreateFileBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (path == null)
                throw new System.ArgumentNullException("path");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/contents/{path}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{path}", System.Uri.EscapeDataString(System.Convert.ToString(path, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CreateFile); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CreateFile>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CreateFile);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="anon">Set to 1 or true to include anonymous contributors in results.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous12>> ContributorsAllAsync(string owner, string repo, string anon, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return ContributorsAllAsync(owner, repo, anon, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="anon">Set to 1 or true to include anonymous contributors in results.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous12>> ContributorsAllAsync(string owner, string repo, string anon, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (anon == null)
                throw new System.ArgumentNullException("anon");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/contributors?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("anon=").Append(System.Uri.EscapeDataString(System.Convert.ToString(anon, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous12>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous12>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous12>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous13>> DeploymentsAllAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return DeploymentsAllAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous13>> DeploymentsAllAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/deployments");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous13>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous13>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous13>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeploymentResp> DeploymentsAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, Deployment body)
        {
            return DeploymentsAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeploymentResp> DeploymentsAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, Deployment body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/deployments");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(DeploymentResp); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<DeploymentResp>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(DeploymentResp);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="id">The Deployment ID to list the statuses from.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous14>> StatusesAllAsync(string owner, string repo, int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return StatusesAllAsync(owner, repo, id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="id">The Deployment ID to list the statuses from.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous14>> StatusesAllAsync(string owner, string repo, int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/deployments/{id}/statuses");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous14>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous14>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous14>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="id">The Deployment ID to list the statuses from.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task StatusesAsync(string owner, string repo, int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, DeploymentStatusesCreate body)
        {
            return StatusesAsync(owner, repo, id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="id">The Deployment ID to list the statuses from.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task StatusesAsync(string owner, string repo, int id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, DeploymentStatusesCreate body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/deployments/{id}/statuses");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Downloads> DownloadsAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return DownloadsAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Downloads> DownloadsAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/downloads");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Downloads); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Downloads>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Downloads);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="downloadId">Id of download.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Downloads2Async(string owner, string repo, int downloadId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Downloads2Async(owner, repo, downloadId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="downloadId">Id of download.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Downloads2Async(string owner, string repo, int downloadId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (downloadId == null)
                throw new System.ArgumentNullException("downloadId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/downloads/{downloadId}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{downloadId}", System.Uri.EscapeDataString(System.Convert.ToString(downloadId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="downloadId">Id of download.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Downloads> Downloads3Async(string owner, string repo, int downloadId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Downloads3Async(owner, repo, downloadId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="downloadId">Id of download.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Downloads> Downloads3Async(string owner, string repo, int downloadId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (downloadId == null)
                throw new System.ArgumentNullException("downloadId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/downloads/{downloadId}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{downloadId}", System.Uri.EscapeDataString(System.Convert.ToString(downloadId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Downloads); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Downloads>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Downloads);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Events> Events4Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Events4Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Events> Events4Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/events");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Events); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Events>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Events);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous15>> ForksAllAsync(string owner, string repo, Sort5? sort, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return ForksAllAsync(owner, repo, sort, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous15>> ForksAllAsync(string owner, string repo, Sort5? sort, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/forks?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous15>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous15>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous15>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Fork> Forks2Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, ForkBody body)
        {
            return Forks2Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Fork> Forks2Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, ForkBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/forks");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Fork); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Fork>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Fork);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Blobs> BlobsAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, Blob body)
        {
            return BlobsAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Blobs> BlobsAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, Blob body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/git/blobs");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Blobs); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Blobs>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Blobs);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="shaCode">SHA-1 code.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Blob> Blobs2Async(string owner, string repo, string shaCode, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Blobs2Async(owner, repo, shaCode, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="shaCode">SHA-1 code.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Blob> Blobs2Async(string owner, string repo, string shaCode, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (shaCode == null)
                throw new System.ArgumentNullException("shaCode");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/git/blobs/{shaCode}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{shaCode}", System.Uri.EscapeDataString(System.Convert.ToString(shaCode, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Blob); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Blob>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Blob);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GitCommit> Commits2Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, RepoCommitBody body)
        {
            return Commits2Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GitCommit> Commits2Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, RepoCommitBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/git/commits");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(GitCommit); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GitCommit>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(GitCommit);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="shaCode">SHA-1 code.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RepoCommit> Commits3Async(string owner, string repo, string shaCode, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Commits3Async(owner, repo, shaCode, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="shaCode">SHA-1 code.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RepoCommit> Commits3Async(string owner, string repo, string shaCode, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (shaCode == null)
                throw new System.ArgumentNullException("shaCode");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/git/commits/{shaCode}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{shaCode}", System.Uri.EscapeDataString(System.Convert.ToString(shaCode, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(RepoCommit); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<RepoCommit>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(RepoCommit);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous16>> RefsAllAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return RefsAllAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous16>> RefsAllAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/git/refs");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous16>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous16>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous16>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HeadBranch> RefsAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, RefsBody body)
        {
            return RefsAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HeadBranch> RefsAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, RefsBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/git/refs");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(HeadBranch); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<HeadBranch>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(HeadBranch);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Refs2Async(string owner, string repo, string @ref, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Refs2Async(owner, repo, @ref, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Refs2Async(string owner, string repo, string @ref, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (@ref == null)
                throw new System.ArgumentNullException("@ref");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/git/refs/{ref}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ref}", System.Uri.EscapeDataString(System.Convert.ToString(@ref, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HeadBranch> Refs3Async(string owner, string repo, string @ref, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Refs3Async(owner, repo, @ref, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HeadBranch> Refs3Async(string owner, string repo, string @ref, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (@ref == null)
                throw new System.ArgumentNullException("@ref");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/git/refs/{ref}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ref}", System.Uri.EscapeDataString(System.Convert.ToString(@ref, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(HeadBranch); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<HeadBranch>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(HeadBranch);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HeadBranch> Refs4Async(string owner, string repo, string @ref, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, GitRefPatch body)
        {
            return Refs4Async(owner, repo, @ref, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HeadBranch> Refs4Async(string owner, string repo, string @ref, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, GitRefPatch body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (@ref == null)
                throw new System.ArgumentNullException("@ref");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/git/refs/{ref}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ref}", System.Uri.EscapeDataString(System.Convert.ToString(@ref, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(HeadBranch); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<HeadBranch>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(HeadBranch);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Tags> TagsAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, Tag body)
        {
            return TagsAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Tags> TagsAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, Tag body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/git/tags");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Tags); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Tags>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Tags);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Tag> Tags2Async(string owner, string repo, string shaCode, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Tags2Async(owner, repo, shaCode, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Tag> Tags2Async(string owner, string repo, string shaCode, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (shaCode == null)
                throw new System.ArgumentNullException("shaCode");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/git/tags/{shaCode}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{shaCode}", System.Uri.EscapeDataString(System.Convert.ToString(shaCode, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Tag); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Tag>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Tag);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Trees> TreesAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, Tree body)
        {
            return TreesAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Trees> TreesAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, Tree body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/git/trees");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Trees); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Trees>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Trees);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="shaCode">Tree SHA.</param>
        /// <param name="recursive">Get a Tree Recursively. (0 or 1)</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Tree> Trees2Async(string owner, string repo, string shaCode, int? recursive, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Trees2Async(owner, repo, shaCode, recursive, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="shaCode">Tree SHA.</param>
        /// <param name="recursive">Get a Tree Recursively. (0 or 1)</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Tree> Trees2Async(string owner, string repo, string shaCode, int? recursive, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (shaCode == null)
                throw new System.ArgumentNullException("shaCode");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/git/trees/{shaCode}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{shaCode}", System.Uri.EscapeDataString(System.Convert.ToString(shaCode, System.Globalization.CultureInfo.InvariantCulture)));
            if (recursive != null) urlBuilder_.Append("recursive=").Append(System.Uri.EscapeDataString(System.Convert.ToString(recursive.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Tree); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Tree>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Tree);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous17>> HooksAllAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return HooksAllAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous17>> HooksAllAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/hooks");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous17>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous17>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous17>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous17>> HooksAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, HookBody body)
        {
            return HooksAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous17>> HooksAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, HookBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/hooks");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous17>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous17>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous17>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="hookId">Id of hook.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Hooks2Async(string owner, string repo, int hookId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Hooks2Async(owner, repo, hookId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="hookId">Id of hook.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Hooks2Async(string owner, string repo, int hookId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (hookId == null)
                throw new System.ArgumentNullException("hookId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/hooks/{hookId}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{hookId}", System.Uri.EscapeDataString(System.Convert.ToString(hookId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="hookId">Id of hook.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous17>> Hooks3Async(string owner, string repo, int hookId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Hooks3Async(owner, repo, hookId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="hookId">Id of hook.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous17>> Hooks3Async(string owner, string repo, int hookId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (hookId == null)
                throw new System.ArgumentNullException("hookId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/hooks/{hookId}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{hookId}", System.Uri.EscapeDataString(System.Convert.ToString(hookId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous17>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous17>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous17>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="hookId">Id of hook.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous17>> Hooks4Async(string owner, string repo, int hookId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, HookBody body)
        {
            return Hooks4Async(owner, repo, hookId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="hookId">Id of hook.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous17>> Hooks4Async(string owner, string repo, int hookId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, HookBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (hookId == null)
                throw new System.ArgumentNullException("hookId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/hooks/{hookId}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{hookId}", System.Uri.EscapeDataString(System.Convert.ToString(hookId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous17>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous17>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous17>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="hookId">Id of hook.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Hook is triggered.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task TestsAsync(string owner, string repo, int hookId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return TestsAsync(owner, repo, hookId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="hookId">Id of hook.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Hook is triggered.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task TestsAsync(string owner, string repo, int hookId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (hookId == null)
                throw new System.ArgumentNullException("hookId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/hooks/{hookId}/tests");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{hookId}", System.Uri.EscapeDataString(System.Convert.ToString(hookId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="filter">Issues assigned to you / created by you / mentioning you / you're
        /// subscribed to updates for / All issues the authenticated user can see</param>
        /// <param name="labels">String list of comma separated Label names. Example - bug,ui,@high.</param>
        /// <param name="since">Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Only issues updated at or after this time are returned.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous3>> Issues2Async(string owner, string repo, Filter3 filter, State4 state, string labels, Sort6 sort, Direction3 direction, string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Issues2Async(owner, repo, filter, state, labels, sort, direction, since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="filter">Issues assigned to you / created by you / mentioning you / you're
        /// subscribed to updates for / All issues the authenticated user can see</param>
        /// <param name="labels">String list of comma separated Label names. Example - bug,ui,@high.</param>
        /// <param name="since">Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Only issues updated at or after this time are returned.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous3>> Issues2Async(string owner, string repo, Filter3 filter, State4 state, string labels, Sort6 sort, Direction3 direction, string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (filter == null)
                throw new System.ArgumentNullException("filter");
    
            if (state == null)
                throw new System.ArgumentNullException("state");
    
            if (labels == null)
                throw new System.ArgumentNullException("labels");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            if (direction == null)
                throw new System.ArgumentNullException("direction");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/issues?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("filter=").Append(System.Uri.EscapeDataString(System.Convert.ToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("state=").Append(System.Uri.EscapeDataString(System.Convert.ToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("labels=").Append(System.Uri.EscapeDataString(System.Convert.ToString(labels, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("direction=").Append(System.Uri.EscapeDataString(System.Convert.ToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(System.Convert.ToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous3>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous3>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous3>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Issue> Issues3Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, Issue body)
        {
            return Issues3Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Issue> Issues3Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, Issue body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/issues");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Issue); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Issue>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Issue);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="direction">Ignored without 'sort' parameter.</param>
        /// <param name="since">The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Example: "2012-10-09T23:39:01Z".</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous18>> Comments11Async(string owner, string repo, string direction, Sort7? sort, string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Comments11Async(owner, repo, direction, sort, since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="direction">Ignored without 'sort' parameter.</param>
        /// <param name="since">The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Example: "2012-10-09T23:39:01Z".</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous18>> Comments11Async(string owner, string repo, string direction, Sort7? sort, string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/issues/comments?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (direction != null) urlBuilder_.Append("direction=").Append(System.Uri.EscapeDataString(System.Convert.ToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(System.Convert.ToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous18>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous18>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous18>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="commentId">ID of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Comments12Async(string owner, string repo, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Comments12Async(owner, repo, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="commentId">ID of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Comments12Async(string owner, string repo, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (commentId == null)
                throw new System.ArgumentNullException("commentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/issues/comments/{commentId}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{commentId}", System.Uri.EscapeDataString(System.Convert.ToString(commentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="commentId">ID of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<IssuesComment> Comments13Async(string owner, string repo, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Comments13Async(owner, repo, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="commentId">ID of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<IssuesComment> Comments13Async(string owner, string repo, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (commentId == null)
                throw new System.ArgumentNullException("commentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/issues/comments/{commentId}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{commentId}", System.Uri.EscapeDataString(System.Convert.ToString(commentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(IssuesComment); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<IssuesComment>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(IssuesComment);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="commentId">ID of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<IssuesComment> Comments14Async(string owner, string repo, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, CommentBody body)
        {
            return Comments14Async(owner, repo, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="commentId">ID of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<IssuesComment> Comments14Async(string owner, string repo, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, CommentBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (commentId == null)
                throw new System.ArgumentNullException("commentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/issues/comments/{commentId}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{commentId}", System.Uri.EscapeDataString(System.Convert.ToString(commentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(IssuesComment); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<IssuesComment>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(IssuesComment);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Events> Events5Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Events5Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Events> Events5Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/issues/events");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Events); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Events>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Events);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="eventId">Id of the event.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Event> Events6Async(string owner, string repo, int eventId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Events6Async(owner, repo, eventId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="eventId">Id of the event.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Event> Events6Async(string owner, string repo, int eventId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (eventId == null)
                throw new System.ArgumentNullException("eventId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/issues/events/{eventId}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{eventId}", System.Uri.EscapeDataString(System.Convert.ToString(eventId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Event); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Event>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Event);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of issue.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Issue> Issues4Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Issues4Async(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of issue.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Issue> Issues4Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/issues/{number}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Issue); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Issue>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Issue);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of issue.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Issue> Issues5Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, Issue body)
        {
            return Issues5Async(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of issue.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Issue> Issues5Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, Issue body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/issues/{number}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Issue); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Issue>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Issue);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of issue.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous18>> Comments15Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Comments15Async(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of issue.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous18>> Comments15Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/issues/{number}/comments");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous18>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous18>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous18>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of issue.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<IssuesComment> Comments16Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, CommentBody body)
        {
            return Comments16Async(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of issue.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<IssuesComment> Comments16Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, CommentBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/issues/{number}/comments");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(IssuesComment); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<IssuesComment>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(IssuesComment);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of issue.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Events> Events7Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Events7Async(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of issue.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Events> Events7Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/issues/{number}/events");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Events); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Events>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Events);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of issue.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task LabelsAsync(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return LabelsAsync(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of issue.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task LabelsAsync(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/issues/{number}/labels");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of issue.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous19>> LabelsAllAsync(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return LabelsAllAsync(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of issue.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous19>> LabelsAllAsync(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/issues/{number}/labels");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous19>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous19>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous19>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of issue.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Label> Labels2Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Collections.Generic.IEnumerable<string> body)
        {
            return Labels2Async(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of issue.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Label> Labels2Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/issues/{number}/labels");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Label); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Label>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Label);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of issue.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Label> Labels3Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Collections.Generic.IEnumerable<string> body)
        {
            return Labels3Async(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of issue.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Label> Labels3Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/issues/{number}/labels");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Label); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Label>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Label);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of issue.</param>
        /// <param name="name">Name of the label.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Item removed.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Labels4Async(string owner, string repo, int number, string name, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Labels4Async(owner, repo, number, name, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of issue.</param>
        /// <param name="name">Name of the label.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Item removed.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Labels4Async(string owner, string repo, int number, string name, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/issues/{number}/labels/{name}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(System.Convert.ToString(name, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous20>> KeysAllAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return KeysAllAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous20>> KeysAllAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/keys");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous20>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous20>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous20>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserKeysKeyId> KeysAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, UserKeysPost body)
        {
            return KeysAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserKeysKeyId> KeysAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, UserKeysPost body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/keys");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(UserKeysKeyId); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<UserKeysKeyId>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(UserKeysKeyId);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="keyId">Id of key.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Keys2Async(string owner, string repo, int keyId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Keys2Async(owner, repo, keyId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="keyId">Id of key.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Keys2Async(string owner, string repo, int keyId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (keyId == null)
                throw new System.ArgumentNullException("keyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/keys/{keyId}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{keyId}", System.Uri.EscapeDataString(System.Convert.ToString(keyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="keyId">Id of key.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserKeysKeyId> Keys3Async(string owner, string repo, int keyId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Keys3Async(owner, repo, keyId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="keyId">Id of key.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserKeysKeyId> Keys3Async(string owner, string repo, int keyId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (keyId == null)
                throw new System.ArgumentNullException("keyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/keys/{keyId}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{keyId}", System.Uri.EscapeDataString(System.Convert.ToString(keyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(UserKeysKeyId); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<UserKeysKeyId>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(UserKeysKeyId);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous19>> Labels5Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Labels5Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous19>> Labels5Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/labels");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous19>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous19>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous19>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Label> Labels6Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Collections.Generic.IEnumerable<string> body)
        {
            return Labels6Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Label> Labels6Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/labels");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Label); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Label>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Label);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="name">Name of the label.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Labels7Async(string owner, string repo, string name, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Labels7Async(owner, repo, name, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="name">Name of the label.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Labels7Async(string owner, string repo, string name, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/labels/{name}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(System.Convert.ToString(name, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="name">Name of the label.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Label> Labels8Async(string owner, string repo, string name, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Labels8Async(owner, repo, name, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="name">Name of the label.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Label> Labels8Async(string owner, string repo, string name, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/labels/{name}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(System.Convert.ToString(name, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Label); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Label>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Label);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="name">Name of the label.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Label> Labels9Async(string owner, string repo, string name, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Collections.Generic.IEnumerable<string> body)
        {
            return Labels9Async(owner, repo, name, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="name">Name of the label.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Label> Labels9Async(string owner, string repo, string name, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/labels/{name}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(System.Convert.ToString(name, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Label); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Label>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Label);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> LanguagesAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return LanguagesAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> LanguagesAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/languages");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.Dictionary<string, int>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, int>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.Dictionary<string, int>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Successful Response (The resulting merge commit)</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MergesSuccessful> MergesAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, MergesBody body)
        {
            return MergesAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Successful Response (The resulting merge commit)</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MergesSuccessful> MergesAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, MergesBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/merges");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(MergesSuccessful); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<MergesSuccessful>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("No-op response (base already contains the head, nothing to merge)", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(MergesConflict); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<MergesConflict>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                            throw new SwaggerException<MergesConflict>("Missing base response or missing head response", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "409") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(MergesConflict); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<MergesConflict>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                            throw new SwaggerException<MergesConflict>("Merge conflict response.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(MergesSuccessful);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="state">String to filter by state.</param>
        /// <param name="direction">Ignored without 'sort' parameter.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Milestone> MilestonesAsync(string owner, string repo, State5? state, string direction, Sort8? sort, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return MilestonesAsync(owner, repo, state, direction, sort, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="state">String to filter by state.</param>
        /// <param name="direction">Ignored without 'sort' parameter.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Milestone> MilestonesAsync(string owner, string repo, State5? state, string direction, Sort8? sort, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/milestones?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (state != null) urlBuilder_.Append("state=").Append(System.Uri.EscapeDataString(System.Convert.ToString(state.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (direction != null) urlBuilder_.Append("direction=").Append(System.Uri.EscapeDataString(System.Convert.ToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Milestone); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Milestone>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Milestone);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Milestone> Milestones2Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, MilestoneUpdate body)
        {
            return Milestones2Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Milestone> Milestones2Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, MilestoneUpdate body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/milestones");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Milestone); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Milestone>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Milestone);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of milestone.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Milestones3Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Milestones3Async(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of milestone.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Milestones3Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/milestones/{number}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of milestone.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Milestone> Milestones4Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Milestones4Async(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of milestone.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Milestone> Milestones4Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/milestones/{number}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Milestone); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Milestone>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Milestone);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of milestone.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Milestone> Milestones5Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, MilestoneUpdate body)
        {
            return Milestones5Async(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of milestone.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Milestone> Milestones5Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, MilestoneUpdate body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/milestones/{number}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Milestone); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Milestone>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Milestone);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of milestone.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous19>> Labels10Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Labels10Async(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Number of milestone.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous19>> Labels10Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/milestones/{number}/labels");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous19>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous19>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous19>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="all">True to show notifications marked as read.</param>
        /// <param name="participating">True to show only notifications in which the user is directly participating
        /// or mentioned.</param>
        /// <param name="since">The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Example: "2012-10-09T23:39:01Z".</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Notifications> Notifications3Async(string owner, string repo, bool? all, bool? participating, string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Notifications3Async(owner, repo, all, participating, since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="all">True to show notifications marked as read.</param>
        /// <param name="participating">True to show only notifications in which the user is directly participating
        /// or mentioned.</param>
        /// <param name="since">The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Example: "2012-10-09T23:39:01Z".</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Notifications> Notifications3Async(string owner, string repo, bool? all, bool? participating, string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/notifications?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (all != null) urlBuilder_.Append("all=").Append(System.Uri.EscapeDataString(System.Convert.ToString(all.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (participating != null) urlBuilder_.Append("participating=").Append(System.Uri.EscapeDataString(System.Convert.ToString(participating.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(System.Convert.ToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Notifications); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Notifications>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Notifications);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Marked as read.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Notifications4Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, NotificationMarkRead body)
        {
            return Notifications4Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Marked as read.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Notifications4Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, NotificationMarkRead body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/notifications");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "205") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="state">String to filter by state.</param>
        /// <param name="head">Filter pulls by head user and branch name in the format of 'user:ref-name'.
        /// Example: github:new-script-format.</param>
        /// <param name="@base">Filter pulls by base branch name. Example - gh-pages.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous21>> PullsAllAsync(string owner, string repo, State6? state, string head, string @base, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return PullsAllAsync(owner, repo, state, head, @base, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="state">String to filter by state.</param>
        /// <param name="head">Filter pulls by head user and branch name in the format of 'user:ref-name'.
        /// Example: github:new-script-format.</param>
        /// <param name="@base">Filter pulls by base branch name. Example - gh-pages.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous21>> PullsAllAsync(string owner, string repo, State6? state, string head, string @base, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/pulls?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (state != null) urlBuilder_.Append("state=").Append(System.Uri.EscapeDataString(System.Convert.ToString(state.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (head != null) urlBuilder_.Append("head=").Append(System.Uri.EscapeDataString(System.Convert.ToString(head, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (@base != null) urlBuilder_.Append("base=").Append(System.Uri.EscapeDataString(System.Convert.ToString(@base, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous21>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous21>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous21>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous21>> PullsAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, PullsPost body)
        {
            return PullsAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous21>> PullsAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, PullsPost body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/pulls");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous21>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous21>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous21>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="direction">Ignored without 'sort' parameter.</param>
        /// <param name="since">The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Example: "2012-10-09T23:39:01Z".</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous18>> Comments17Async(string owner, string repo, string direction, Sort9? sort, string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Comments17Async(owner, repo, direction, sort, since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="direction">Ignored without 'sort' parameter.</param>
        /// <param name="since">The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Example: "2012-10-09T23:39:01Z".</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous18>> Comments17Async(string owner, string repo, string direction, Sort9? sort, string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/pulls/comments?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (direction != null) urlBuilder_.Append("direction=").Append(System.Uri.EscapeDataString(System.Convert.ToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(System.Convert.ToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous18>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous18>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous18>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="commentId">Id of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Comments18Async(string owner, string repo, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Comments18Async(owner, repo, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="commentId">Id of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Comments18Async(string owner, string repo, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (commentId == null)
                throw new System.ArgumentNullException("commentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/pulls/comments/{commentId}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{commentId}", System.Uri.EscapeDataString(System.Convert.ToString(commentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="commentId">Id of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PullsComment> Comments19Async(string owner, string repo, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Comments19Async(owner, repo, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="commentId">Id of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PullsComment> Comments19Async(string owner, string repo, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (commentId == null)
                throw new System.ArgumentNullException("commentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/pulls/comments/{commentId}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{commentId}", System.Uri.EscapeDataString(System.Convert.ToString(commentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PullsComment); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PullsComment>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(PullsComment);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="commentId">Id of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PullsComment> Comments20Async(string owner, string repo, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, CommentBody body)
        {
            return Comments20Async(owner, repo, commentId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="commentId">Id of comment.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PullsComment> Comments20Async(string owner, string repo, int commentId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, CommentBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (commentId == null)
                throw new System.ArgumentNullException("commentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/pulls/comments/{commentId}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{commentId}", System.Uri.EscapeDataString(System.Convert.ToString(commentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PullsComment); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PullsComment>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(PullsComment);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Id of pull.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PullRequest> Pulls2Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Pulls2Async(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Id of pull.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PullRequest> Pulls2Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/pulls/{number}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PullRequest); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PullRequest>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(PullRequest);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Id of pull.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Repo> Pulls3Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, PullUpdate body)
        {
            return Pulls3Async(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Id of pull.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Repo> Pulls3Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, PullUpdate body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/pulls/{number}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Repo); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Repo>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Repo);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Id of pull.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PullsComment> Comments21Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Comments21Async(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Id of pull.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PullsComment> Comments21Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/pulls/{number}/comments");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PullsComment); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PullsComment>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(PullsComment);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Id of pull.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PullsComment> Comments22Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, PullsCommentPost body)
        {
            return Comments22Async(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Id of pull.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PullsComment> Comments22Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, PullsCommentPost body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/pulls/{number}/comments");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PullsComment); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PullsComment>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(PullsComment);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Id of pull.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous10>> Commits4Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Commits4Async(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Id of pull.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous10>> Commits4Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/pulls/{number}/commits");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous10>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous10>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous10>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Id of pull.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous21>> FilesAsync(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return FilesAsync(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Id of pull.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous21>> FilesAsync(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/pulls/{number}/files");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous21>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous21>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous21>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Id of pull.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Pull request has been merged.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task MergeAsync(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return MergeAsync(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Id of pull.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Pull request has been merged.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task MergeAsync(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/pulls/{number}/merge");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Pull request has not been merged.", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Id of pull.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Response if merge was successful.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Merge> Merge2Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, MergePullBody body)
        {
            return Merge2Async(owner, repo, number, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="number">Id of pull.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Response if merge was successful.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Merge> Merge2Async(string owner, string repo, int number, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, MergePullBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/pulls/{number}/merge");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(System.Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Merge); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Merge>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "405") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Merge); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Merge>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                            throw new SwaggerException<Merge>("Response if merge cannot be performed.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Merge);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="@ref">The String name of the Commit/Branch/Tag. Defaults to master.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ContentsPath> ReadmeAsync(string owner, string repo, string @ref, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return ReadmeAsync(owner, repo, @ref, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="@ref">The String name of the Commit/Branch/Tag. Defaults to master.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ContentsPath> ReadmeAsync(string owner, string repo, string @ref, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/readme?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (@ref != null) urlBuilder_.Append("ref=").Append(System.Uri.EscapeDataString(System.Convert.ToString(@ref, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ContentsPath); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ContentsPath>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ContentsPath);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous22>> ReleasesAllAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return ReleasesAllAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous22>> ReleasesAllAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/releases");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous22>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous22>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous22>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Release> ReleasesAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, ReleaseCreate body)
        {
            return ReleasesAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Release> ReleasesAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, ReleaseCreate body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/releases");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Release); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Release>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Release);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AssetsAsync(string owner, string repo, string id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return AssetsAsync(owner, repo, id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AssetsAsync(string owner, string repo, string id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/releases/assets/{id}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Asset> Assets2Async(string owner, string repo, string id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Assets2Async(owner, repo, id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Asset> Assets2Async(string owner, string repo, string id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/releases/assets/{id}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Asset); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Asset>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Asset);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Asset> Assets3Async(string owner, string repo, string id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, AssetPatch body)
        {
            return Assets3Async(owner, repo, id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Asset> Assets3Async(string owner, string repo, string id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, AssetPatch body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/releases/assets/{id}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Asset); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Asset>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Asset);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Releases2Async(string owner, string repo, string id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Releases2Async(owner, repo, id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Releases2Async(string owner, string repo, string id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/releases/{id}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Release> Releases3Async(string owner, string repo, string id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Releases3Async(owner, repo, id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Release> Releases3Async(string owner, string repo, string id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/releases/{id}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Release); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Release>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Release);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Release> Releases4Async(string owner, string repo, string id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, ReleaseCreate body)
        {
            return Releases4Async(owner, repo, id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Release> Releases4Async(string owner, string repo, string id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, ReleaseCreate body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/releases/{id}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Release); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Release>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Release);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous23>> AssetsAllAsync(string owner, string repo, string id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return AssetsAllAsync(owner, repo, id, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous23>> AssetsAllAsync(string owner, string repo, string id, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/releases/{id}/assets");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous23>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous23>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous23>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> StargazersAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return StargazersAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> StargazersAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/stargazers");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous4>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous24>> ContributorsAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return ContributorsAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous24>> ContributorsAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/stats/contributors");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous24>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous24>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous24>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ParticipationStats> ParticipationAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return ParticipationAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ParticipationStats> ParticipationAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/stats/participation");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ParticipationStats); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ParticipationStats>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ParticipationStats);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="@ref">Ref to list the statuses from. It can be a SHA, a branch name, or a tag name.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous25>> Statuses2Async(string owner, string repo, string @ref, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Statuses2Async(owner, repo, @ref, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="@ref">Ref to list the statuses from. It can be a SHA, a branch name, or a tag name.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous25>> Statuses2Async(string owner, string repo, string @ref, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (@ref == null)
                throw new System.ArgumentNullException("@ref");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/statuses/{ref}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ref}", System.Uri.EscapeDataString(System.Convert.ToString(@ref, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous25>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous25>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous25>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="@ref">Ref to list the statuses from. It can be a SHA, a branch name, or a tag name.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous25>> Statuses3Async(string owner, string repo, string @ref, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, HeadBranch body)
        {
            return Statuses3Async(owner, repo, @ref, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="@ref">Ref to list the statuses from. It can be a SHA, a branch name, or a tag name.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous25>> Statuses3Async(string owner, string repo, string @ref, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, HeadBranch body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (@ref == null)
                throw new System.ArgumentNullException("@ref");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/statuses/{ref}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ref}", System.Uri.EscapeDataString(System.Convert.ToString(@ref, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous25>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous25>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous25>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> SubscribersAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return SubscribersAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> SubscribersAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/subscribers");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous4>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Subscription4Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Subscription4Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Subscription4Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/subscription");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Subscribition> Subscription5Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Subscription5Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Subscribition> Subscription5Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/subscription");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Subscribition); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Subscribition>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Subscribition);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Subscribition> Subscription6Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, SubscribitionBody body)
        {
            return Subscription6Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Subscribition> Subscription6Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, SubscribitionBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/subscription");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Subscribition); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Subscribition>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Subscribition);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Tags> Tags3Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Tags3Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Tags> Tags3Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/tags");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Tags); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Tags>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Tags);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous6>> Teams2Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Teams2Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous6>> Teams2Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/teams");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous6>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous6>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous6>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> WatchersAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return WatchersAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> WatchersAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/watchers");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous4>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="path">Valid Git reference, defaults to 'master'.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Repos5Async(string owner, string repo, Archive_format archive_format, string path, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Repos5Async(owner, repo, archive_format, path, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="path">Valid Git reference, defaults to 'master'.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Repos5Async(string owner, string repo, Archive_format archive_format, string path, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (archive_format == null)
                throw new System.ArgumentNullException("archive_format");
    
            if (path == null)
                throw new System.ArgumentNullException("path");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/{archive_format}/{path}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{archive_format}", System.Uri.EscapeDataString(System.Convert.ToString(archive_format, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{path}", System.Uri.EscapeDataString(System.Convert.ToString(path, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "302") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Found.", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="since">The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Example: "2012-10-09T23:39:01Z".</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous26>> RepositoriesAllAsync(string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return RepositoriesAllAsync(since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="since">The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Example: "2012-10-09T23:39:01Z".</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous26>> RepositoriesAllAsync(string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repositories?");
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(System.Convert.ToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous26>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous26>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous26>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="order">The sort field. if sort param is provided. Can be either asc or desc.</param>
        /// <param name="q">The search terms. This can be any combination of the supported code
        /// search parameters:
        /// 'Search In' Qualifies which fields are searched. With this qualifier
        /// you can restrict the search to just the file contents, the file path,
        /// or both.
        /// 'Languages' Searches code based on the language it's written in.
        /// 'Forks' Filters repositories based on the number of forks, and/or
        /// whether code from forked repositories should be included in the results
        /// at all.
        /// 'Size' Finds files that match a certain size (in bytes).
        /// 'Path' Specifies the path that the resulting file must be at.
        /// 'Extension' Matches files with a certain extension.
        /// 'Users' or 'Repositories' Limits searches to a specific user or repository.</param>
        /// <param name="sort">Can only be 'indexed', which indicates how recently a file has been indexed
        /// by the GitHub search infrastructure. If not provided, results are sorted
        /// by best match.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchCode> CodeAsync(Order3? order, string q, Sort10? sort, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return CodeAsync(order, q, sort, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="order">The sort field. if sort param is provided. Can be either asc or desc.</param>
        /// <param name="q">The search terms. This can be any combination of the supported code
        /// search parameters:
        /// 'Search In' Qualifies which fields are searched. With this qualifier
        /// you can restrict the search to just the file contents, the file path,
        /// or both.
        /// 'Languages' Searches code based on the language it's written in.
        /// 'Forks' Filters repositories based on the number of forks, and/or
        /// whether code from forked repositories should be included in the results
        /// at all.
        /// 'Size' Finds files that match a certain size (in bytes).
        /// 'Path' Specifies the path that the resulting file must be at.
        /// 'Extension' Matches files with a certain extension.
        /// 'Users' or 'Repositories' Limits searches to a specific user or repository.</param>
        /// <param name="sort">Can only be 'indexed', which indicates how recently a file has been indexed
        /// by the GitHub search infrastructure. If not provided, results are sorted
        /// by best match.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchCode> CodeAsync(Order3? order, string q, Sort10? sort, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (q == null)
                throw new System.ArgumentNullException("q");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/search/code?");
            if (order != null) urlBuilder_.Append("order=").Append(System.Uri.EscapeDataString(System.Convert.ToString(order.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("q=").Append(System.Uri.EscapeDataString(System.Convert.ToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SearchCode); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SearchCode>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SearchCode);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="order">The sort field. if sort param is provided. Can be either asc or desc.</param>
        /// <param name="q">The q search term can also contain any combination of the supported issue search qualifiers:</param>
        /// <param name="sort">The sort field. Can be comments, created, or updated. Default: results are sorted by best match.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchIssues> Issues6Async(Order4? order, string q, Sort11? sort, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Issues6Async(order, q, sort, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="order">The sort field. if sort param is provided. Can be either asc or desc.</param>
        /// <param name="q">The q search term can also contain any combination of the supported issue search qualifiers:</param>
        /// <param name="sort">The sort field. Can be comments, created, or updated. Default: results are sorted by best match.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchIssues> Issues6Async(Order4? order, string q, Sort11? sort, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (q == null)
                throw new System.ArgumentNullException("q");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/search/issues?");
            if (order != null) urlBuilder_.Append("order=").Append(System.Uri.EscapeDataString(System.Convert.ToString(order.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("q=").Append(System.Uri.EscapeDataString(System.Convert.ToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SearchIssues); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SearchIssues>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SearchIssues);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="order">The sort field. if sort param is provided. Can be either asc or desc.</param>
        /// <param name="q">The search terms. This can be any combination of the supported repository
        /// search parameters:
        /// 'Search In' Qualifies which fields are searched. With this qualifier you
        /// can restrict the search to just the repository name, description, readme,
        /// or any combination of these.
        /// 'Size' Finds repositories that match a certain size (in kilobytes).
        /// 'Forks' Filters repositories based on the number of forks, and/or whether
        /// forked repositories should be included in the results at all.
        /// 'Created' and 'Last Updated' Filters repositories based on times of
        /// creation, or when they were last updated.
        /// 'Users or Repositories' Limits searches to a specific user or repository.
        /// 'Languages' Searches repositories based on the language they are written in.
        /// 'Stars' Searches repositories based on the number of stars.</param>
        /// <param name="sort">If not provided, results are sorted by best match.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchRepositories> RepositoriesAsync(Order5? order, string q, Sort12? sort, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return RepositoriesAsync(order, q, sort, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="order">The sort field. if sort param is provided. Can be either asc or desc.</param>
        /// <param name="q">The search terms. This can be any combination of the supported repository
        /// search parameters:
        /// 'Search In' Qualifies which fields are searched. With this qualifier you
        /// can restrict the search to just the repository name, description, readme,
        /// or any combination of these.
        /// 'Size' Finds repositories that match a certain size (in kilobytes).
        /// 'Forks' Filters repositories based on the number of forks, and/or whether
        /// forked repositories should be included in the results at all.
        /// 'Created' and 'Last Updated' Filters repositories based on times of
        /// creation, or when they were last updated.
        /// 'Users or Repositories' Limits searches to a specific user or repository.
        /// 'Languages' Searches repositories based on the language they are written in.
        /// 'Stars' Searches repositories based on the number of stars.</param>
        /// <param name="sort">If not provided, results are sorted by best match.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchRepositories> RepositoriesAsync(Order5? order, string q, Sort12? sort, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (q == null)
                throw new System.ArgumentNullException("q");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/search/repositories?");
            if (order != null) urlBuilder_.Append("order=").Append(System.Uri.EscapeDataString(System.Convert.ToString(order.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("q=").Append(System.Uri.EscapeDataString(System.Convert.ToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SearchRepositories); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SearchRepositories>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SearchRepositories);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="order">The sort field. if sort param is provided. Can be either asc or desc.</param>
        /// <param name="q">The search terms. This can be any combination of the supported user
        /// search parameters:
        /// 'Search In' Qualifies which fields are searched. With this qualifier you
        /// can restrict the search to just the username, public email, full name,
        /// location, or any combination of these.
        /// 'Repository count' Filters users based on the number of repositories they
        /// have.
        /// 'Location' Filter users by the location indicated in their profile.
        /// 'Language' Search for users that have repositories that match a certain
        /// language.
        /// 'Created' Filter users based on when they joined.
        /// 'Followers' Filter users based on the number of followers they have.</param>
        /// <param name="sort">If not provided, results are sorted by best match.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchUsers> UsersAsync(Order6? order, string q, Sort13? sort, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return UsersAsync(order, q, sort, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="order">The sort field. if sort param is provided. Can be either asc or desc.</param>
        /// <param name="q">The search terms. This can be any combination of the supported user
        /// search parameters:
        /// 'Search In' Qualifies which fields are searched. With this qualifier you
        /// can restrict the search to just the username, public email, full name,
        /// location, or any combination of these.
        /// 'Repository count' Filters users based on the number of repositories they
        /// have.
        /// 'Location' Filter users by the location indicated in their profile.
        /// 'Language' Search for users that have repositories that match a certain
        /// language.
        /// 'Created' Filter users based on when they joined.
        /// 'Followers' Filter users based on the number of followers they have.</param>
        /// <param name="sort">If not provided, results are sorted by best match.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchUsers> UsersAsync(Order6? order, string q, Sort13? sort, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (q == null)
                throw new System.ArgumentNullException("q");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/search/users?");
            if (order != null) urlBuilder_.Append("order=").Append(System.Uri.EscapeDataString(System.Convert.ToString(order.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("q=").Append(System.Uri.EscapeDataString(System.Convert.ToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SearchUsers); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SearchUsers>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SearchUsers);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Teams3Async(int teamId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Teams3Async(teamId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Teams3Async(int teamId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/teams/{teamId}");
            urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(System.Convert.ToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Team> Teams4Async(int teamId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Teams4Async(teamId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Team> Teams4Async(int teamId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/teams/{teamId}");
            urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(System.Convert.ToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Team); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Team>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Team);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Team> Teams5Async(int teamId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, EditTeam body)
        {
            return Teams5Async(teamId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Team> Teams5Async(int teamId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, EditTeam body, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/teams/{teamId}");
            urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(System.Convert.ToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Team); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Team>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Team);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> Members3Async(int teamId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Members3Async(teamId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> Members3Async(int teamId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/teams/{teamId}/members");
            urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(System.Convert.ToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous4>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="username">Name of a member.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Team member removed.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Members4Async(int teamId, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Members4Async(teamId, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="username">Name of a member.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Team member removed.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Members4Async(int teamId, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/teams/{teamId}/members/{username}");
            urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(System.Convert.ToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="username">Name of a member.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>User is a member.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Members5Async(int teamId, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Members5Async(teamId, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="username">Name of a member.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>User is a member.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Members5Async(int teamId, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/teams/{teamId}/members/{username}");
            urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(System.Convert.ToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("User is not a member.", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="username">Name of a member.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Team member added.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Members6Async(int teamId, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Members6Async(teamId, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="username">Name of a member.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Team member added.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Members6Async(int teamId, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/teams/{teamId}/members/{username}");
            urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(System.Convert.ToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OrganizationAsTeamMember); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OrganizationAsTeamMember>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                            throw new SwaggerException<OrganizationAsTeamMember>("If you attempt to add an organization to a team, you will get this.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="username">Name of a member.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Team member removed.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task MembershipsAsync(int teamId, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return MembershipsAsync(teamId, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="username">Name of a member.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Team member removed.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task MembershipsAsync(int teamId, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/teams/{teamId}/memberships/{username}");
            urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(System.Convert.ToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="username">Name of a member.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>User is a member.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TeamMembership> Memberships2Async(int teamId, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Memberships2Async(teamId, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="username">Name of a member.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>User is a member.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TeamMembership> Memberships2Async(int teamId, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/teams/{teamId}/memberships/{username}");
            urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(System.Convert.ToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(TeamMembership); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<TeamMembership>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("User has no membership with team", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(TeamMembership);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="username">Name of a member.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Team member added.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TeamMembership> Memberships3Async(int teamId, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Memberships3Async(teamId, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="username">Name of a member.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Team member added.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TeamMembership> Memberships3Async(int teamId, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/teams/{teamId}/memberships/{username}");
            urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(System.Convert.ToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(TeamMembership); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<TeamMembership>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OrganizationAsTeamMember); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OrganizationAsTeamMember>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                            throw new SwaggerException<OrganizationAsTeamMember>("If you attempt to add an organization to a team, you will get this.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(TeamMembership);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous27>> Repos6Async(int teamId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Repos6Async(teamId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous27>> Repos6Async(int teamId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/teams/{teamId}/repos");
            urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(System.Convert.ToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous27>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous27>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous27>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="org">Name of a organization.</param>
        /// <param name="repo">Name of a repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Repos7Async(int teamId, string org, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Repos7Async(teamId, org, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="org">Name of a organization.</param>
        /// <param name="repo">Name of a repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Repos7Async(int teamId, string org, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");
    
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/teams/{teamId}/repos/{org}/{repo}");
            urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(System.Convert.ToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(System.Convert.ToString(org, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="owner">Name of a repository owner.</param>
        /// <param name="repo">Name of a repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Repos8Async(int teamId, string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Repos8Async(teamId, owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="owner">Name of a repository owner.</param>
        /// <param name="repo">Name of a repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Repos8Async(int teamId, string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");
    
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/teams/{teamId}/repos/{owner}/{repo}");
            urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(System.Convert.ToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="owner">Name of a repository owner.</param>
        /// <param name="repo">Name of a repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Repos9Async(int teamId, string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Repos9Async(teamId, owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="teamId">Id of team.</param>
        /// <param name="owner">Name of a repository owner.</param>
        /// <param name="repo">Name of a repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Repos9Async(int teamId, string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");
    
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/teams/{teamId}/repos/{owner}/{repo}");
            urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(System.Convert.ToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<User> UserAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return UserAsync(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<User> UserAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(User); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<User>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(User);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<User> User2Async(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, UserUpdate body)
        {
            return User2Async(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<User> User2Async(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, UserUpdate body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(User); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<User>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(User);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task EmailsAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Collections.Generic.IEnumerable<string> body)
        {
            return EmailsAsync(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task EmailsAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/emails");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> EmailsAllAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return EmailsAllAsync(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> EmailsAllAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/emails");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<string>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<string>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<string>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Emails2Async(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Collections.Generic.IEnumerable<string> body)
        {
            return Emails2Async(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Emails2Async(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/emails");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> FollowersAllAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return FollowersAllAsync(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> FollowersAllAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/followers");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous4>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> FollowingAllAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return FollowingAllAsync(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> FollowingAllAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/following");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous4>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>User unfollowed.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task FollowingAsync(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return FollowingAsync(username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>User unfollowed.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task FollowingAsync(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/following/{username}");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Response if you are following this user.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Following2Async(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Following2Async(username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Response if you are following this user.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Following2Async(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/following/{username}");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Response if you are not following this user.", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>You are now following the user.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Following3Async(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Following3Async(username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>You are now following the user.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Following3Async(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/following/{username}");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="filter">Issues assigned to you / created by you / mentioning you / you're
        /// subscribed to updates for / All issues the authenticated user can see</param>
        /// <param name="labels">String list of comma separated Label names. Example - bug,ui,@high.</param>
        /// <param name="since">Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Only issues updated at or after this time are returned.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous3>> Issues7Async(Filter4 filter, State7 state, string labels, Sort14 sort, Direction4 direction, string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Issues7Async(filter, state, labels, sort, direction, since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="filter">Issues assigned to you / created by you / mentioning you / you're
        /// subscribed to updates for / All issues the authenticated user can see</param>
        /// <param name="labels">String list of comma separated Label names. Example - bug,ui,@high.</param>
        /// <param name="since">Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Only issues updated at or after this time are returned.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous3>> Issues7Async(Filter4 filter, State7 state, string labels, Sort14 sort, Direction4 direction, string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (filter == null)
                throw new System.ArgumentNullException("filter");
    
            if (state == null)
                throw new System.ArgumentNullException("state");
    
            if (labels == null)
                throw new System.ArgumentNullException("labels");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            if (direction == null)
                throw new System.ArgumentNullException("direction");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/issues?");
            urlBuilder_.Append("filter=").Append(System.Uri.EscapeDataString(System.Convert.ToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("state=").Append(System.Uri.EscapeDataString(System.Convert.ToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("labels=").Append(System.Uri.EscapeDataString(System.Convert.ToString(labels, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("direction=").Append(System.Uri.EscapeDataString(System.Convert.ToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(System.Convert.ToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous3>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous3>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous3>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<object>> Keys4Async(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Keys4Async(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<object>> Keys4Async(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/keys");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<object>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<object>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<object>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserKeysKeyId> Keys5Async(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, UserKeysPost body)
        {
            return Keys5Async(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserKeysKeyId> Keys5Async(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, UserKeysPost body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/keys");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(UserKeysKeyId); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<UserKeysKeyId>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(UserKeysKeyId);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="keyId">ID of key.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Keys6Async(int keyId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Keys6Async(keyId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="keyId">ID of key.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Keys6Async(int keyId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (keyId == null)
                throw new System.ArgumentNullException("keyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/keys/{keyId}");
            urlBuilder_.Replace("{keyId}", System.Uri.EscapeDataString(System.Convert.ToString(keyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="keyId">ID of key.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserKeysKeyId> Keys7Async(int keyId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Keys7Async(keyId, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="keyId">ID of key.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserKeysKeyId> Keys7Async(int keyId, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (keyId == null)
                throw new System.ArgumentNullException("keyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/keys/{keyId}");
            urlBuilder_.Replace("{keyId}", System.Uri.EscapeDataString(System.Convert.ToString(keyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(UserKeysKeyId); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<UserKeysKeyId>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(UserKeysKeyId);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<object>> OrgsAllAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return OrgsAllAsync(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<object>> OrgsAllAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/orgs");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<object>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<object>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<object>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous5>> Repos10Async(Type2? type, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Repos10Async(type, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous5>> Repos10Async(Type2? type, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/repos?");
            if (type != null) urlBuilder_.Append("type=").Append(System.Uri.EscapeDataString(System.Convert.ToString(type.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous5>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous5>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous5>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous5>> Repos11Async(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, PostRepo body)
        {
            return Repos11Async(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous5>> Repos11Async(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, PostRepo body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/repos");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous5>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous5>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous5>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="direction">Ignored without 'sort' parameter.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<object>> StarredAsync(string direction, Sort15? sort, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return StarredAsync(direction, sort, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="direction">Ignored without 'sort' parameter.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<object>> StarredAsync(string direction, Sort15? sort, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/starred?");
            if (direction != null) urlBuilder_.Append("direction=").Append(System.Uri.EscapeDataString(System.Convert.ToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<object>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<object>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<object>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of a repository owner.</param>
        /// <param name="repo">Name of a repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Unstarred.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Starred2Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Starred2Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of a repository owner.</param>
        /// <param name="repo">Name of a repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Unstarred.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Starred2Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/starred/{owner}/{repo}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of a repository owner.</param>
        /// <param name="repo">Name of a repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>This repository is starred by you.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Starred3Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Starred3Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of a repository owner.</param>
        /// <param name="repo">Name of a repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>This repository is starred by you.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Starred3Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/starred/{owner}/{repo}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("This repository is not starred by you.", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of a repository owner.</param>
        /// <param name="repo">Name of a repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Repository starred.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Starred4Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Starred4Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of a repository owner.</param>
        /// <param name="repo">Name of a repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Repository starred.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Starred4Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/starred/{owner}/{repo}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous28>> SubscriptionsAllAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return SubscriptionsAllAsync(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous28>> SubscriptionsAllAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/subscriptions");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous28>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous28>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous28>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of the owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Unwatched.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SubscriptionsAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return SubscriptionsAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of the owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Unwatched.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SubscriptionsAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/subscriptions/{owner}/{repo}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of the owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Repository is watched by you.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Subscriptions2Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Subscriptions2Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of the owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Repository is watched by you.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Subscriptions2Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/subscriptions/{owner}/{repo}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Repository is not watched by you.", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="owner">Name of the owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Repository is watched.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Subscriptions3Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Subscriptions3Async(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of the owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Repository is watched.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Subscriptions3Async(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/subscriptions/{owner}/{repo}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous29>> Teams6Async(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Teams6Async(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous29>> Teams6Async(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/user/teams");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous29>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous29>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous29>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="since">The integer ID of the last User that you've seen.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> UsersAllAsync(int? since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return UsersAllAsync(since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="since">The integer ID of the last User that you've seen.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> UsersAllAsync(int? since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/users?");
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(System.Convert.ToString(since.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous4>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> Users2Async(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Users2Async(username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> Users2Async(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/users/{username}");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous4>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Events8Async(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Events8Async(username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Events8Async(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/users/{username}/events");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Orgs3Async(string username, string org, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Orgs3Async(username, org, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Orgs3Async(string username, string org, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/users/{username}/events/orgs/{org}");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(System.Convert.ToString(org, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> FollowersAsync(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return FollowersAsync(username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> FollowersAsync(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/users/{username}/followers");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous4>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="targetUser">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Response if user follows target user.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Following4Async(string username, string targetUser, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Following4Async(username, targetUser, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="targetUser">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Response if user follows target user.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Following4Async(string username, string targetUser, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            if (targetUser == null)
                throw new System.ArgumentNullException("targetUser");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/users/{username}/following/{targetUser}");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{targetUser}", System.Uri.EscapeDataString(System.Convert.ToString(targetUser, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Response if user does not follow target user.", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="since">The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Example: "2012-10-09T23:39:01Z".</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous>> Gists5Async(string username, string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Gists5Async(username, since, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="since">The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        /// Example: "2012-10-09T23:39:01Z".</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous>> Gists5Async(string username, string since, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/users/{username}/gists?");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(System.Convert.ToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<object>> Keys8Async(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Keys8Async(username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<object>> Keys8Async(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/users/{username}/keys");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<object>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<object>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<object>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<object>> Orgs4Async(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Orgs4Async(username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<object>> Orgs4Async(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/users/{username}/orgs");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<object>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<object>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<object>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PublicAsync(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return PublicAsync(username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PublicAsync(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/users/{username}/received_events/public");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous5>> Repos12Async(string username, Type3? type, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Repos12Async(username, type, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous5>> Repos12Async(string username, Type3? type, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/users/{username}/repos?");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (type != null) urlBuilder_.Append("type=").Append(System.Uri.EscapeDataString(System.Convert.ToString(type.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous5>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous5>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous5>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Starred5Async(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Starred5Async(username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Starred5Async(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/users/{username}/starred");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Subscriptions4Async(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Subscriptions4Async(username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Subscriptions4Async(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/users/{username}/subscriptions");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.4.3.0")]
    public partial class PublicGitHubClient 
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        private string _baseUrl = "https://api.github.com";
        
        public PublicGitHubClient()
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> MembersAllAsync(string org, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return MembersAllAsync(org, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> MembersAllAsync(string org, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/orgs/{org}/public_members");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(System.Convert.ToString(org, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous4>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="username">Name of the user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Concealed.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task MembersAsync(string org, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return MembersAsync(org, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="username">Name of the user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Concealed.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task MembersAsync(string org, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/orgs/{org}/public_members/{username}");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(System.Convert.ToString(org, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="username">Name of the user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>User is a public member.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Members2Async(string org, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Members2Async(org, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="username">Name of the user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>User is a public member.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Members2Async(string org, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/orgs/{org}/public_members/{username}");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(System.Convert.ToString(org, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("User is not a public member.", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="username">Name of the user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>Publicized.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Members3Async(string org, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return Members3Async(org, username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="org">Name of organisation.</param>
        /// <param name="username">Name of the user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Publicized.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Members3Async(string org, string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/orgs/{org}/public_members/{username}");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(System.Convert.ToString(org, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.4.3.0")]
    public partial class RateGitHubClient 
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        private string _baseUrl = "https://api.github.com";
        
        public RateGitHubClient()
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Rate_limit> LimitAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return LimitAsync(x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Rate_limit> LimitAsync(string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/rate_limit");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Rate_limit); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Rate_limit>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Rate_limit);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.4.3.0")]
    public partial class CodeGitHubClient 
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        private string _baseUrl = "https://api.github.com";
        
        public CodeGitHubClient()
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<int>> FrequencyAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return FrequencyAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<int>> FrequencyAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/stats/code_frequency");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<int>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<int>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<int>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.4.3.0")]
    public partial class CommitGitHubClient 
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        private string _baseUrl = "https://api.github.com";
        
        public CommitGitHubClient()
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous30>> ActivityAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return ActivityAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous30>> ActivityAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/stats/commit_activity");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous30>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous30>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous30>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.4.3.0")]
    public partial class PunchGitHubClient 
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        private string _baseUrl = "https://api.github.com";
        
        public PunchGitHubClient()
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<int>> CardAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return CardAsync(owner, repo, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="owner">Name of repository owner.</param>
        /// <param name="repo">Name of repository.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<int>> CardAsync(string owner, string repo, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/repos/{owner}/{repo}/stats/punch_card");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(System.Convert.ToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(System.Convert.ToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<int>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<int>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<int>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.4.3.0")]
    public partial class ReceivedGitHubClient 
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        private string _baseUrl = "https://api.github.com";
        
        public ReceivedGitHubClient()
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task EventsAsync(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id)
        {
            return EventsAsync(username, x_GitHub_Media_Type, accept, x_RateLimit_Limit, x_RateLimit_Remaining, x_RateLimit_Reset, x_GitHub_Request_Id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="username">Name of user.</param>
        /// <param name="x_GitHub_Media_Type">You can check the current version of media type in responses.</param>
        /// <param name="accept">Is used to set specified media type.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task EventsAsync(string username, string x_GitHub_Media_Type, string accept, int? x_RateLimit_Limit, int? x_RateLimit_Remaining, int? x_RateLimit_Reset, int? x_GitHub_Request_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/users/{username}/received_events");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(System.Convert.ToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Media-Type", x_GitHub_Media_Type != null ? System.Convert.ToString(x_GitHub_Media_Type, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("Accept", accept != null ? System.Convert.ToString(accept, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Limit", x_RateLimit_Limit != null ? System.Convert.ToString(x_RateLimit_Limit, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Remaining", x_RateLimit_Remaining != null ? System.Convert.ToString(x_RateLimit_Remaining, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-RateLimit-Reset", x_RateLimit_Reset != null ? System.Convert.ToString(x_RateLimit_Reset, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Headers.TryAddWithoutValidation("X-GitHub-Request-Id", x_GitHub_Request_Id != null ? System.Convert.ToString(x_GitHub_Request_Id, System.Globalization.CultureInfo.InvariantCulture) : null);
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\nfor details.\n", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Asset : System.ComponentModel.INotifyPropertyChanged
    {
        private string _content_type;
        private string _created_at;
        private double? _download_count;
        private double? _id;
        private string _label;
        private string _name;
        private double? _size;
        private string _state;
        private string _updated_at;
        private Uploader _uploader;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("content_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content_type
        {
            get { return _content_type; }
            set 
            {
                if (_content_type != value)
                {
                    _content_type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("download_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Download_count
        {
            get { return _download_count; }
            set 
            {
                if (_download_count != value)
                {
                    _download_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label
        {
            get { return _label; }
            set 
            {
                if (_label != value)
                {
                    _label = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uploader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Uploader Uploader
        {
            get { return _uploader; }
            set 
            {
                if (_uploader != value)
                {
                    _uploader = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Asset FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Asset>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class AssetPatch : System.ComponentModel.INotifyPropertyChanged
    {
        private string _label;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label
        {
            get { return _label; }
            set 
            {
                if (_label != value)
                {
                    _label = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AssetPatch FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssetPatch>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Blob : System.ComponentModel.INotifyPropertyChanged
    {
        private string _content;
        private BlobEncoding? _encoding;
        private string _sha;
        private int? _size;
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content
        {
            get { return _content; }
            set 
            {
                if (_content != value)
                {
                    _content = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("encoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BlobEncoding? Encoding
        {
            get { return _encoding; }
            set 
            {
                if (_encoding != value)
                {
                    _encoding = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Blob FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Blob>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Blobs : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Blobs FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Blobs>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Branch : System.ComponentModel.INotifyPropertyChanged
    {
        private _links __links;
        private Commit2 _commit;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public _links _links
        {
            get { return __links; }
            set 
            {
                if (__links != value)
                {
                    __links = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Commit2 Commit
        {
            get { return _commit; }
            set 
            {
                if (_commit != value)
                {
                    _commit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Branch FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Branch>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Comment : System.ComponentModel.INotifyPropertyChanged
    {
        private string _body;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Comment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Comment>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class CommentBody : System.ComponentModel.INotifyPropertyChanged
    {
        private string _body;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CommentBody FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommentBody>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Commit : System.ComponentModel.INotifyPropertyChanged
    {
        private Author _author;
        private Commit1 _commit1;
        private Committer _committer;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous31> _files;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous32> _parents;
        private string _sha;
        private Stats _stats;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author Author
        {
            get { return _author; }
            set 
            {
                if (_author != value)
                {
                    _author = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Commit1 Commit1
        {
            get { return _commit1; }
            set 
            {
                if (_commit1 != value)
                {
                    _commit1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("committer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Committer Committer
        {
            get { return _committer; }
            set 
            {
                if (_committer != value)
                {
                    _committer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous31> Files
        {
            get { return _files; }
            set 
            {
                if (_files != value)
                {
                    _files = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous32> Parents
        {
            get { return _parents; }
            set 
            {
                if (_parents != value)
                {
                    _parents = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stats Stats
        {
            get { return _stats; }
            set 
            {
                if (_stats != value)
                {
                    _stats = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Commit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Commit>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class CommitBody : System.ComponentModel.INotifyPropertyChanged
    {
        private string _body;
        private string _line;
        private string _number;
        private string _path;
        private int? _position;
        private string _sha;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Deprecated - Use position parameter instead.</summary>
        [Newtonsoft.Json.JsonProperty("line", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line
        {
            get { return _line; }
            set 
            {
                if (_line != value)
                {
                    _line = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Line number in the file to comment on. Defaults to null.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Relative path of the file to comment on.</summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path
        {
            get { return _path; }
            set 
            {
                if (_path != value)
                {
                    _path = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Line index in the diff to comment on.</summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Position
        {
            get { return _position; }
            set 
            {
                if (_position != value)
                {
                    _position = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>SHA of the commit to comment on.</summary>
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CommitBody FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommitBody>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class CommitComments : System.ComponentModel.INotifyPropertyChanged
    {
        private string _body;
        private string _commit_id;
        private string _created_at;
        private string _html_url;
        private int? _id;
        private int? _line;
        private string _path;
        private int? _position;
        private string _updated_at;
        private string _url;
        private User2 _user;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commit_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commit_id
        {
            get { return _commit_id; }
            set 
            {
                if (_commit_id != value)
                {
                    _commit_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("line", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Line
        {
            get { return _line; }
            set 
            {
                if (_line != value)
                {
                    _line = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path
        {
            get { return _path; }
            set 
            {
                if (_path != value)
                {
                    _path = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Position
        {
            get { return _position; }
            set 
            {
                if (_position != value)
                {
                    _position = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User2 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CommitComments FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommitComments>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class CompareCommits : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _ahead_by;
        private Base_commit _base_commit;
        private int? _behind_by;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous33> _commits;
        private string _diff_url;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous34> _files;
        private string _html_url;
        private string _patch_url;
        private string _permalink_url;
        private string _status;
        private int? _total_commits;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("ahead_by", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Ahead_by
        {
            get { return _ahead_by; }
            set 
            {
                if (_ahead_by != value)
                {
                    _ahead_by = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("base_commit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Base_commit Base_commit
        {
            get { return _base_commit; }
            set 
            {
                if (_base_commit != value)
                {
                    _base_commit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("behind_by", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Behind_by
        {
            get { return _behind_by; }
            set 
            {
                if (_behind_by != value)
                {
                    _behind_by = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous33> Commits
        {
            get { return _commits; }
            set 
            {
                if (_commits != value)
                {
                    _commits = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("diff_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Diff_url
        {
            get { return _diff_url; }
            set 
            {
                if (_diff_url != value)
                {
                    _diff_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous34> Files
        {
            get { return _files; }
            set 
            {
                if (_files != value)
                {
                    _files = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("patch_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patch_url
        {
            get { return _patch_url; }
            set 
            {
                if (_patch_url != value)
                {
                    _patch_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("permalink_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Permalink_url
        {
            get { return _permalink_url; }
            set 
            {
                if (_permalink_url != value)
                {
                    _permalink_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("total_commits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total_commits
        {
            get { return _total_commits; }
            set 
            {
                if (_total_commits != value)
                {
                    _total_commits = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CompareCommits FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompareCommits>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class ContentsPath : System.ComponentModel.INotifyPropertyChanged
    {
        private _links2 __links;
        private string _content;
        private string _encoding;
        private string _git_url;
        private string _html_url;
        private string _name;
        private string _path;
        private string _sha;
        private int? _size;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public _links2 _links
        {
            get { return __links; }
            set 
            {
                if (__links != value)
                {
                    __links = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content
        {
            get { return _content; }
            set 
            {
                if (_content != value)
                {
                    _content = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("encoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Encoding
        {
            get { return _encoding; }
            set 
            {
                if (_encoding != value)
                {
                    _encoding = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_url
        {
            get { return _git_url; }
            set 
            {
                if (_git_url != value)
                {
                    _git_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path
        {
            get { return _path; }
            set 
            {
                if (_path != value)
                {
                    _path = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentsPath FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentsPath>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class CreateDownload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _accesskeyid;
        private string _acl;
        private string _bucket;
        private string _content_type;
        private string _description;
        private int? _download_count;
        private string _expirationdate;
        private string _html_url;
        private int? _id;
        private string _mime_type;
        private string _name;
        private string _path;
        private string _policy;
        private string _prefix;
        private bool? _redirect;
        private string _s3_url;
        private string _signature;
        private int? _size;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("accesskeyid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Accesskeyid
        {
            get { return _accesskeyid; }
            set 
            {
                if (_accesskeyid != value)
                {
                    _accesskeyid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("acl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Acl
        {
            get { return _acl; }
            set 
            {
                if (_acl != value)
                {
                    _acl = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("bucket", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bucket
        {
            get { return _bucket; }
            set 
            {
                if (_bucket != value)
                {
                    _bucket = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("content_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content_type
        {
            get { return _content_type; }
            set 
            {
                if (_content_type != value)
                {
                    _content_type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("download_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Download_count
        {
            get { return _download_count; }
            set 
            {
                if (_download_count != value)
                {
                    _download_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("expirationdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expirationdate
        {
            get { return _expirationdate; }
            set 
            {
                if (_expirationdate != value)
                {
                    _expirationdate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mime_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mime_type
        {
            get { return _mime_type; }
            set 
            {
                if (_mime_type != value)
                {
                    _mime_type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path
        {
            get { return _path; }
            set 
            {
                if (_path != value)
                {
                    _path = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("policy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Policy
        {
            get { return _policy; }
            set 
            {
                if (_policy != value)
                {
                    _policy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("prefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prefix
        {
            get { return _prefix; }
            set 
            {
                if (_prefix != value)
                {
                    _prefix = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("redirect", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redirect
        {
            get { return _redirect; }
            set 
            {
                if (_redirect != value)
                {
                    _redirect = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("s3_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string S3_url
        {
            get { return _s3_url; }
            set 
            {
                if (_s3_url != value)
                {
                    _s3_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("signature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Signature
        {
            get { return _signature; }
            set 
            {
                if (_signature != value)
                {
                    _signature = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateDownload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateDownload>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class CreateFile : System.ComponentModel.INotifyPropertyChanged
    {
        private Commit3 _commit;
        private Content _content;
    
        [Newtonsoft.Json.JsonProperty("commit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Commit3 Commit
        {
            get { return _commit; }
            set 
            {
                if (_commit != value)
                {
                    _commit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Content Content
        {
            get { return _content; }
            set 
            {
                if (_content != value)
                {
                    _content = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateFile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateFile>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class CreateFileBody : System.ComponentModel.INotifyPropertyChanged
    {
        private Committer2 _committer;
        private string _content;
        private string _message;
    
        [Newtonsoft.Json.JsonProperty("committer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Committer2 Committer
        {
            get { return _committer; }
            set 
            {
                if (_committer != value)
                {
                    _committer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content
        {
            get { return _content; }
            set 
            {
                if (_content != value)
                {
                    _content = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateFileBody FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateFileBody>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class DeleteFile : System.ComponentModel.INotifyPropertyChanged
    {
        private Commit4 _commit;
        private string _content;
    
        [Newtonsoft.Json.JsonProperty("commit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Commit4 Commit
        {
            get { return _commit; }
            set 
            {
                if (_commit != value)
                {
                    _commit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content
        {
            get { return _content; }
            set 
            {
                if (_content != value)
                {
                    _content = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DeleteFile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeleteFile>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class DeleteFileBody : System.ComponentModel.INotifyPropertyChanged
    {
        private Committer3 _committer;
        private string _message;
        private string _sha;
    
        [Newtonsoft.Json.JsonProperty("committer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Committer3 Committer
        {
            get { return _committer; }
            set 
            {
                if (_committer != value)
                {
                    _committer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DeleteFileBody FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeleteFileBody>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Deployment : System.ComponentModel.INotifyPropertyChanged
    {
        private string _description;
        private Payload _payload;
        private string _ref;
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Payload Payload
        {
            get { return _payload; }
            set 
            {
                if (_payload != value)
                {
                    _payload = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref
        {
            get { return _ref; }
            set 
            {
                if (_ref != value)
                {
                    _ref = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Deployment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Deployment>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class DeploymentResp : System.ComponentModel.INotifyPropertyChanged
    {
        private string _created_at;
        private Creator _creator;
        private string _description;
        private int? _id;
        private string _payload;
        private string _sha;
        private string _statuses_url;
        private string _updated_at;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creator Creator
        {
            get { return _creator; }
            set 
            {
                if (_creator != value)
                {
                    _creator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payload
        {
            get { return _payload; }
            set 
            {
                if (_payload != value)
                {
                    _payload = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("statuses_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Statuses_url
        {
            get { return _statuses_url; }
            set 
            {
                if (_statuses_url != value)
                {
                    _statuses_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DeploymentResp FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeploymentResp>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class DeploymentStatusesCreate : System.ComponentModel.INotifyPropertyChanged
    {
        private string _description;
        private string _state;
        private string _target_url;
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("target_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target_url
        {
            get { return _target_url; }
            set 
            {
                if (_target_url != value)
                {
                    _target_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DeploymentStatusesCreate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeploymentStatusesCreate>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class DownloadBody : System.ComponentModel.INotifyPropertyChanged
    {
        private string _content_type;
        private string _description;
        private string _name;
        private int _size;
    
        [Newtonsoft.Json.JsonProperty("content_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content_type
        {
            get { return _content_type; }
            set 
            {
                if (_content_type != value)
                {
                    _content_type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Size of file in bytes.</summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Always)]
        public int Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DownloadBody FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadBody>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Downloads : System.ComponentModel.INotifyPropertyChanged
    {
        private string _content_type;
        private string _description;
        private int? _download_count;
        private string _html_url;
        private int? _id;
        private string _name;
        private int? _size;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("content_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content_type
        {
            get { return _content_type; }
            set 
            {
                if (_content_type != value)
                {
                    _content_type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("download_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Download_count
        {
            get { return _download_count; }
            set 
            {
                if (_download_count != value)
                {
                    _download_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Downloads FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Downloads>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class EditTeam : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private EditTeamPermission? _permission;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EditTeamPermission? Permission
        {
            get { return _permission; }
            set 
            {
                if (_permission != value)
                {
                    _permission = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EditTeam FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EditTeam>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Emojis : System.ComponentModel.INotifyPropertyChanged
    {
        private string __100;
        private string __1234;
        private string _plus1;
        private string __1;
        private string __8ball;
        private string _a;
        private string _ab;
    
        [Newtonsoft.Json.JsonProperty("100", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _100
        {
            get { return __100; }
            set 
            {
                if (__100 != value)
                {
                    __100 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("1234", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _1234
        {
            get { return __1234; }
            set 
            {
                if (__1234 != value)
                {
                    __1234 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("+1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Plus1
        {
            get { return _plus1; }
            set 
            {
                if (_plus1 != value)
                {
                    _plus1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("-1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _1
        {
            get { return __1; }
            set 
            {
                if (__1 != value)
                {
                    __1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("8ball", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _8ball
        {
            get { return __8ball; }
            set 
            {
                if (__8ball != value)
                {
                    __8ball = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("a", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string A
        {
            get { return _a; }
            set 
            {
                if (_a != value)
                {
                    _a = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ab", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ab
        {
            get { return _ab; }
            set 
            {
                if (_ab != value)
                {
                    _ab = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Emojis FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Emojis>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Event : System.ComponentModel.INotifyPropertyChanged
    {
        private Actor _actor;
        private string _commit_id;
        private string _created_at;
        private string _event1;
        private Issue2 _issue;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("actor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Actor Actor
        {
            get { return _actor; }
            set 
            {
                if (_actor != value)
                {
                    _actor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commit_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commit_id
        {
            get { return _commit_id; }
            set 
            {
                if (_commit_id != value)
                {
                    _commit_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Event1
        {
            get { return _event1; }
            set 
            {
                if (_event1 != value)
                {
                    _event1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("issue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Issue2 Issue
        {
            get { return _issue; }
            set 
            {
                if (_issue != value)
                {
                    _issue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Event FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Event>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Events : System.ComponentModel.INotifyPropertyChanged
    {
        private Actor2 _actor;
        private object _created_at;
        private int? _id;
        private Org _org;
        private object _payload;
        private bool? _public;
        private Repo2 _repo;
        private string _type;
    
        [Newtonsoft.Json.JsonProperty("actor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Actor2 Actor
        {
            get { return _actor; }
            set 
            {
                if (_actor != value)
                {
                    _actor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("org", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Org Org
        {
            get { return _org; }
            set 
            {
                if (_org != value)
                {
                    _org = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Payload
        {
            get { return _payload; }
            set 
            {
                if (_payload != value)
                {
                    _payload = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("public", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Public
        {
            get { return _public; }
            set 
            {
                if (_public != value)
                {
                    _public = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Repo2 Repo
        {
            get { return _repo; }
            set 
            {
                if (_repo != value)
                {
                    _repo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Events FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Events>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Feeds : System.ComponentModel.INotifyPropertyChanged
    {
        private _links3 __links;
        private string _current_user_actor_url;
        private string _current_user_organization_url;
        private string _current_user_public;
        private string _current_user_url;
        private string _timeline_url;
        private string _user_url;
    
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public _links3 _links
        {
            get { return __links; }
            set 
            {
                if (__links != value)
                {
                    __links = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("current_user_actor_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Current_user_actor_url
        {
            get { return _current_user_actor_url; }
            set 
            {
                if (_current_user_actor_url != value)
                {
                    _current_user_actor_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("current_user_organization_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Current_user_organization_url
        {
            get { return _current_user_organization_url; }
            set 
            {
                if (_current_user_organization_url != value)
                {
                    _current_user_organization_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("current_user_public", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Current_user_public
        {
            get { return _current_user_public; }
            set 
            {
                if (_current_user_public != value)
                {
                    _current_user_public = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("current_user_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Current_user_url
        {
            get { return _current_user_url; }
            set 
            {
                if (_current_user_url != value)
                {
                    _current_user_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("timeline_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timeline_url
        {
            get { return _timeline_url; }
            set 
            {
                if (_timeline_url != value)
                {
                    _timeline_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_url
        {
            get { return _user_url; }
            set 
            {
                if (_user_url != value)
                {
                    _user_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Feeds FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Feeds>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Fork : System.ComponentModel.INotifyPropertyChanged
    {
        private string _clone_url;
        private string _created_at;
        private string _description;
        private bool? _fork1;
        private int? _forks;
        private int? _forks_count;
        private string _full_name;
        private string _git_url;
        private string _homepage;
        private string _html_url;
        private int? _id;
        private string _language;
        private string _master_branch;
        private string _mirror_url;
        private string _name;
        private int? _open_issues;
        private int? _open_issues_count;
        private Owner _owner;
        private bool? _private;
        private string _pushed_at;
        private int? _size;
        private string _ssh_url;
        private string _svn_url;
        private string _updated_at;
        private string _url;
        private int? _watchers;
        private int? _watchers_count;
    
        [Newtonsoft.Json.JsonProperty("clone_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Clone_url
        {
            get { return _clone_url; }
            set 
            {
                if (_clone_url != value)
                {
                    _clone_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fork1
        {
            get { return _fork1; }
            set 
            {
                if (_fork1 != value)
                {
                    _fork1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks
        {
            get { return _forks; }
            set 
            {
                if (_forks != value)
                {
                    _forks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks_count
        {
            get { return _forks_count; }
            set 
            {
                if (_forks_count != value)
                {
                    _forks_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name
        {
            get { return _full_name; }
            set 
            {
                if (_full_name != value)
                {
                    _full_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_url
        {
            get { return _git_url; }
            set 
            {
                if (_git_url != value)
                {
                    _git_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Homepage
        {
            get { return _homepage; }
            set 
            {
                if (_homepage != value)
                {
                    _homepage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("master_branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Master_branch
        {
            get { return _master_branch; }
            set 
            {
                if (_master_branch != value)
                {
                    _master_branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mirror_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mirror_url
        {
            get { return _mirror_url; }
            set 
            {
                if (_mirror_url != value)
                {
                    _mirror_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues
        {
            get { return _open_issues; }
            set 
            {
                if (_open_issues != value)
                {
                    _open_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues_count
        {
            get { return _open_issues_count; }
            set 
            {
                if (_open_issues_count != value)
                {
                    _open_issues_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Owner Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Private
        {
            get { return _private; }
            set 
            {
                if (_private != value)
                {
                    _private = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("pushed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pushed_at
        {
            get { return _pushed_at; }
            set 
            {
                if (_pushed_at != value)
                {
                    _pushed_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ssh_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ssh_url
        {
            get { return _ssh_url; }
            set 
            {
                if (_ssh_url != value)
                {
                    _ssh_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("svn_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Svn_url
        {
            get { return _svn_url; }
            set 
            {
                if (_svn_url != value)
                {
                    _svn_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers
        {
            get { return _watchers; }
            set 
            {
                if (_watchers != value)
                {
                    _watchers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers_count
        {
            get { return _watchers_count; }
            set 
            {
                if (_watchers_count != value)
                {
                    _watchers_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Fork FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Fork>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class ForkBody : System.ComponentModel.INotifyPropertyChanged
    {
        private string _organization;
    
        [Newtonsoft.Json.JsonProperty("organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organization
        {
            get { return _organization; }
            set 
            {
                if (_organization != value)
                {
                    _organization = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ForkBody FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ForkBody>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Gist : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _comments;
        private string _comments_url;
        private string _created_at;
        private string _description;
        private Files _files;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous35> _forks;
        private string _git_pull_url;
        private string _git_push_url;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous36> _history;
        private string _html_url;
        private string _id;
        private bool? _public;
        private string _url;
        private User3 _user;
    
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Comments
        {
            get { return _comments; }
            set 
            {
                if (_comments != value)
                {
                    _comments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("comments_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments_url
        {
            get { return _comments_url; }
            set 
            {
                if (_comments_url != value)
                {
                    _comments_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Files Files
        {
            get { return _files; }
            set 
            {
                if (_files != value)
                {
                    _files = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous35> Forks
        {
            get { return _forks; }
            set 
            {
                if (_forks != value)
                {
                    _forks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_pull_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_pull_url
        {
            get { return _git_pull_url; }
            set 
            {
                if (_git_pull_url != value)
                {
                    _git_pull_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_push_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_push_url
        {
            get { return _git_push_url; }
            set 
            {
                if (_git_push_url != value)
                {
                    _git_push_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("history", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous36> History
        {
            get { return _history; }
            set 
            {
                if (_history != value)
                {
                    _history = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("public", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Public
        {
            get { return _public; }
            set 
            {
                if (_public != value)
                {
                    _public = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User3 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Gist FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Gist>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class GitCommit : System.ComponentModel.INotifyPropertyChanged
    {
        private Author2 _author;
        private string _message;
        private string _parents;
        private string _tree;
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author2 Author
        {
            get { return _author; }
            set 
            {
                if (_author != value)
                {
                    _author = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parents
        {
            get { return _parents; }
            set 
            {
                if (_parents != value)
                {
                    _parents = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tree", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tree
        {
            get { return _tree; }
            set 
            {
                if (_tree != value)
                {
                    _tree = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GitCommit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GitCommit>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class GitRefPatch : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _force;
        private string _sha;
    
        [Newtonsoft.Json.JsonProperty("force", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Force
        {
            get { return _force; }
            set 
            {
                if (_force != value)
                {
                    _force = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GitRefPatch FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GitRefPatch>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class GitignoreLang : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _source;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source
        {
            get { return _source; }
            set 
            {
                if (_source != value)
                {
                    _source = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GitignoreLang FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GitignoreLang>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class HeadBranch : System.ComponentModel.INotifyPropertyChanged
    {
        private Object _object;
        private string _ref;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("object", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Object Object
        {
            get { return _object; }
            set 
            {
                if (_object != value)
                {
                    _object = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref
        {
            get { return _ref; }
            set 
            {
                if (_ref != value)
                {
                    _ref = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static HeadBranch FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HeadBranch>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class HeadBranchBody : System.ComponentModel.INotifyPropertyChanged
    {
        private bool _force;
        private string _sha;
    
        /// <summary>Boolean indicating whether to force the update or to make sure the update is a fast-forward update. The default is false, so leaving this out or setting it to false will make sure you’re not overwriting work.</summary>
        [Newtonsoft.Json.JsonProperty("force", Required = Newtonsoft.Json.Required.Always)]
        public bool Force
        {
            get { return _force; }
            set 
            {
                if (_force != value)
                {
                    _force = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>String of the SHA1 value to set this reference to.</summary>
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static HeadBranchBody FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HeadBranchBody>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class HookBody : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _active;
        private System.Collections.ObjectModel.ObservableCollection<string> _add_events;
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active
        {
            get { return _active; }
            set 
            {
                if (_active != value)
                {
                    _active = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("add_events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Add_events
        {
            get { return _add_events; }
            set 
            {
                if (_add_events != value)
                {
                    _add_events = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static HookBody FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HookBody>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Issue : System.ComponentModel.INotifyPropertyChanged
    {
        private string _assignee;
        private string _body;
        private System.Collections.ObjectModel.ObservableCollection<string> _labels;
        private double? _milestone;
        private string _title;
    
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee
        {
            get { return _assignee; }
            set 
            {
                if (_assignee != value)
                {
                    _assignee = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Labels
        {
            get { return _labels; }
            set 
            {
                if (_labels != value)
                {
                    _labels = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("milestone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Milestone
        {
            get { return _milestone; }
            set 
            {
                if (_milestone != value)
                {
                    _milestone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Issue FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Issue>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class IssueBody : System.ComponentModel.INotifyPropertyChanged
    {
        private string _assignee;
        private string _body;
        private System.Collections.ObjectModel.ObservableCollection<string> _labels;
        private double? _milestone;
        private string _title;
    
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee
        {
            get { return _assignee; }
            set 
            {
                if (_assignee != value)
                {
                    _assignee = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Labels
        {
            get { return _labels; }
            set 
            {
                if (_labels != value)
                {
                    _labels = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("milestone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Milestone
        {
            get { return _milestone; }
            set 
            {
                if (_milestone != value)
                {
                    _milestone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IssueBody FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueBody>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class IssuesComment : System.ComponentModel.INotifyPropertyChanged
    {
        private string _body;
        private string _created_at;
        private string _html_url;
        private int? _id;
        private string _updated_at;
        private string _url;
        private User4 _user;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User4 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IssuesComment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssuesComment>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Key : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private string _key1;
        private string _title;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key1
        {
            get { return _key1; }
            set 
            {
                if (_key1 != value)
                {
                    _key1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Key FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Key>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class KeyBody : System.ComponentModel.INotifyPropertyChanged
    {
        private string _key;
        private string _title;
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key
        {
            get { return _key; }
            set 
            {
                if (_key != value)
                {
                    _key = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static KeyBody FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<KeyBody>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Label : System.ComponentModel.INotifyPropertyChanged
    {
        private string _color;
        private string _name;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 6)]
        public string Color
        {
            get { return _color; }
            set 
            {
                if (_color != value)
                {
                    _color = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Label FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Label>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Markdown : System.ComponentModel.INotifyPropertyChanged
    {
        private string _context;
        private string _mode;
        private string _text;
    
        [Newtonsoft.Json.JsonProperty("context", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context
        {
            get { return _context; }
            set 
            {
                if (_context != value)
                {
                    _context = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mode
        {
            get { return _mode; }
            set 
            {
                if (_mode != value)
                {
                    _mode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text
        {
            get { return _text; }
            set 
            {
                if (_text != value)
                {
                    _text = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Markdown FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Markdown>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Merge : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _merged;
        private string _message;
        private string _sha;
    
        [Newtonsoft.Json.JsonProperty("merged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Merged
        {
            get { return _merged; }
            set 
            {
                if (_merged != value)
                {
                    _merged = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Merge FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Merge>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class MergePullBody : System.ComponentModel.INotifyPropertyChanged
    {
        private string _commit_message;
    
        [Newtonsoft.Json.JsonProperty("commit_message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commit_message
        {
            get { return _commit_message; }
            set 
            {
                if (_commit_message != value)
                {
                    _commit_message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MergePullBody FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MergePullBody>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class MergesBody : System.ComponentModel.INotifyPropertyChanged
    {
        private string _base;
        private string _commit_message;
        private string _head;
    
        [Newtonsoft.Json.JsonProperty("base", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Base
        {
            get { return _base; }
            set 
            {
                if (_base != value)
                {
                    _base = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commit_message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commit_message
        {
            get { return _commit_message; }
            set 
            {
                if (_commit_message != value)
                {
                    _commit_message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("head", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Head
        {
            get { return _head; }
            set 
            {
                if (_head != value)
                {
                    _head = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MergesBody FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MergesBody>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class MergesConflict : System.ComponentModel.INotifyPropertyChanged
    {
        private string _message;
    
        /// <summary>Error message</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MergesConflict FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MergesConflict>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class MergesSuccessful : System.ComponentModel.INotifyPropertyChanged
    {
        private Author3 _author;
        private string _comments_url;
        private Commit5 _commit;
        private Committer4 _committer;
        private bool? _merged;
        private string _message;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous37> _parents;
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author3 Author
        {
            get { return _author; }
            set 
            {
                if (_author != value)
                {
                    _author = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("comments_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments_url
        {
            get { return _comments_url; }
            set 
            {
                if (_comments_url != value)
                {
                    _comments_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Commit5 Commit
        {
            get { return _commit; }
            set 
            {
                if (_commit != value)
                {
                    _commit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("committer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Committer4 Committer
        {
            get { return _committer; }
            set 
            {
                if (_committer != value)
                {
                    _committer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("merged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Merged
        {
            get { return _merged; }
            set 
            {
                if (_merged != value)
                {
                    _merged = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous37> Parents
        {
            get { return _parents; }
            set 
            {
                if (_parents != value)
                {
                    _parents = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MergesSuccessful FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MergesSuccessful>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Meta : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<string> _git;
        private System.Collections.ObjectModel.ObservableCollection<string> _hooks;
    
        [Newtonsoft.Json.JsonProperty("git", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Git
        {
            get { return _git; }
            set 
            {
                if (_git != value)
                {
                    _git = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hooks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Hooks
        {
            get { return _hooks; }
            set 
            {
                if (_hooks != value)
                {
                    _hooks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Meta FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Meta>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Milestone : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _closed_issues;
        private string _created_at;
        private Creator2 _creator;
        private string _description;
        private string _due_on;
        private int? _number;
        private int? _open_issues;
        private MilestoneState? _state;
        private string _title;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("closed_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Closed_issues
        {
            get { return _closed_issues; }
            set 
            {
                if (_closed_issues != value)
                {
                    _closed_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creator2 Creator
        {
            get { return _creator; }
            set 
            {
                if (_creator != value)
                {
                    _creator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("due_on", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Due_on
        {
            get { return _due_on; }
            set 
            {
                if (_due_on != value)
                {
                    _due_on = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues
        {
            get { return _open_issues; }
            set 
            {
                if (_open_issues != value)
                {
                    _open_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MilestoneState? State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Milestone FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Milestone>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class MilestoneBody : System.ComponentModel.INotifyPropertyChanged
    {
        private string _description;
        private string _due_on;
        private string _state;
        private string _title;
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("due_on", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Due_on
        {
            get { return _due_on; }
            set 
            {
                if (_due_on != value)
                {
                    _due_on = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MilestoneBody FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MilestoneBody>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class MilestoneUpdate : System.ComponentModel.INotifyPropertyChanged
    {
        private string _description;
        private string _due_on;
        private string _state;
        private string _title;
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("due_on", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Due_on
        {
            get { return _due_on; }
            set 
            {
                if (_due_on != value)
                {
                    _due_on = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MilestoneUpdate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MilestoneUpdate>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class NotificationMarkRead : System.ComponentModel.INotifyPropertyChanged
    {
        private string _last_read_at;
    
        [Newtonsoft.Json.JsonProperty("last_read_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_read_at
        {
            get { return _last_read_at; }
            set 
            {
                if (_last_read_at != value)
                {
                    _last_read_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotificationMarkRead FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationMarkRead>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Notifications : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private string _last_read_at;
        private string _reason;
        private Repository _repository;
        private Subject _subject;
        private bool? _unread;
        private string _updated_at;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("last_read_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_read_at
        {
            get { return _last_read_at; }
            set 
            {
                if (_last_read_at != value)
                {
                    _last_read_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason
        {
            get { return _reason; }
            set 
            {
                if (_reason != value)
                {
                    _reason = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repository", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Repository Repository
        {
            get { return _repository; }
            set 
            {
                if (_repository != value)
                {
                    _repository = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Subject Subject
        {
            get { return _subject; }
            set 
            {
                if (_subject != value)
                {
                    _subject = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("unread", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Unread
        {
            get { return _unread; }
            set 
            {
                if (_unread != value)
                {
                    _unread = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Notifications FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Notifications>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class OrgTeamsPost : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private OrgTeamsPostPermission? _permission;
        private System.Collections.ObjectModel.ObservableCollection<string> _repo_names;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrgTeamsPostPermission? Permission
        {
            get { return _permission; }
            set 
            {
                if (_permission != value)
                {
                    _permission = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repo_names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Repo_names
        {
            get { return _repo_names; }
            set 
            {
                if (_repo_names != value)
                {
                    _repo_names = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrgTeamsPost FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrgTeamsPost>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Organization : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _blog;
        private string _company;
        private string _created_at;
        private string _email;
        private int? _followers;
        private int? _following;
        private string _html_url;
        private int? _id;
        private string _location;
        private string _login;
        private string _name;
        private int? _public_gists;
        private int? _public_repos;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("blog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Blog
        {
            get { return _blog; }
            set 
            {
                if (_blog != value)
                {
                    _blog = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company
        {
            get { return _company; }
            set 
            {
                if (_company != value)
                {
                    _company = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Followers
        {
            get { return _followers; }
            set 
            {
                if (_followers != value)
                {
                    _followers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Following
        {
            get { return _following; }
            set 
            {
                if (_following != value)
                {
                    _following = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("public_gists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Public_gists
        {
            get { return _public_gists; }
            set 
            {
                if (_public_gists != value)
                {
                    _public_gists = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("public_repos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Public_repos
        {
            get { return _public_repos; }
            set 
            {
                if (_public_repos != value)
                {
                    _public_repos = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Organization FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Organization>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class OrganizationAsTeamMember : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Anonymous38> _errors;
        private string _message;
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous38> Errors
        {
            get { return _errors; }
            set 
            {
                if (_errors != value)
                {
                    _errors = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrganizationAsTeamMember FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrganizationAsTeamMember>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class ParticipationStats : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<int> _all;
        private System.Collections.ObjectModel.ObservableCollection<int> _owner;
    
        [Newtonsoft.Json.JsonProperty("all", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> All
        {
            get { return _all; }
            set 
            {
                if (_all != value)
                {
                    _all = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParticipationStats FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParticipationStats>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class PatchGist : System.ComponentModel.INotifyPropertyChanged
    {
        private string _description;
        private Files2 _files;
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Files2 Files
        {
            get { return _files; }
            set 
            {
                if (_files != value)
                {
                    _files = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PatchGist FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PatchGist>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class PatchOrg : System.ComponentModel.INotifyPropertyChanged
    {
        private string _billing_email;
        private string _company;
        private string _email;
        private string _location;
        private string _name;
    
        /// <summary>Billing email address. This address is not publicized.</summary>
        [Newtonsoft.Json.JsonProperty("billing_email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Billing_email
        {
            get { return _billing_email; }
            set 
            {
                if (_billing_email != value)
                {
                    _billing_email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company
        {
            get { return _company; }
            set 
            {
                if (_company != value)
                {
                    _company = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Publicly visible email address.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PatchOrg FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PatchOrg>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class PostComment : System.ComponentModel.INotifyPropertyChanged
    {
        private string _body;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PostComment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostComment>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class PostGist : System.ComponentModel.INotifyPropertyChanged
    {
        private string _description;
        private Files3 _files;
        private bool? _public;
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Files3 Files
        {
            get { return _files; }
            set 
            {
                if (_files != value)
                {
                    _files = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("public", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Public
        {
            get { return _public; }
            set 
            {
                if (_public != value)
                {
                    _public = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PostGist FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostGist>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class PostRepo : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _auto_init;
        private string _description;
        private string _gitignore_template;
        private bool? _has_downloads;
        private bool? _has_issues;
        private bool? _has_wiki;
        private string _homepage;
        private string _name;
        private bool? _private;
        private int? _team_id;
    
        /// <summary>True to create an initial commit with empty README. Default is false.</summary>
        [Newtonsoft.Json.JsonProperty("auto_init", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Auto_init
        {
            get { return _auto_init; }
            set 
            {
                if (_auto_init != value)
                {
                    _auto_init = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Desired language or platform .gitignore template to apply. Use the name of the template without the extension. For example, "Haskell" Ignored if auto_init parameter is not provided. </summary>
        [Newtonsoft.Json.JsonProperty("gitignore_template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gitignore_template
        {
            get { return _gitignore_template; }
            set 
            {
                if (_gitignore_template != value)
                {
                    _gitignore_template = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>True to enable downloads for this repository, false to disable them. Default is true.</summary>
        [Newtonsoft.Json.JsonProperty("has_downloads", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Has_downloads
        {
            get { return _has_downloads; }
            set 
            {
                if (_has_downloads != value)
                {
                    _has_downloads = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>True to enable issues for this repository, false to disable them. Default is true.</summary>
        [Newtonsoft.Json.JsonProperty("has_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Has_issues
        {
            get { return _has_issues; }
            set 
            {
                if (_has_issues != value)
                {
                    _has_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>True to enable the wiki for this repository, false to disable it. Default is true.</summary>
        [Newtonsoft.Json.JsonProperty("has_wiki", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Has_wiki
        {
            get { return _has_wiki; }
            set 
            {
                if (_has_wiki != value)
                {
                    _has_wiki = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Homepage
        {
            get { return _homepage; }
            set 
            {
                if (_homepage != value)
                {
                    _homepage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>True to create a private repository, false to create a public one. Creating private repositories requires a paid GitHub account.</summary>
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Private
        {
            get { return _private; }
            set 
            {
                if (_private != value)
                {
                    _private = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the team that will be granted access to this repository. This is only valid when creating a repo in an organization.</summary>
        [Newtonsoft.Json.JsonProperty("team_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Team_id
        {
            get { return _team_id; }
            set 
            {
                if (_team_id != value)
                {
                    _team_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PostRepo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostRepo>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class PullRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private _links4 __links;
        private int? _additions;
        private Base _base;
        private string _body;
        private int? _changed_files;
        private string _closed_at;
        private int? _comments;
        private int? _commits;
        private string _created_at;
        private int? _deletions;
        private string _diff_url;
        private Head _head;
        private string _html_url;
        private string _issue_url;
        private string _merge_commit_sha;
        private bool? _mergeable;
        private bool? _merged;
        private string _merged_at;
        private Merged_by _merged_by;
        private int? _number;
        private string _patch_url;
        private string _state;
        private string _title;
        private string _updated_at;
        private string _url;
        private User5 _user;
    
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public _links4 _links
        {
            get { return __links; }
            set 
            {
                if (__links != value)
                {
                    __links = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("additions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Additions
        {
            get { return _additions; }
            set 
            {
                if (_additions != value)
                {
                    _additions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("base", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Base Base
        {
            get { return _base; }
            set 
            {
                if (_base != value)
                {
                    _base = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("changed_files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Changed_files
        {
            get { return _changed_files; }
            set 
            {
                if (_changed_files != value)
                {
                    _changed_files = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("closed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Closed_at
        {
            get { return _closed_at; }
            set 
            {
                if (_closed_at != value)
                {
                    _closed_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Comments
        {
            get { return _comments; }
            set 
            {
                if (_comments != value)
                {
                    _comments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Commits
        {
            get { return _commits; }
            set 
            {
                if (_commits != value)
                {
                    _commits = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deletions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Deletions
        {
            get { return _deletions; }
            set 
            {
                if (_deletions != value)
                {
                    _deletions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("diff_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Diff_url
        {
            get { return _diff_url; }
            set 
            {
                if (_diff_url != value)
                {
                    _diff_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("head", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Head Head
        {
            get { return _head; }
            set 
            {
                if (_head != value)
                {
                    _head = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("issue_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Issue_url
        {
            get { return _issue_url; }
            set 
            {
                if (_issue_url != value)
                {
                    _issue_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("merge_commit_sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Merge_commit_sha
        {
            get { return _merge_commit_sha; }
            set 
            {
                if (_merge_commit_sha != value)
                {
                    _merge_commit_sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mergeable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Mergeable
        {
            get { return _mergeable; }
            set 
            {
                if (_mergeable != value)
                {
                    _mergeable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("merged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Merged
        {
            get { return _merged; }
            set 
            {
                if (_merged != value)
                {
                    _merged = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("merged_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Merged_at
        {
            get { return _merged_at; }
            set 
            {
                if (_merged_at != value)
                {
                    _merged_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("merged_by", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Merged_by Merged_by
        {
            get { return _merged_by; }
            set 
            {
                if (_merged_by != value)
                {
                    _merged_by = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("patch_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patch_url
        {
            get { return _patch_url; }
            set 
            {
                if (_patch_url != value)
                {
                    _patch_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User5 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PullRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PullRequest>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class PullUpdate : System.ComponentModel.INotifyPropertyChanged
    {
        private string _body;
        private string _state;
        private string _title;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PullUpdate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PullUpdate>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class PullsComment : System.ComponentModel.INotifyPropertyChanged
    {
        private _links5 __links;
        private string _body;
        private string _commit_id;
        private string _created_at;
        private int? _id;
        private string _path;
        private int? _position;
        private string _updated_at;
        private string _url;
        private User6 _user;
    
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public _links5 _links
        {
            get { return __links; }
            set 
            {
                if (__links != value)
                {
                    __links = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commit_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commit_id
        {
            get { return _commit_id; }
            set 
            {
                if (_commit_id != value)
                {
                    _commit_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path
        {
            get { return _path; }
            set 
            {
                if (_path != value)
                {
                    _path = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Position
        {
            get { return _position; }
            set 
            {
                if (_position != value)
                {
                    _position = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User6 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PullsComment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PullsComment>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class PullsCommentPost : System.ComponentModel.INotifyPropertyChanged
    {
        private string _body;
        private string _commit_id;
        private string _path;
        private double? _position;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commit_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commit_id
        {
            get { return _commit_id; }
            set 
            {
                if (_commit_id != value)
                {
                    _commit_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path
        {
            get { return _path; }
            set 
            {
                if (_path != value)
                {
                    _path = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Position
        {
            get { return _position; }
            set 
            {
                if (_position != value)
                {
                    _position = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PullsCommentPost FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PullsCommentPost>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class PullsPost : System.ComponentModel.INotifyPropertyChanged
    {
        private string _base;
        private string _body;
        private string _head;
        private string _title;
    
        [Newtonsoft.Json.JsonProperty("base", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Base
        {
            get { return _base; }
            set 
            {
                if (_base != value)
                {
                    _base = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("head", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Head
        {
            get { return _head; }
            set 
            {
                if (_head != value)
                {
                    _head = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PullsPost FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PullsPost>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class PutSubscription : System.ComponentModel.INotifyPropertyChanged
    {
        private string _created_at;
        private bool? _ignored;
        private object _reason;
        private bool? _subscribed;
        private string _thread_url;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ignored", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Ignored
        {
            get { return _ignored; }
            set 
            {
                if (_ignored != value)
                {
                    _ignored = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Reason
        {
            get { return _reason; }
            set 
            {
                if (_reason != value)
                {
                    _reason = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscribed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Subscribed
        {
            get { return _subscribed; }
            set 
            {
                if (_subscribed != value)
                {
                    _subscribed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("thread_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thread_url
        {
            get { return _thread_url; }
            set 
            {
                if (_thread_url != value)
                {
                    _thread_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PutSubscription FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PutSubscription>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Rate_limit : System.ComponentModel.INotifyPropertyChanged
    {
        private Rate _rate;
    
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rate Rate
        {
            get { return _rate; }
            set 
            {
                if (_rate != value)
                {
                    _rate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Rate_limit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Rate_limit>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Readme : System.ComponentModel.INotifyPropertyChanged
    {
        private _links6 __links;
        private string _content;
        private string _encoding;
        private string _git_url;
        private string _html_url;
        private string _name;
        private string _path;
        private string _sha;
        private int? _size;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public _links6 _links
        {
            get { return __links; }
            set 
            {
                if (__links != value)
                {
                    __links = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content
        {
            get { return _content; }
            set 
            {
                if (_content != value)
                {
                    _content = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("encoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Encoding
        {
            get { return _encoding; }
            set 
            {
                if (_encoding != value)
                {
                    _encoding = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_url
        {
            get { return _git_url; }
            set 
            {
                if (_git_url != value)
                {
                    _git_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path
        {
            get { return _path; }
            set 
            {
                if (_path != value)
                {
                    _path = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Readme FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Readme>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class RefBody : System.ComponentModel.INotifyPropertyChanged
    {
        private Object2 _object;
        private string _ref;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("object", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Object2 Object
        {
            get { return _object; }
            set 
            {
                if (_object != value)
                {
                    _object = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref
        {
            get { return _ref; }
            set 
            {
                if (_ref != value)
                {
                    _ref = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RefBody FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RefBody>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class RefsBody : System.ComponentModel.INotifyPropertyChanged
    {
        private string _ref;
        private string _sha;
    
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref
        {
            get { return _ref; }
            set 
            {
                if (_ref != value)
                {
                    _ref = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RefsBody FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RefsBody>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Release : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Anonymous39> _assets;
        private string _assets_url;
        private Author4 _author;
        private string _body;
        private string _created_at;
        private bool? _draft;
        private string _html_url;
        private int? _id;
        private string _name;
        private bool? _prerelease;
        private string _published_at;
        private string _tag_name;
        private string _tarball_url;
        private string _target_commitish;
        private string _upload_url;
        private string _url;
        private string _zipball_url;
    
        [Newtonsoft.Json.JsonProperty("assets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous39> Assets
        {
            get { return _assets; }
            set 
            {
                if (_assets != value)
                {
                    _assets = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("assets_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assets_url
        {
            get { return _assets_url; }
            set 
            {
                if (_assets_url != value)
                {
                    _assets_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author4 Author
        {
            get { return _author; }
            set 
            {
                if (_author != value)
                {
                    _author = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("draft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Draft
        {
            get { return _draft; }
            set 
            {
                if (_draft != value)
                {
                    _draft = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("prerelease", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Prerelease
        {
            get { return _prerelease; }
            set 
            {
                if (_prerelease != value)
                {
                    _prerelease = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("published_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Published_at
        {
            get { return _published_at; }
            set 
            {
                if (_published_at != value)
                {
                    _published_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tag_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tag_name
        {
            get { return _tag_name; }
            set 
            {
                if (_tag_name != value)
                {
                    _tag_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tarball_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tarball_url
        {
            get { return _tarball_url; }
            set 
            {
                if (_tarball_url != value)
                {
                    _tarball_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("target_commitish", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target_commitish
        {
            get { return _target_commitish; }
            set 
            {
                if (_target_commitish != value)
                {
                    _target_commitish = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("upload_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Upload_url
        {
            get { return _upload_url; }
            set 
            {
                if (_upload_url != value)
                {
                    _upload_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("zipball_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zipball_url
        {
            get { return _zipball_url; }
            set 
            {
                if (_zipball_url != value)
                {
                    _zipball_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Release FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Release>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class ReleaseCreate : System.ComponentModel.INotifyPropertyChanged
    {
        private string _body;
        private bool? _draft;
        private string _name;
        private bool? _prerelease;
        private string _tag_name;
        private string _target_commitish;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("draft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Draft
        {
            get { return _draft; }
            set 
            {
                if (_draft != value)
                {
                    _draft = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("prerelease", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Prerelease
        {
            get { return _prerelease; }
            set 
            {
                if (_prerelease != value)
                {
                    _prerelease = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tag_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tag_name
        {
            get { return _tag_name; }
            set 
            {
                if (_tag_name != value)
                {
                    _tag_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("target_commitish", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target_commitish
        {
            get { return _target_commitish; }
            set 
            {
                if (_target_commitish != value)
                {
                    _target_commitish = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReleaseCreate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReleaseCreate>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Repo : System.ComponentModel.INotifyPropertyChanged
    {
        private string _clone_url;
        private string _created_at;
        private string _description;
        private bool? _fork;
        private int? _forks;
        private int? _forks_count;
        private string _full_name;
        private string _git_url;
        private bool? _has_downloads;
        private bool? _has_issues;
        private bool? _has_wiki;
        private string _homepage;
        private string _html_url;
        private int? _id;
        private string _language;
        private string _master_branch;
        private string _mirror_url;
        private string _name;
        private int? _open_issues;
        private int? _open_issues_count;
        private Organization2 _organization;
        private Owner2 _owner;
        private Parent _parent;
        private bool? _private;
        private string _pushed_at;
        private int? _size;
        private Source _source;
        private string _ssh_url;
        private string _svn_url;
        private string _updated_at;
        private string _url;
        private int? _watchers;
        private int? _watchers_count;
    
        [Newtonsoft.Json.JsonProperty("clone_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Clone_url
        {
            get { return _clone_url; }
            set 
            {
                if (_clone_url != value)
                {
                    _clone_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fork
        {
            get { return _fork; }
            set 
            {
                if (_fork != value)
                {
                    _fork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks
        {
            get { return _forks; }
            set 
            {
                if (_forks != value)
                {
                    _forks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks_count
        {
            get { return _forks_count; }
            set 
            {
                if (_forks_count != value)
                {
                    _forks_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name
        {
            get { return _full_name; }
            set 
            {
                if (_full_name != value)
                {
                    _full_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_url
        {
            get { return _git_url; }
            set 
            {
                if (_git_url != value)
                {
                    _git_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("has_downloads", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Has_downloads
        {
            get { return _has_downloads; }
            set 
            {
                if (_has_downloads != value)
                {
                    _has_downloads = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("has_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Has_issues
        {
            get { return _has_issues; }
            set 
            {
                if (_has_issues != value)
                {
                    _has_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("has_wiki", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Has_wiki
        {
            get { return _has_wiki; }
            set 
            {
                if (_has_wiki != value)
                {
                    _has_wiki = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Homepage
        {
            get { return _homepage; }
            set 
            {
                if (_homepage != value)
                {
                    _homepage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("master_branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Master_branch
        {
            get { return _master_branch; }
            set 
            {
                if (_master_branch != value)
                {
                    _master_branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mirror_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mirror_url
        {
            get { return _mirror_url; }
            set 
            {
                if (_mirror_url != value)
                {
                    _mirror_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues
        {
            get { return _open_issues; }
            set 
            {
                if (_open_issues != value)
                {
                    _open_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues_count
        {
            get { return _open_issues_count; }
            set 
            {
                if (_open_issues_count != value)
                {
                    _open_issues_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Organization2 Organization
        {
            get { return _organization; }
            set 
            {
                if (_organization != value)
                {
                    _organization = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Owner2 Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Is present when the repo is a fork. Parent is the repo this repo was forked from.</summary>
        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Parent Parent
        {
            get { return _parent; }
            set 
            {
                if (_parent != value)
                {
                    _parent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Private
        {
            get { return _private; }
            set 
            {
                if (_private != value)
                {
                    _private = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("pushed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pushed_at
        {
            get { return _pushed_at; }
            set 
            {
                if (_pushed_at != value)
                {
                    _pushed_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Is present when the repo is a fork. Source is the ultimate source for the network.</summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Source Source
        {
            get { return _source; }
            set 
            {
                if (_source != value)
                {
                    _source = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ssh_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ssh_url
        {
            get { return _ssh_url; }
            set 
            {
                if (_ssh_url != value)
                {
                    _ssh_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("svn_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Svn_url
        {
            get { return _svn_url; }
            set 
            {
                if (_svn_url != value)
                {
                    _svn_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers
        {
            get { return _watchers; }
            set 
            {
                if (_watchers != value)
                {
                    _watchers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers_count
        {
            get { return _watchers_count; }
            set 
            {
                if (_watchers_count != value)
                {
                    _watchers_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Repo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Repo>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class RepoCommit : System.ComponentModel.INotifyPropertyChanged
    {
        private Author5 _author;
        private Committer5 _committer;
        private string _message;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous40> _parents;
        private string _sha;
        private Tree2 _tree;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author5 Author
        {
            get { return _author; }
            set 
            {
                if (_author != value)
                {
                    _author = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("committer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Committer5 Committer
        {
            get { return _committer; }
            set 
            {
                if (_committer != value)
                {
                    _committer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous40> Parents
        {
            get { return _parents; }
            set 
            {
                if (_parents != value)
                {
                    _parents = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tree", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tree2 Tree
        {
            get { return _tree; }
            set 
            {
                if (_tree != value)
                {
                    _tree = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RepoCommit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RepoCommit>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class RepoCommitBody : System.ComponentModel.INotifyPropertyChanged
    {
        private Author6 _author;
        private string _message;
        private System.Collections.ObjectModel.ObservableCollection<string> _parents = new System.Collections.ObjectModel.ObservableCollection<string>();
        private string _tree;
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author6 Author
        {
            get { return _author; }
            set 
            {
                if (_author != value)
                {
                    _author = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parents", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<string> Parents
        {
            get { return _parents; }
            set 
            {
                if (_parents != value)
                {
                    _parents = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tree", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Tree
        {
            get { return _tree; }
            set 
            {
                if (_tree != value)
                {
                    _tree = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RepoCommitBody FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RepoCommitBody>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class RepoEdit : System.ComponentModel.INotifyPropertyChanged
    {
        private string _description;
        private bool? _has_downloads;
        private bool? _has_issues;
        private bool? _has_wiki;
        private string _homepage;
        private string _name;
        private bool? _private;
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("has_downloads", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Has_downloads
        {
            get { return _has_downloads; }
            set 
            {
                if (_has_downloads != value)
                {
                    _has_downloads = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("has_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Has_issues
        {
            get { return _has_issues; }
            set 
            {
                if (_has_issues != value)
                {
                    _has_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("has_wiki", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Has_wiki
        {
            get { return _has_wiki; }
            set 
            {
                if (_has_wiki != value)
                {
                    _has_wiki = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Homepage
        {
            get { return _homepage; }
            set 
            {
                if (_homepage != value)
                {
                    _homepage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Private
        {
            get { return _private; }
            set 
            {
                if (_private != value)
                {
                    _private = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RepoEdit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RepoEdit>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class SearchCode : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Anonymous41> _items;
        private int? _total_count;
    
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous41> Items
        {
            get { return _items; }
            set 
            {
                if (_items != value)
                {
                    _items = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total_count
        {
            get { return _total_count; }
            set 
            {
                if (_total_count != value)
                {
                    _total_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchCode FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchCode>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class SearchIssues : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Anonymous42> _items;
        private int? _total_count;
    
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous42> Items
        {
            get { return _items; }
            set 
            {
                if (_items != value)
                {
                    _items = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total_count
        {
            get { return _total_count; }
            set 
            {
                if (_total_count != value)
                {
                    _total_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchIssues FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchIssues>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class SearchIssuesByKeyword : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Anonymous43> _issues;
    
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous43> Issues
        {
            get { return _issues; }
            set 
            {
                if (_issues != value)
                {
                    _issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchIssuesByKeyword FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchIssuesByKeyword>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class SearchRepositories : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Anonymous44> _items;
        private int? _total_count;
    
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous44> Items
        {
            get { return _items; }
            set 
            {
                if (_items != value)
                {
                    _items = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total_count
        {
            get { return _total_count; }
            set 
            {
                if (_total_count != value)
                {
                    _total_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchRepositories FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchRepositories>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class SearchRepositoriesByKeyword : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Anonymous45> _repositories;
    
        [Newtonsoft.Json.JsonProperty("repositories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous45> Repositories
        {
            get { return _repositories; }
            set 
            {
                if (_repositories != value)
                {
                    _repositories = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchRepositoriesByKeyword FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchRepositoriesByKeyword>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class SearchUserByEmail : System.ComponentModel.INotifyPropertyChanged
    {
        private User7 _user;
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User7 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchUserByEmail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchUserByEmail>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class SearchUsers : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Anonymous46> _items;
        private int? _total_count;
    
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous46> Items
        {
            get { return _items; }
            set 
            {
                if (_items != value)
                {
                    _items = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total_count
        {
            get { return _total_count; }
            set 
            {
                if (_total_count != value)
                {
                    _total_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchUsers FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchUsers>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class SearchUsersByKeyword : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Anonymous47> _users;
    
        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous47> Users
        {
            get { return _users; }
            set 
            {
                if (_users != value)
                {
                    _users = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchUsersByKeyword FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchUsersByKeyword>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Subscribition : System.ComponentModel.INotifyPropertyChanged
    {
        private string _created_at;
        private bool? _ignored;
        private string _reason;
        private string _repository_url;
        private bool? _subscribed;
        private string _url;
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ignored", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Ignored
        {
            get { return _ignored; }
            set 
            {
                if (_ignored != value)
                {
                    _ignored = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason
        {
            get { return _reason; }
            set 
            {
                if (_reason != value)
                {
                    _reason = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repository_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repository_url
        {
            get { return _repository_url; }
            set 
            {
                if (_repository_url != value)
                {
                    _repository_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscribed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Subscribed
        {
            get { return _subscribed; }
            set 
            {
                if (_subscribed != value)
                {
                    _subscribed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Subscribition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Subscribition>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class SubscribitionBody : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _ignored;
        private bool? _subscribed;
    
        [Newtonsoft.Json.JsonProperty("ignored", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Ignored
        {
            get { return _ignored; }
            set 
            {
                if (_ignored != value)
                {
                    _ignored = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscribed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Subscribed
        {
            get { return _subscribed; }
            set 
            {
                if (_subscribed != value)
                {
                    _subscribed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SubscribitionBody FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubscribitionBody>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Subscription : System.ComponentModel.INotifyPropertyChanged
    {
        private string _created_at;
        private bool? _ignored;
        private bool? _reason;
        private bool? _subscribed;
        private string _thread_url;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ignored", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Ignored
        {
            get { return _ignored; }
            set 
            {
                if (_ignored != value)
                {
                    _ignored = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Reason
        {
            get { return _reason; }
            set 
            {
                if (_reason != value)
                {
                    _reason = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscribed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Subscribed
        {
            get { return _subscribed; }
            set 
            {
                if (_subscribed != value)
                {
                    _subscribed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("thread_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thread_url
        {
            get { return _thread_url; }
            set 
            {
                if (_thread_url != value)
                {
                    _thread_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Subscription FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Subscription>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Tag : System.ComponentModel.INotifyPropertyChanged
    {
        private string _message;
        private Object3 _object;
        private string _sha;
        private string _tag1;
        private Tagger _tagger;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("object", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Object3 Object
        {
            get { return _object; }
            set 
            {
                if (_object != value)
                {
                    _object = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tag1
        {
            get { return _tag1; }
            set 
            {
                if (_tag1 != value)
                {
                    _tag1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tagger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tagger Tagger
        {
            get { return _tagger; }
            set 
            {
                if (_tagger != value)
                {
                    _tagger = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tag FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tag>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Tags : System.ComponentModel.INotifyPropertyChanged
    {
        private string _message;
        private string _object;
        private string _tag;
        private Tagger2 _tagger = new Tagger2();
        private string _type;
    
        /// <summary>String of the tag message.</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>String of the SHA of the git object this is tagging.</summary>
        [Newtonsoft.Json.JsonProperty("object", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Object
        {
            get { return _object; }
            set 
            {
                if (_object != value)
                {
                    _object = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Tag
        {
            get { return _tag; }
            set 
            {
                if (_tag != value)
                {
                    _tag = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tagger", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Tagger2 Tagger
        {
            get { return _tagger; }
            set 
            {
                if (_tagger != value)
                {
                    _tagger = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>String of the type of the object we’re tagging. Normally this is a commit but it can also be a tree or a blob.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tags FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tags>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Team : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private int? _members_count;
        private string _name;
        private string _permission;
        private int? _repos_count;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("members_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Members_count
        {
            get { return _members_count; }
            set 
            {
                if (_members_count != value)
                {
                    _members_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Permission
        {
            get { return _permission; }
            set 
            {
                if (_permission != value)
                {
                    _permission = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Repos_count
        {
            get { return _repos_count; }
            set 
            {
                if (_repos_count != value)
                {
                    _repos_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Team FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Team>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class TeamMembership : System.ComponentModel.INotifyPropertyChanged
    {
        private string _state;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TeamMembership FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamMembership>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Tree : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous48> _tree1;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tree", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous48> Tree1
        {
            get { return _tree1; }
            set 
            {
                if (_tree1 != value)
                {
                    _tree1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tree FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tree>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Trees : System.ComponentModel.INotifyPropertyChanged
    {
        private string _base_tree;
        private string _sha;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous49> _tree;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("base_tree", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Base_tree
        {
            get { return _base_tree; }
            set 
            {
                if (_base_tree != value)
                {
                    _base_tree = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>SHA1 checksum ID of the object in the tree.</summary>
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tree", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous49> Tree
        {
            get { return _tree; }
            set 
            {
                if (_tree != value)
                {
                    _tree = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Trees FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Trees>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _bio;
        private string _blog;
        private int? _collaborators;
        private string _company;
        private string _created_at;
        private int? _disk_usage;
        private string _email;
        private int? _followers;
        private int? _following;
        private string _gravatar_id;
        private bool? _hireable;
        private string _html_url;
        private int? _id;
        private string _location;
        private string _login;
        private string _name;
        private int? _owned_private_repos;
        private Plan _plan;
        private int? _private_gists;
        private int? _public_gists;
        private int? _public_repos;
        private int? _total_private_repos;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("bio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bio
        {
            get { return _bio; }
            set 
            {
                if (_bio != value)
                {
                    _bio = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("blog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Blog
        {
            get { return _blog; }
            set 
            {
                if (_blog != value)
                {
                    _blog = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("collaborators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Collaborators
        {
            get { return _collaborators; }
            set 
            {
                if (_collaborators != value)
                {
                    _collaborators = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company
        {
            get { return _company; }
            set 
            {
                if (_company != value)
                {
                    _company = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("disk_usage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Disk_usage
        {
            get { return _disk_usage; }
            set 
            {
                if (_disk_usage != value)
                {
                    _disk_usage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Followers
        {
            get { return _followers; }
            set 
            {
                if (_followers != value)
                {
                    _followers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Following
        {
            get { return _following; }
            set 
            {
                if (_following != value)
                {
                    _following = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hireable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hireable
        {
            get { return _hireable; }
            set 
            {
                if (_hireable != value)
                {
                    _hireable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owned_private_repos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Owned_private_repos
        {
            get { return _owned_private_repos; }
            set 
            {
                if (_owned_private_repos != value)
                {
                    _owned_private_repos = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("plan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Plan Plan
        {
            get { return _plan; }
            set 
            {
                if (_plan != value)
                {
                    _plan = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("private_gists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Private_gists
        {
            get { return _private_gists; }
            set 
            {
                if (_private_gists != value)
                {
                    _private_gists = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("public_gists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Public_gists
        {
            get { return _public_gists; }
            set 
            {
                if (_public_gists != value)
                {
                    _public_gists = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("public_repos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Public_repos
        {
            get { return _public_repos; }
            set 
            {
                if (_public_repos != value)
                {
                    _public_repos = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("total_private_repos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total_private_repos
        {
            get { return _total_private_repos; }
            set 
            {
                if (_total_private_repos != value)
                {
                    _total_private_repos = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class UserKeysKeyId : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private string _key;
        private string _title;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key
        {
            get { return _key; }
            set 
            {
                if (_key != value)
                {
                    _key = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserKeysKeyId FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserKeysKeyId>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class UserKeysPost : System.ComponentModel.INotifyPropertyChanged
    {
        private string _key;
        private string _title;
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key
        {
            get { return _key; }
            set 
            {
                if (_key != value)
                {
                    _key = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserKeysPost FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserKeysPost>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class UserUpdate : System.ComponentModel.INotifyPropertyChanged
    {
        private string _bio;
        private string _blog;
        private string _company;
        private string _email;
        private bool? _hireable;
        private string _location;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("bio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bio
        {
            get { return _bio; }
            set 
            {
                if (_bio != value)
                {
                    _bio = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("blog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Blog
        {
            get { return _blog; }
            set 
            {
                if (_blog != value)
                {
                    _blog = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company
        {
            get { return _company; }
            set 
            {
                if (_company != value)
                {
                    _company = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hireable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hireable
        {
            get { return _hireable; }
            set 
            {
                if (_hireable != value)
                {
                    _hireable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserUpdate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserUpdate>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class UserUserId : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _bio;
        private string _blog;
        private string _company;
        private string _created_at;
        private string _email;
        private int? _followers;
        private int? _following;
        private string _gravatar_id;
        private bool? _hireable;
        private string _html_url;
        private int? _id;
        private string _location;
        private string _login;
        private string _name;
        private int? _public_gists;
        private int? _public_repos;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("bio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bio
        {
            get { return _bio; }
            set 
            {
                if (_bio != value)
                {
                    _bio = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("blog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Blog
        {
            get { return _blog; }
            set 
            {
                if (_blog != value)
                {
                    _blog = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company
        {
            get { return _company; }
            set 
            {
                if (_company != value)
                {
                    _company = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Note: The returned email is the user’s publicly visible email address (or null if the user has not specified a public email address in their profile).</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Followers
        {
            get { return _followers; }
            set 
            {
                if (_followers != value)
                {
                    _followers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Following
        {
            get { return _following; }
            set 
            {
                if (_following != value)
                {
                    _following = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hireable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hireable
        {
            get { return _hireable; }
            set 
            {
                if (_hireable != value)
                {
                    _hireable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("public_gists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Public_gists
        {
            get { return _public_gists; }
            set 
            {
                if (_public_gists != value)
                {
                    _public_gists = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("public_repos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Public_repos
        {
            get { return _public_repos; }
            set 
            {
                if (_public_repos != value)
                {
                    _public_repos = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserUserId FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserUserId>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Issues assigned to you / created by you / mentioning you / you're
    /// subscribed to updates for / All issues the authenticated user can see
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Filter
    {
        [System.Runtime.Serialization.EnumMember(Value = "assigned")]
        Assigned = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "created")]
        Created = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "mentioned")]
        Mentioned = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "subscribed")]
        Subscribed = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "all")]
        All = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum State
    {
        [System.Runtime.Serialization.EnumMember(Value = "open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "closed")]
        Closed = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Sort
    {
        [System.Runtime.Serialization.EnumMember(Value = "created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "updated")]
        Updated = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "comments")]
        Comments = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Direction
    {
        [System.Runtime.Serialization.EnumMember(Value = "asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "desc")]
        Desc = 1,
    
    }
    
    /// <summary>Indicates the state of the issues to return. Can be either open or closed.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum State2
    {
        [System.Runtime.Serialization.EnumMember(Value = "open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "closed")]
        Closed = 1,
    
    }
    
    /// <summary>The sort field. if sort param is provided. Can be either asc or desc.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Order
    {
        [System.Runtime.Serialization.EnumMember(Value = "desc")]
        Desc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "asc")]
        Asc = 1,
    
    }
    
    /// <summary>The sort field. One of stars, forks, or updated. Default: results are sorted by best match.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Sort2
    {
        [System.Runtime.Serialization.EnumMember(Value = "updated")]
        Updated = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "stars")]
        Stars = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "forks")]
        Forks = 2,
    
    }
    
    /// <summary>The sort field. if sort param is provided. Can be either asc or desc.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Order2
    {
        [System.Runtime.Serialization.EnumMember(Value = "desc")]
        Desc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "asc")]
        Asc = 1,
    
    }
    
    /// <summary>The sort field. One of stars, forks, or updated. Default: results are sorted by best match.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Sort3
    {
        [System.Runtime.Serialization.EnumMember(Value = "updated")]
        Updated = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "stars")]
        Stars = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "forks")]
        Forks = 2,
    
    }
    
    /// <summary>Issues assigned to you / created by you / mentioning you / you're
    /// subscribed to updates for / All issues the authenticated user can see
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Filter2
    {
        [System.Runtime.Serialization.EnumMember(Value = "assigned")]
        Assigned = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "created")]
        Created = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "mentioned")]
        Mentioned = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "subscribed")]
        Subscribed = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "all")]
        All = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum State3
    {
        [System.Runtime.Serialization.EnumMember(Value = "open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "closed")]
        Closed = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Sort4
    {
        [System.Runtime.Serialization.EnumMember(Value = "created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "updated")]
        Updated = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "comments")]
        Comments = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Direction2
    {
        [System.Runtime.Serialization.EnumMember(Value = "asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "desc")]
        Desc = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Type
    {
        [System.Runtime.Serialization.EnumMember(Value = "all")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "public")]
        Public = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "private")]
        Private = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "forks")]
        Forks = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "sources")]
        Sources = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "member")]
        Member = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Sort5
    {
        [System.Runtime.Serialization.EnumMember(Value = "newes")]
        Newes = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "oldes")]
        Oldes = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "watchers")]
        Watchers = 2,
    
    }
    
    /// <summary>Issues assigned to you / created by you / mentioning you / you're
    /// subscribed to updates for / All issues the authenticated user can see
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Filter3
    {
        [System.Runtime.Serialization.EnumMember(Value = "assigned")]
        Assigned = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "created")]
        Created = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "mentioned")]
        Mentioned = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "subscribed")]
        Subscribed = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "all")]
        All = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum State4
    {
        [System.Runtime.Serialization.EnumMember(Value = "open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "closed")]
        Closed = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Sort6
    {
        [System.Runtime.Serialization.EnumMember(Value = "created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "updated")]
        Updated = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "comments")]
        Comments = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Direction3
    {
        [System.Runtime.Serialization.EnumMember(Value = "asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "desc")]
        Desc = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Sort7
    {
        [System.Runtime.Serialization.EnumMember(Value = "created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "updated")]
        Updated = 1,
    
    }
    
    /// <summary>String to filter by state.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum State5
    {
        [System.Runtime.Serialization.EnumMember(Value = "open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "closed")]
        Closed = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Sort8
    {
        [System.Runtime.Serialization.EnumMember(Value = "due_date")]
        Due_date = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "completeness")]
        Completeness = 1,
    
    }
    
    /// <summary>String to filter by state.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum State6
    {
        [System.Runtime.Serialization.EnumMember(Value = "open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "closed")]
        Closed = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Sort9
    {
        [System.Runtime.Serialization.EnumMember(Value = "created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "updated")]
        Updated = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Archive_format
    {
        [System.Runtime.Serialization.EnumMember(Value = "tarball")]
        Tarball = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "zipball")]
        Zipball = 1,
    
    }
    
    /// <summary>The sort field. if sort param is provided. Can be either asc or desc.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Order3
    {
        [System.Runtime.Serialization.EnumMember(Value = "desc")]
        Desc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "asc")]
        Asc = 1,
    
    }
    
    /// <summary>Can only be 'indexed', which indicates how recently a file has been indexed
    /// by the GitHub search infrastructure. If not provided, results are sorted
    /// by best match.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Sort10
    {
        [System.Runtime.Serialization.EnumMember(Value = "indexed")]
        Indexed = 0,
    
    }
    
    /// <summary>The sort field. if sort param is provided. Can be either asc or desc.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Order4
    {
        [System.Runtime.Serialization.EnumMember(Value = "desc")]
        Desc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "asc")]
        Asc = 1,
    
    }
    
    /// <summary>The sort field. Can be comments, created, or updated. Default: results are sorted by best match.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Sort11
    {
        [System.Runtime.Serialization.EnumMember(Value = "updated")]
        Updated = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "created")]
        Created = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "comments")]
        Comments = 2,
    
    }
    
    /// <summary>The sort field. if sort param is provided. Can be either asc or desc.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Order5
    {
        [System.Runtime.Serialization.EnumMember(Value = "desc")]
        Desc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "asc")]
        Asc = 1,
    
    }
    
    /// <summary>If not provided, results are sorted by best match.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Sort12
    {
        [System.Runtime.Serialization.EnumMember(Value = "stars")]
        Stars = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "forks")]
        Forks = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "updated")]
        Updated = 2,
    
    }
    
    /// <summary>The sort field. if sort param is provided. Can be either asc or desc.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Order6
    {
        [System.Runtime.Serialization.EnumMember(Value = "desc")]
        Desc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "asc")]
        Asc = 1,
    
    }
    
    /// <summary>If not provided, results are sorted by best match.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Sort13
    {
        [System.Runtime.Serialization.EnumMember(Value = "followers")]
        Followers = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "repositories")]
        Repositories = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "joined")]
        Joined = 2,
    
    }
    
    /// <summary>Issues assigned to you / created by you / mentioning you / you're
    /// subscribed to updates for / All issues the authenticated user can see
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Filter4
    {
        [System.Runtime.Serialization.EnumMember(Value = "assigned")]
        Assigned = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "created")]
        Created = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "mentioned")]
        Mentioned = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "subscribed")]
        Subscribed = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "all")]
        All = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum State7
    {
        [System.Runtime.Serialization.EnumMember(Value = "open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "closed")]
        Closed = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Sort14
    {
        [System.Runtime.Serialization.EnumMember(Value = "created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "updated")]
        Updated = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "comments")]
        Comments = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Direction4
    {
        [System.Runtime.Serialization.EnumMember(Value = "asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "desc")]
        Desc = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Type2
    {
        [System.Runtime.Serialization.EnumMember(Value = "all")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "public")]
        Public = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "private")]
        Private = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "forks")]
        Forks = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "sources")]
        Sources = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "member")]
        Member = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Sort15
    {
        [System.Runtime.Serialization.EnumMember(Value = "created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "updated")]
        Updated = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Type3
    {
        [System.Runtime.Serialization.EnumMember(Value = "all")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "public")]
        Public = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "private")]
        Private = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "forks")]
        Forks = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "sources")]
        Sources = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "member")]
        Member = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _comments;
        private string _comments_url;
        private string _created_at;
        private string _description;
        private Files4 _files;
        private string _git_pull_url;
        private string _git_push_url;
        private string _html_url;
        private string _id;
        private bool? _public;
        private string _url;
        private User8 _user;
    
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Comments
        {
            get { return _comments; }
            set 
            {
                if (_comments != value)
                {
                    _comments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("comments_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments_url
        {
            get { return _comments_url; }
            set 
            {
                if (_comments_url != value)
                {
                    _comments_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Files4 Files
        {
            get { return _files; }
            set 
            {
                if (_files != value)
                {
                    _files = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_pull_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_pull_url
        {
            get { return _git_pull_url; }
            set 
            {
                if (_git_pull_url != value)
                {
                    _git_pull_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_push_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_push_url
        {
            get { return _git_push_url; }
            set 
            {
                if (_git_push_url != value)
                {
                    _git_push_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("public", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Public
        {
            get { return _public; }
            set 
            {
                if (_public != value)
                {
                    _public = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User8 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _body;
        private string _created_at;
        private int? _id;
        private string _url;
        private User9 _user;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601.</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User9 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous3 : System.ComponentModel.INotifyPropertyChanged
    {
        private Assignee _assignee;
        private string _body;
        private string _closed_at;
        private int? _comments;
        private string _created_at;
        private string _html_url;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous50> _labels;
        private Milestone2 _milestone;
        private int? _number;
        private Pull_request _pull_request;
        private State8? _state;
        private string _title;
        private string _updated_at;
        private string _url;
        private User10 _user;
    
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Assignee Assignee
        {
            get { return _assignee; }
            set 
            {
                if (_assignee != value)
                {
                    _assignee = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("closed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Closed_at
        {
            get { return _closed_at; }
            set 
            {
                if (_closed_at != value)
                {
                    _closed_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Comments
        {
            get { return _comments; }
            set 
            {
                if (_comments != value)
                {
                    _comments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous50> Labels
        {
            get { return _labels; }
            set 
            {
                if (_labels != value)
                {
                    _labels = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("milestone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Milestone2 Milestone
        {
            get { return _milestone; }
            set 
            {
                if (_milestone != value)
                {
                    _milestone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pull_request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pull_request Pull_request
        {
            get { return _pull_request; }
            set 
            {
                if (_pull_request != value)
                {
                    _pull_request = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public State8? State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User10 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous4 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous4>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous5 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _clone_url;
        private string _created_at;
        private string _description;
        private bool? _fork;
        private int? _forks;
        private int? _forks_count;
        private string _full_name;
        private string _git_url;
        private string _homepage;
        private string _html_url;
        private int? _id;
        private string _language;
        private string _master_branch;
        private string _mirror_url;
        private string _name;
        private int? _open_issues;
        private int? _open_issues_count;
        private Owner3 _owner;
        private bool? _private;
        private string _pushed_at;
        private int? _size;
        private string _ssh_url;
        private string _svn_url;
        private string _updated_at;
        private string _url;
        private int? _watchers;
        private int? _watchers_count;
    
        [Newtonsoft.Json.JsonProperty("clone_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Clone_url
        {
            get { return _clone_url; }
            set 
            {
                if (_clone_url != value)
                {
                    _clone_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fork
        {
            get { return _fork; }
            set 
            {
                if (_fork != value)
                {
                    _fork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks
        {
            get { return _forks; }
            set 
            {
                if (_forks != value)
                {
                    _forks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks_count
        {
            get { return _forks_count; }
            set 
            {
                if (_forks_count != value)
                {
                    _forks_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name
        {
            get { return _full_name; }
            set 
            {
                if (_full_name != value)
                {
                    _full_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_url
        {
            get { return _git_url; }
            set 
            {
                if (_git_url != value)
                {
                    _git_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Homepage
        {
            get { return _homepage; }
            set 
            {
                if (_homepage != value)
                {
                    _homepage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("master_branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Master_branch
        {
            get { return _master_branch; }
            set 
            {
                if (_master_branch != value)
                {
                    _master_branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mirror_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mirror_url
        {
            get { return _mirror_url; }
            set 
            {
                if (_mirror_url != value)
                {
                    _mirror_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues
        {
            get { return _open_issues; }
            set 
            {
                if (_open_issues != value)
                {
                    _open_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues_count
        {
            get { return _open_issues_count; }
            set 
            {
                if (_open_issues_count != value)
                {
                    _open_issues_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Owner3 Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Private
        {
            get { return _private; }
            set 
            {
                if (_private != value)
                {
                    _private = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("pushed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pushed_at
        {
            get { return _pushed_at; }
            set 
            {
                if (_pushed_at != value)
                {
                    _pushed_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ssh_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ssh_url
        {
            get { return _ssh_url; }
            set 
            {
                if (_ssh_url != value)
                {
                    _ssh_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("svn_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Svn_url
        {
            get { return _svn_url; }
            set 
            {
                if (_svn_url != value)
                {
                    _svn_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers
        {
            get { return _watchers; }
            set 
            {
                if (_watchers != value)
                {
                    _watchers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers_count
        {
            get { return _watchers_count; }
            set 
            {
                if (_watchers_count != value)
                {
                    _watchers_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous5>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous6 : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private string _name;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous6>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous7 : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous7 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous7>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous8 : System.ComponentModel.INotifyPropertyChanged
    {
        private Commit6 _commit;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("commit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Commit6 Commit
        {
            get { return _commit; }
            set 
            {
                if (_commit != value)
                {
                    _commit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous8 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous8>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous9 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _body;
        private string _commit_id;
        private string _created_at;
        private string _html_url;
        private int? _id;
        private int? _line;
        private string _path;
        private int? _position;
        private string _updated_at;
        private string _url;
        private User11 _user;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commit_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commit_id
        {
            get { return _commit_id; }
            set 
            {
                if (_commit_id != value)
                {
                    _commit_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("line", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Line
        {
            get { return _line; }
            set 
            {
                if (_line != value)
                {
                    _line = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path
        {
            get { return _path; }
            set 
            {
                if (_path != value)
                {
                    _path = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Position
        {
            get { return _position; }
            set 
            {
                if (_position != value)
                {
                    _position = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User11 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous9 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous9>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous10 : System.ComponentModel.INotifyPropertyChanged
    {
        private Author7 _author;
        private Commit7 _commit;
        private Committer6 _committer;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous51> _parents;
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author7 Author
        {
            get { return _author; }
            set 
            {
                if (_author != value)
                {
                    _author = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Commit7 Commit
        {
            get { return _commit; }
            set 
            {
                if (_commit != value)
                {
                    _commit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("committer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Committer6 Committer
        {
            get { return _committer; }
            set 
            {
                if (_committer != value)
                {
                    _committer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous51> Parents
        {
            get { return _parents; }
            set 
            {
                if (_parents != value)
                {
                    _parents = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous10 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous10>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous11 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _commit_url;
        private string _name;
        private string _repository_url;
        private string _sha;
        private string _state;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous52> _statuses;
    
        [Newtonsoft.Json.JsonProperty("commit_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commit_url
        {
            get { return _commit_url; }
            set 
            {
                if (_commit_url != value)
                {
                    _commit_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repository_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repository_url
        {
            get { return _repository_url; }
            set 
            {
                if (_repository_url != value)
                {
                    _repository_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous52> Statuses
        {
            get { return _statuses; }
            set 
            {
                if (_statuses != value)
                {
                    _statuses = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous11 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous11>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous12 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private int? _contributions;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contributions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Contributions
        {
            get { return _contributions; }
            set 
            {
                if (_contributions != value)
                {
                    _contributions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous12 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous12>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous13 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _created_at;
        private Creator3 _creator;
        private string _description;
        private int? _id;
        private string _payload;
        private string _sha;
        private string _statuses_url;
        private string _updated_at;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creator3 Creator
        {
            get { return _creator; }
            set 
            {
                if (_creator != value)
                {
                    _creator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payload
        {
            get { return _payload; }
            set 
            {
                if (_payload != value)
                {
                    _payload = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("statuses_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Statuses_url
        {
            get { return _statuses_url; }
            set 
            {
                if (_statuses_url != value)
                {
                    _statuses_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous13 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous13>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous14 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _created_at;
        private Creator4 _creator;
        private string _description;
        private int? _id;
        private string _payload;
        private string _state;
        private string _target_url;
        private string _updated_at;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creator4 Creator
        {
            get { return _creator; }
            set 
            {
                if (_creator != value)
                {
                    _creator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payload
        {
            get { return _payload; }
            set 
            {
                if (_payload != value)
                {
                    _payload = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("target_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target_url
        {
            get { return _target_url; }
            set 
            {
                if (_target_url != value)
                {
                    _target_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous14 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous14>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous15 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _clone_url;
        private string _created_at;
        private string _description;
        private bool? _fork;
        private int? _forks;
        private int? _forks_count;
        private string _full_name;
        private string _git_url;
        private string _homepage;
        private string _html_url;
        private int? _id;
        private string _language;
        private string _master_branch;
        private string _mirror_url;
        private string _name;
        private int? _open_issues;
        private int? _open_issues_count;
        private Owner4 _owner;
        private bool? _private;
        private string _pushed_at;
        private int? _size;
        private string _ssh_url;
        private string _svn_url;
        private string _updated_at;
        private string _url;
        private int? _watchers;
        private int? _watchers_count;
    
        [Newtonsoft.Json.JsonProperty("clone_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Clone_url
        {
            get { return _clone_url; }
            set 
            {
                if (_clone_url != value)
                {
                    _clone_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fork
        {
            get { return _fork; }
            set 
            {
                if (_fork != value)
                {
                    _fork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks
        {
            get { return _forks; }
            set 
            {
                if (_forks != value)
                {
                    _forks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks_count
        {
            get { return _forks_count; }
            set 
            {
                if (_forks_count != value)
                {
                    _forks_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name
        {
            get { return _full_name; }
            set 
            {
                if (_full_name != value)
                {
                    _full_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_url
        {
            get { return _git_url; }
            set 
            {
                if (_git_url != value)
                {
                    _git_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Homepage
        {
            get { return _homepage; }
            set 
            {
                if (_homepage != value)
                {
                    _homepage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("master_branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Master_branch
        {
            get { return _master_branch; }
            set 
            {
                if (_master_branch != value)
                {
                    _master_branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mirror_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mirror_url
        {
            get { return _mirror_url; }
            set 
            {
                if (_mirror_url != value)
                {
                    _mirror_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues
        {
            get { return _open_issues; }
            set 
            {
                if (_open_issues != value)
                {
                    _open_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues_count
        {
            get { return _open_issues_count; }
            set 
            {
                if (_open_issues_count != value)
                {
                    _open_issues_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Owner4 Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Private
        {
            get { return _private; }
            set 
            {
                if (_private != value)
                {
                    _private = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("pushed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pushed_at
        {
            get { return _pushed_at; }
            set 
            {
                if (_pushed_at != value)
                {
                    _pushed_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ssh_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ssh_url
        {
            get { return _ssh_url; }
            set 
            {
                if (_ssh_url != value)
                {
                    _ssh_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("svn_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Svn_url
        {
            get { return _svn_url; }
            set 
            {
                if (_svn_url != value)
                {
                    _svn_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers
        {
            get { return _watchers; }
            set 
            {
                if (_watchers != value)
                {
                    _watchers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers_count
        {
            get { return _watchers_count; }
            set 
            {
                if (_watchers_count != value)
                {
                    _watchers_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous15 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous15>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous16 : System.ComponentModel.INotifyPropertyChanged
    {
        private Object4 _object;
        private string _ref;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("object", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Object4 Object
        {
            get { return _object; }
            set 
            {
                if (_object != value)
                {
                    _object = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref
        {
            get { return _ref; }
            set 
            {
                if (_ref != value)
                {
                    _ref = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous16 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous16>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous17 : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _active;
        private Config _config;
        private string _created_at;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous53> _events;
        private int? _id;
        private string _name;
        private string _updated_at;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active
        {
            get { return _active; }
            set 
            {
                if (_active != value)
                {
                    _active = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Config Config
        {
            get { return _config; }
            set 
            {
                if (_config != value)
                {
                    _config = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous53> Events
        {
            get { return _events; }
            set 
            {
                if (_events != value)
                {
                    _events = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous17 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous17>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous18 : System.ComponentModel.INotifyPropertyChanged
    {
        private _links7 __links;
        private string _body;
        private string _commit_id;
        private string _created_at;
        private int? _id;
        private string _path;
        private int? _position;
        private string _updated_at;
        private string _url;
        private User12 _user;
    
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public _links7 _links
        {
            get { return __links; }
            set 
            {
                if (__links != value)
                {
                    __links = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commit_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commit_id
        {
            get { return _commit_id; }
            set 
            {
                if (_commit_id != value)
                {
                    _commit_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path
        {
            get { return _path; }
            set 
            {
                if (_path != value)
                {
                    _path = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Position
        {
            get { return _position; }
            set 
            {
                if (_position != value)
                {
                    _position = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User12 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous18 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous18>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous19 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _color;
        private string _name;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 6)]
        public string Color
        {
            get { return _color; }
            set 
            {
                if (_color != value)
                {
                    _color = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous19 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous19>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous20 : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private string _key;
        private string _title;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key
        {
            get { return _key; }
            set 
            {
                if (_key != value)
                {
                    _key = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous20 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous20>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous21 : System.ComponentModel.INotifyPropertyChanged
    {
        private _links8 __links;
        private Base2 _base;
        private string _body;
        private string _closed_at;
        private string _created_at;
        private string _diff_url;
        private Head2 _head;
        private string _html_url;
        private string _issue_url;
        private string _merged_at;
        private int? _number;
        private string _patch_url;
        private State9? _state;
        private string _title;
        private string _updated_at;
        private string _url;
        private User13 _user;
    
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public _links8 _links
        {
            get { return __links; }
            set 
            {
                if (__links != value)
                {
                    __links = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("base", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Base2 Base
        {
            get { return _base; }
            set 
            {
                if (_base != value)
                {
                    _base = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("closed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Closed_at
        {
            get { return _closed_at; }
            set 
            {
                if (_closed_at != value)
                {
                    _closed_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("diff_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Diff_url
        {
            get { return _diff_url; }
            set 
            {
                if (_diff_url != value)
                {
                    _diff_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("head", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Head2 Head
        {
            get { return _head; }
            set 
            {
                if (_head != value)
                {
                    _head = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("issue_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Issue_url
        {
            get { return _issue_url; }
            set 
            {
                if (_issue_url != value)
                {
                    _issue_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("merged_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Merged_at
        {
            get { return _merged_at; }
            set 
            {
                if (_merged_at != value)
                {
                    _merged_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("patch_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patch_url
        {
            get { return _patch_url; }
            set 
            {
                if (_patch_url != value)
                {
                    _patch_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public State9? State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User13 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous21 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous21>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous22 : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Anonymous54> _assets;
        private string _assets_url;
        private Author8 _author;
        private string _body;
        private string _created_at;
        private bool? _draft;
        private string _html_url;
        private int? _id;
        private string _name;
        private bool? _prerelease;
        private string _published_at;
        private string _tag_name;
        private string _tarball_url;
        private string _target_commitish;
        private string _upload_url;
        private string _url;
        private string _zipball_url;
    
        [Newtonsoft.Json.JsonProperty("assets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous54> Assets
        {
            get { return _assets; }
            set 
            {
                if (_assets != value)
                {
                    _assets = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("assets_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assets_url
        {
            get { return _assets_url; }
            set 
            {
                if (_assets_url != value)
                {
                    _assets_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author8 Author
        {
            get { return _author; }
            set 
            {
                if (_author != value)
                {
                    _author = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("draft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Draft
        {
            get { return _draft; }
            set 
            {
                if (_draft != value)
                {
                    _draft = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("prerelease", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Prerelease
        {
            get { return _prerelease; }
            set 
            {
                if (_prerelease != value)
                {
                    _prerelease = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("published_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Published_at
        {
            get { return _published_at; }
            set 
            {
                if (_published_at != value)
                {
                    _published_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tag_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tag_name
        {
            get { return _tag_name; }
            set 
            {
                if (_tag_name != value)
                {
                    _tag_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tarball_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tarball_url
        {
            get { return _tarball_url; }
            set 
            {
                if (_tarball_url != value)
                {
                    _tarball_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("target_commitish", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target_commitish
        {
            get { return _target_commitish; }
            set 
            {
                if (_target_commitish != value)
                {
                    _target_commitish = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("upload_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Upload_url
        {
            get { return _upload_url; }
            set 
            {
                if (_upload_url != value)
                {
                    _upload_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("zipball_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zipball_url
        {
            get { return _zipball_url; }
            set 
            {
                if (_zipball_url != value)
                {
                    _zipball_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous22 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous22>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous23 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _content_type;
        private string _created_at;
        private double? _download_count;
        private double? _id;
        private string _label;
        private string _name;
        private double? _size;
        private string _state;
        private string _updated_at;
        private Uploader2 _uploader;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("content_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content_type
        {
            get { return _content_type; }
            set 
            {
                if (_content_type != value)
                {
                    _content_type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("download_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Download_count
        {
            get { return _download_count; }
            set 
            {
                if (_download_count != value)
                {
                    _download_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label
        {
            get { return _label; }
            set 
            {
                if (_label != value)
                {
                    _label = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uploader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Uploader2 Uploader
        {
            get { return _uploader; }
            set 
            {
                if (_uploader != value)
                {
                    _uploader = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous23 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous23>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous24 : System.ComponentModel.INotifyPropertyChanged
    {
        private Author9 _author;
        private int? _total;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous55> _weeks;
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author9 Author
        {
            get { return _author; }
            set 
            {
                if (_author != value)
                {
                    _author = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Total number of commits authored by the contributor.</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total
        {
            get { return _total; }
            set 
            {
                if (_total != value)
                {
                    _total = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("weeks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous55> Weeks
        {
            get { return _weeks; }
            set 
            {
                if (_weeks != value)
                {
                    _weeks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous24 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous24>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous25 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _created_at;
        private Creator5 _creator;
        private string _description;
        private int? _id;
        private string _state;
        private string _target_url;
        private string _updated_at;
        private string _url;
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creator5 Creator
        {
            get { return _creator; }
            set 
            {
                if (_creator != value)
                {
                    _creator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("target_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target_url
        {
            get { return _target_url; }
            set 
            {
                if (_target_url != value)
                {
                    _target_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous25 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous25>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous26 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _description;
        private bool? _fork;
        private string _full_name;
        private string _html_url;
        private int? _id;
        private string _name;
        private Owner5 _owner;
        private bool? _private;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fork
        {
            get { return _fork; }
            set 
            {
                if (_fork != value)
                {
                    _fork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name
        {
            get { return _full_name; }
            set 
            {
                if (_full_name != value)
                {
                    _full_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Owner5 Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Private
        {
            get { return _private; }
            set 
            {
                if (_private != value)
                {
                    _private = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous26 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous26>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous27 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _clone_url;
        private string _created_at;
        private string _description;
        private bool? _fork;
        private int? _forks;
        private int? _forks_count;
        private string _full_name;
        private string _git_url;
        private string _homepage;
        private string _html_url;
        private int? _id;
        private Language _language;
        private string _master_branch;
        private string _mirror_url;
        private string _name;
        private int? _open_issues;
        private int? _open_issues_count;
        private Owner6 _owner;
        private bool? _private;
        private string _pushed_at;
        private int? _size;
        private string _ssh_url;
        private string _svn_url;
        private string _updated_at;
        private string _url;
        private int? _watchers;
        private int? _watchers_count;
    
        [Newtonsoft.Json.JsonProperty("clone_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Clone_url
        {
            get { return _clone_url; }
            set 
            {
                if (_clone_url != value)
                {
                    _clone_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fork
        {
            get { return _fork; }
            set 
            {
                if (_fork != value)
                {
                    _fork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks
        {
            get { return _forks; }
            set 
            {
                if (_forks != value)
                {
                    _forks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks_count
        {
            get { return _forks_count; }
            set 
            {
                if (_forks_count != value)
                {
                    _forks_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name
        {
            get { return _full_name; }
            set 
            {
                if (_full_name != value)
                {
                    _full_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_url
        {
            get { return _git_url; }
            set 
            {
                if (_git_url != value)
                {
                    _git_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Homepage
        {
            get { return _homepage; }
            set 
            {
                if (_homepage != value)
                {
                    _homepage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Language Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("master_branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Master_branch
        {
            get { return _master_branch; }
            set 
            {
                if (_master_branch != value)
                {
                    _master_branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mirror_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mirror_url
        {
            get { return _mirror_url; }
            set 
            {
                if (_mirror_url != value)
                {
                    _mirror_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues
        {
            get { return _open_issues; }
            set 
            {
                if (_open_issues != value)
                {
                    _open_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues_count
        {
            get { return _open_issues_count; }
            set 
            {
                if (_open_issues_count != value)
                {
                    _open_issues_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Owner6 Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Private
        {
            get { return _private; }
            set 
            {
                if (_private != value)
                {
                    _private = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pushed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pushed_at
        {
            get { return _pushed_at; }
            set 
            {
                if (_pushed_at != value)
                {
                    _pushed_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ssh_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ssh_url
        {
            get { return _ssh_url; }
            set 
            {
                if (_ssh_url != value)
                {
                    _ssh_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("svn_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Svn_url
        {
            get { return _svn_url; }
            set 
            {
                if (_svn_url != value)
                {
                    _svn_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers
        {
            get { return _watchers; }
            set 
            {
                if (_watchers != value)
                {
                    _watchers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers_count
        {
            get { return _watchers_count; }
            set 
            {
                if (_watchers_count != value)
                {
                    _watchers_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous27 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous27>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous28 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _clone_url;
        private string _created_at;
        private string _description;
        private bool? _fork;
        private int? _forks;
        private int? _forks_count;
        private string _full_name;
        private string _git_url;
        private string _homepage;
        private string _html_url;
        private int? _id;
        private string _language;
        private int? _master_branch;
        private string _mirror_url;
        private string _name;
        private int? _open_issues;
        private int? _open_issues_count;
        private Owner7 _owner;
        private bool? _private;
        private string _pushed_at;
        private int? _size;
        private string _ssh_url;
        private string _svn_url;
        private string _updated_at;
        private string _url;
        private int? _watchers;
        private int? _watchers_count;
    
        [Newtonsoft.Json.JsonProperty("clone_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Clone_url
        {
            get { return _clone_url; }
            set 
            {
                if (_clone_url != value)
                {
                    _clone_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fork
        {
            get { return _fork; }
            set 
            {
                if (_fork != value)
                {
                    _fork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks
        {
            get { return _forks; }
            set 
            {
                if (_forks != value)
                {
                    _forks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks_count
        {
            get { return _forks_count; }
            set 
            {
                if (_forks_count != value)
                {
                    _forks_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name
        {
            get { return _full_name; }
            set 
            {
                if (_full_name != value)
                {
                    _full_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_url
        {
            get { return _git_url; }
            set 
            {
                if (_git_url != value)
                {
                    _git_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Homepage
        {
            get { return _homepage; }
            set 
            {
                if (_homepage != value)
                {
                    _homepage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("master_branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Master_branch
        {
            get { return _master_branch; }
            set 
            {
                if (_master_branch != value)
                {
                    _master_branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mirror_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mirror_url
        {
            get { return _mirror_url; }
            set 
            {
                if (_mirror_url != value)
                {
                    _mirror_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues
        {
            get { return _open_issues; }
            set 
            {
                if (_open_issues != value)
                {
                    _open_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues_count
        {
            get { return _open_issues_count; }
            set 
            {
                if (_open_issues_count != value)
                {
                    _open_issues_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Owner7 Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Private
        {
            get { return _private; }
            set 
            {
                if (_private != value)
                {
                    _private = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("pushed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pushed_at
        {
            get { return _pushed_at; }
            set 
            {
                if (_pushed_at != value)
                {
                    _pushed_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ssh_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ssh_url
        {
            get { return _ssh_url; }
            set 
            {
                if (_ssh_url != value)
                {
                    _ssh_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("svn_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Svn_url
        {
            get { return _svn_url; }
            set 
            {
                if (_svn_url != value)
                {
                    _svn_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers
        {
            get { return _watchers; }
            set 
            {
                if (_watchers != value)
                {
                    _watchers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers_count
        {
            get { return _watchers_count; }
            set 
            {
                if (_watchers_count != value)
                {
                    _watchers_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous28 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous28>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous29 : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private int? _members_count;
        private string _name;
        private Organization3 _organization;
        private string _permission;
        private int? _repos_count;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("members_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Members_count
        {
            get { return _members_count; }
            set 
            {
                if (_members_count != value)
                {
                    _members_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Organization3 Organization
        {
            get { return _organization; }
            set 
            {
                if (_organization != value)
                {
                    _organization = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Permission
        {
            get { return _permission; }
            set 
            {
                if (_permission != value)
                {
                    _permission = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Repos_count
        {
            get { return _repos_count; }
            set 
            {
                if (_repos_count != value)
                {
                    _repos_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous29 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous29>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous30 : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<int> _days;
        private int? _total;
        private int? _week;
    
        [Newtonsoft.Json.JsonProperty("days", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> Days
        {
            get { return _days; }
            set 
            {
                if (_days != value)
                {
                    _days = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total
        {
            get { return _total; }
            set 
            {
                if (_total != value)
                {
                    _total = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("week", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Week
        {
            get { return _week; }
            set 
            {
                if (_week != value)
                {
                    _week = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous30 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous30>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Uploader : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _events_url;
        private string _followers_url;
        private string _following_url;
        private string _gists_url;
        private string _gravatar_id;
        private string _html_url;
        private double? _id;
        private string _login;
        private string _organizations_url;
        private string _received_events_url;
        private string _repos_url;
        private bool? _site_admin;
        private string _starred_url;
        private string _subscriptions_url;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url
        {
            get { return _events_url; }
            set 
            {
                if (_events_url != value)
                {
                    _events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url
        {
            get { return _followers_url; }
            set 
            {
                if (_followers_url != value)
                {
                    _followers_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url
        {
            get { return _following_url; }
            set 
            {
                if (_following_url != value)
                {
                    _following_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url
        {
            get { return _gists_url; }
            set 
            {
                if (_gists_url != value)
                {
                    _gists_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url
        {
            get { return _organizations_url; }
            set 
            {
                if (_organizations_url != value)
                {
                    _organizations_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url
        {
            get { return _received_events_url; }
            set 
            {
                if (_received_events_url != value)
                {
                    _received_events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url
        {
            get { return _repos_url; }
            set 
            {
                if (_repos_url != value)
                {
                    _repos_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("site_admin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Site_admin
        {
            get { return _site_admin; }
            set 
            {
                if (_site_admin != value)
                {
                    _site_admin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url
        {
            get { return _starred_url; }
            set 
            {
                if (_starred_url != value)
                {
                    _starred_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url
        {
            get { return _subscriptions_url; }
            set 
            {
                if (_subscriptions_url != value)
                {
                    _subscriptions_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Uploader FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Uploader>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum BlobEncoding
    {
        [System.Runtime.Serialization.EnumMember(Value = "utf-8")]
        Utf8 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "base64")]
        Base64 = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class _links : System.ComponentModel.INotifyPropertyChanged
    {
        private string _html;
        private string _self;
    
        [Newtonsoft.Json.JsonProperty("html", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html
        {
            get { return _html; }
            set 
            {
                if (_html != value)
                {
                    _html = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self
        {
            get { return _self; }
            set 
            {
                if (_self != value)
                {
                    _self = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static _links FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<_links>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Commit2 : System.ComponentModel.INotifyPropertyChanged
    {
        private Author10 _author;
        private Commit8 _commit;
        private Committer7 _committer;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous56> _parents;
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author10 Author
        {
            get { return _author; }
            set 
            {
                if (_author != value)
                {
                    _author = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Commit8 Commit
        {
            get { return _commit; }
            set 
            {
                if (_commit != value)
                {
                    _commit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("committer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Committer7 Committer
        {
            get { return _committer; }
            set 
            {
                if (_committer != value)
                {
                    _committer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous56> Parents
        {
            get { return _parents; }
            set 
            {
                if (_parents != value)
                {
                    _parents = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Commit2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Commit2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Author : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Author FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Author>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Commit1 : System.ComponentModel.INotifyPropertyChanged
    {
        private Author11 _author;
        private Committer8 _committer;
        private string _message;
        private Tree3 _tree;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author11 Author
        {
            get { return _author; }
            set 
            {
                if (_author != value)
                {
                    _author = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("committer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Committer8 Committer
        {
            get { return _committer; }
            set 
            {
                if (_committer != value)
                {
                    _committer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tree", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tree3 Tree
        {
            get { return _tree; }
            set 
            {
                if (_tree != value)
                {
                    _tree = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Commit1 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Commit1>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Committer : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Committer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Committer>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous31 : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _additions;
        private string _blob_url;
        private int? _changes;
        private int? _deletions;
        private string _filename;
        private string _patch;
        private string _raw_url;
        private string _status;
    
        [Newtonsoft.Json.JsonProperty("additions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Additions
        {
            get { return _additions; }
            set 
            {
                if (_additions != value)
                {
                    _additions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("blob_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Blob_url
        {
            get { return _blob_url; }
            set 
            {
                if (_blob_url != value)
                {
                    _blob_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("changes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Changes
        {
            get { return _changes; }
            set 
            {
                if (_changes != value)
                {
                    _changes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deletions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Deletions
        {
            get { return _deletions; }
            set 
            {
                if (_deletions != value)
                {
                    _deletions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("filename", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filename
        {
            get { return _filename; }
            set 
            {
                if (_filename != value)
                {
                    _filename = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("patch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patch
        {
            get { return _patch; }
            set 
            {
                if (_patch != value)
                {
                    _patch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("raw_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Raw_url
        {
            get { return _raw_url; }
            set 
            {
                if (_raw_url != value)
                {
                    _raw_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous31 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous31>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous32 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous32 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous32>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Stats : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _additions;
        private int? _deletions;
        private int? _total;
    
        [Newtonsoft.Json.JsonProperty("additions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Additions
        {
            get { return _additions; }
            set 
            {
                if (_additions != value)
                {
                    _additions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deletions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Deletions
        {
            get { return _deletions; }
            set 
            {
                if (_deletions != value)
                {
                    _deletions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total
        {
            get { return _total; }
            set 
            {
                if (_total != value)
                {
                    _total = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Stats FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Stats>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Base_commit : System.ComponentModel.INotifyPropertyChanged
    {
        private Author12 _author;
        private Commit9 _commit;
        private Committer9 _committer;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous57> _parents;
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author12 Author
        {
            get { return _author; }
            set 
            {
                if (_author != value)
                {
                    _author = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Commit9 Commit
        {
            get { return _commit; }
            set 
            {
                if (_commit != value)
                {
                    _commit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("committer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Committer9 Committer
        {
            get { return _committer; }
            set 
            {
                if (_committer != value)
                {
                    _committer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous57> Parents
        {
            get { return _parents; }
            set 
            {
                if (_parents != value)
                {
                    _parents = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Base_commit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Base_commit>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous33 : System.ComponentModel.INotifyPropertyChanged
    {
        private Author13 _author;
        private Commit10 _commit;
        private Committer10 _committer;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous58> _parents;
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author13 Author
        {
            get { return _author; }
            set 
            {
                if (_author != value)
                {
                    _author = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Commit10 Commit
        {
            get { return _commit; }
            set 
            {
                if (_commit != value)
                {
                    _commit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("committer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Committer10 Committer
        {
            get { return _committer; }
            set 
            {
                if (_committer != value)
                {
                    _committer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous58> Parents
        {
            get { return _parents; }
            set 
            {
                if (_parents != value)
                {
                    _parents = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous33 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous33>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous34 : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _additions;
        private string _blob_url;
        private int? _changes;
        private string _contents_url;
        private int? _deletions;
        private string _filename;
        private string _patch;
        private string _raw_url;
        private string _sha;
        private string _status;
    
        [Newtonsoft.Json.JsonProperty("additions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Additions
        {
            get { return _additions; }
            set 
            {
                if (_additions != value)
                {
                    _additions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("blob_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Blob_url
        {
            get { return _blob_url; }
            set 
            {
                if (_blob_url != value)
                {
                    _blob_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("changes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Changes
        {
            get { return _changes; }
            set 
            {
                if (_changes != value)
                {
                    _changes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contents_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contents_url
        {
            get { return _contents_url; }
            set 
            {
                if (_contents_url != value)
                {
                    _contents_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deletions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Deletions
        {
            get { return _deletions; }
            set 
            {
                if (_deletions != value)
                {
                    _deletions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("filename", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filename
        {
            get { return _filename; }
            set 
            {
                if (_filename != value)
                {
                    _filename = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("patch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patch
        {
            get { return _patch; }
            set 
            {
                if (_patch != value)
                {
                    _patch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("raw_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Raw_url
        {
            get { return _raw_url; }
            set 
            {
                if (_raw_url != value)
                {
                    _raw_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous34 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous34>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class _links2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _git;
        private string _html;
        private string _self;
    
        [Newtonsoft.Json.JsonProperty("git", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git
        {
            get { return _git; }
            set 
            {
                if (_git != value)
                {
                    _git = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html
        {
            get { return _html; }
            set 
            {
                if (_html != value)
                {
                    _html = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self
        {
            get { return _self; }
            set 
            {
                if (_self != value)
                {
                    _self = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static _links2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<_links2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Commit3 : System.ComponentModel.INotifyPropertyChanged
    {
        private Author14 _author;
        private Committer11 _committer;
        private string _html_url;
        private string _message;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous59> _parents;
        private string _sha;
        private Tree4 _tree;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author14 Author
        {
            get { return _author; }
            set 
            {
                if (_author != value)
                {
                    _author = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("committer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Committer11 Committer
        {
            get { return _committer; }
            set 
            {
                if (_committer != value)
                {
                    _committer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous59> Parents
        {
            get { return _parents; }
            set 
            {
                if (_parents != value)
                {
                    _parents = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tree", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tree4 Tree
        {
            get { return _tree; }
            set 
            {
                if (_tree != value)
                {
                    _tree = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Commit3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Commit3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Content : System.ComponentModel.INotifyPropertyChanged
    {
        private _links9 __links;
        private string _git_url;
        private string _html_url;
        private string _name;
        private string _path;
        private string _sha;
        private int? _size;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public _links9 _links
        {
            get { return __links; }
            set 
            {
                if (__links != value)
                {
                    __links = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_url
        {
            get { return _git_url; }
            set 
            {
                if (_git_url != value)
                {
                    _git_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path
        {
            get { return _path; }
            set 
            {
                if (_path != value)
                {
                    _path = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Content FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Content>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Committer2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _email;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Committer2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Committer2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Commit4 : System.ComponentModel.INotifyPropertyChanged
    {
        private Author15 _author;
        private Committer12 _committer;
        private string _html_url;
        private string _message;
        private Parents _parents;
        private string _sha;
        private Tree5 _tree;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author15 Author
        {
            get { return _author; }
            set 
            {
                if (_author != value)
                {
                    _author = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("committer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Committer12 Committer
        {
            get { return _committer; }
            set 
            {
                if (_committer != value)
                {
                    _committer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Parents Parents
        {
            get { return _parents; }
            set 
            {
                if (_parents != value)
                {
                    _parents = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tree", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tree5 Tree
        {
            get { return _tree; }
            set 
            {
                if (_tree != value)
                {
                    _tree = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Commit4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Commit4>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Committer3 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _email;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Committer3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Committer3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Payload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _deploy_user;
        private string _environment;
        private double? _room_id;
    
        [Newtonsoft.Json.JsonProperty("deploy_user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deploy_user
        {
            get { return _deploy_user; }
            set 
            {
                if (_deploy_user != value)
                {
                    _deploy_user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Environment
        {
            get { return _environment; }
            set 
            {
                if (_environment != value)
                {
                    _environment = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("room_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Room_id
        {
            get { return _room_id; }
            set 
            {
                if (_room_id != value)
                {
                    _room_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Payload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Payload>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Creator : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _events_url;
        private string _followers_url;
        private string _following_url;
        private string _gists_url;
        private string _gravatar_id;
        private string _html_url;
        private int? _id;
        private string _login;
        private string _organizations_url;
        private string _received_events_url;
        private string _repos_url;
        private bool? _site_admin;
        private string _starred_url;
        private string _subscriptions_url;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url
        {
            get { return _events_url; }
            set 
            {
                if (_events_url != value)
                {
                    _events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url
        {
            get { return _followers_url; }
            set 
            {
                if (_followers_url != value)
                {
                    _followers_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url
        {
            get { return _following_url; }
            set 
            {
                if (_following_url != value)
                {
                    _following_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url
        {
            get { return _gists_url; }
            set 
            {
                if (_gists_url != value)
                {
                    _gists_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url
        {
            get { return _organizations_url; }
            set 
            {
                if (_organizations_url != value)
                {
                    _organizations_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url
        {
            get { return _received_events_url; }
            set 
            {
                if (_received_events_url != value)
                {
                    _received_events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url
        {
            get { return _repos_url; }
            set 
            {
                if (_repos_url != value)
                {
                    _repos_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("site_admin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Site_admin
        {
            get { return _site_admin; }
            set 
            {
                if (_site_admin != value)
                {
                    _site_admin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url
        {
            get { return _starred_url; }
            set 
            {
                if (_starred_url != value)
                {
                    _starred_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url
        {
            get { return _subscriptions_url; }
            set 
            {
                if (_subscriptions_url != value)
                {
                    _subscriptions_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Creator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Creator>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum EditTeamPermission
    {
        [System.Runtime.Serialization.EnumMember(Value = "pull")]
        Pull = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "push")]
        Push = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "admin")]
        Admin = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Actor : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Actor FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Actor>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Issue2 : System.ComponentModel.INotifyPropertyChanged
    {
        private Assignee2 _assignee;
        private string _body;
        private string _closed_at;
        private int? _comments;
        private string _created_at;
        private string _html_url;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous60> _labels;
        private Milestone3 _milestone;
        private int? _number;
        private Pull_request2 _pull_request;
        private Issue2State? _state;
        private string _title;
        private string _updated_at;
        private string _url;
        private User14 _user;
    
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Assignee2 Assignee
        {
            get { return _assignee; }
            set 
            {
                if (_assignee != value)
                {
                    _assignee = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("closed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Closed_at
        {
            get { return _closed_at; }
            set 
            {
                if (_closed_at != value)
                {
                    _closed_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Comments
        {
            get { return _comments; }
            set 
            {
                if (_comments != value)
                {
                    _comments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous60> Labels
        {
            get { return _labels; }
            set 
            {
                if (_labels != value)
                {
                    _labels = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("milestone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Milestone3 Milestone
        {
            get { return _milestone; }
            set 
            {
                if (_milestone != value)
                {
                    _milestone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pull_request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pull_request2 Pull_request
        {
            get { return _pull_request; }
            set 
            {
                if (_pull_request != value)
                {
                    _pull_request = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Issue2State? State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User14 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Issue2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Issue2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Actor2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Actor2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Actor2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Org : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Org FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Org>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Repo2 : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private string _name;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Repo2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Repo2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class _links3 : System.ComponentModel.INotifyPropertyChanged
    {
        private Current_user _current_user;
        private Current_user_actor _current_user_actor;
        private Current_user_organization _current_user_organization;
        private Current_user_public _current_user_public;
        private Timeline _timeline;
        private User15 _user;
    
        [Newtonsoft.Json.JsonProperty("current_user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Current_user Current_user
        {
            get { return _current_user; }
            set 
            {
                if (_current_user != value)
                {
                    _current_user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("current_user_actor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Current_user_actor Current_user_actor
        {
            get { return _current_user_actor; }
            set 
            {
                if (_current_user_actor != value)
                {
                    _current_user_actor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("current_user_organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Current_user_organization Current_user_organization
        {
            get { return _current_user_organization; }
            set 
            {
                if (_current_user_organization != value)
                {
                    _current_user_organization = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("current_user_public", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Current_user_public Current_user_public
        {
            get { return _current_user_public; }
            set 
            {
                if (_current_user_public != value)
                {
                    _current_user_public = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("timeline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Timeline Timeline
        {
            get { return _timeline; }
            set 
            {
                if (_timeline != value)
                {
                    _timeline = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User15 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static _links3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<_links3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Owner : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Owner FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Owner>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Files : System.ComponentModel.INotifyPropertyChanged
    {
        private RingErl _ringErl;
    
        [Newtonsoft.Json.JsonProperty("ring.erl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RingErl RingErl
        {
            get { return _ringErl; }
            set 
            {
                if (_ringErl != value)
                {
                    _ringErl = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Files FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Files>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous35 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _created_at;
        private string _url;
        private User16 _user;
    
        /// <summary>Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User16 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous35 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous35>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous36 : System.ComponentModel.INotifyPropertyChanged
    {
        private Change_status _change_status;
        private string _committed_at;
        private string _url;
        private User17 _user;
        private string _version;
    
        [Newtonsoft.Json.JsonProperty("change_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Change_status Change_status
        {
            get { return _change_status; }
            set 
            {
                if (_change_status != value)
                {
                    _change_status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.</summary>
        [Newtonsoft.Json.JsonProperty("committed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Committed_at
        {
            get { return _committed_at; }
            set 
            {
                if (_committed_at != value)
                {
                    _committed_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User17 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version
        {
            get { return _version; }
            set 
            {
                if (_version != value)
                {
                    _version = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous36 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous36>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User3 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Author2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Author2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Author2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Object : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Object FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Object>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User4 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User4>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Author3 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _events_url;
        private string _followers_url;
        private string _following_url;
        private string _gists_url;
        private string _gravatar_id;
        private string _html_url;
        private int? _id;
        private string _login;
        private string _organizations_url;
        private string _received_events_url;
        private string _repos_url;
        private string _starred_url;
        private string _subscriptions_url;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url
        {
            get { return _events_url; }
            set 
            {
                if (_events_url != value)
                {
                    _events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url
        {
            get { return _followers_url; }
            set 
            {
                if (_followers_url != value)
                {
                    _followers_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url
        {
            get { return _following_url; }
            set 
            {
                if (_following_url != value)
                {
                    _following_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url
        {
            get { return _gists_url; }
            set 
            {
                if (_gists_url != value)
                {
                    _gists_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url
        {
            get { return _organizations_url; }
            set 
            {
                if (_organizations_url != value)
                {
                    _organizations_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url
        {
            get { return _received_events_url; }
            set 
            {
                if (_received_events_url != value)
                {
                    _received_events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url
        {
            get { return _repos_url; }
            set 
            {
                if (_repos_url != value)
                {
                    _repos_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url
        {
            get { return _starred_url; }
            set 
            {
                if (_starred_url != value)
                {
                    _starred_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url
        {
            get { return _subscriptions_url; }
            set 
            {
                if (_subscriptions_url != value)
                {
                    _subscriptions_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Author3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Author3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Commit5 : System.ComponentModel.INotifyPropertyChanged
    {
        private Author16 _author;
        private int? _comment_count;
        private Committer13 _committer;
        private string _message;
        private Tree6 _tree;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author16 Author
        {
            get { return _author; }
            set 
            {
                if (_author != value)
                {
                    _author = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("comment_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Comment_count
        {
            get { return _comment_count; }
            set 
            {
                if (_comment_count != value)
                {
                    _comment_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("committer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Committer13 Committer
        {
            get { return _committer; }
            set 
            {
                if (_committer != value)
                {
                    _committer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tree", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tree6 Tree
        {
            get { return _tree; }
            set 
            {
                if (_tree != value)
                {
                    _tree = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Commit5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Commit5>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Committer4 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _events_url;
        private string _followers_url;
        private string _following_url;
        private string _gists_url;
        private string _gravatar_id;
        private string _html_url;
        private int? _id;
        private string _login;
        private string _organizations_url;
        private string _received_events_url;
        private string _repos_url;
        private string _starred_url;
        private string _subscriptions_url;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url
        {
            get { return _events_url; }
            set 
            {
                if (_events_url != value)
                {
                    _events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url
        {
            get { return _followers_url; }
            set 
            {
                if (_followers_url != value)
                {
                    _followers_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url
        {
            get { return _following_url; }
            set 
            {
                if (_following_url != value)
                {
                    _following_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url
        {
            get { return _gists_url; }
            set 
            {
                if (_gists_url != value)
                {
                    _gists_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url
        {
            get { return _organizations_url; }
            set 
            {
                if (_organizations_url != value)
                {
                    _organizations_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url
        {
            get { return _received_events_url; }
            set 
            {
                if (_received_events_url != value)
                {
                    _received_events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url
        {
            get { return _repos_url; }
            set 
            {
                if (_repos_url != value)
                {
                    _repos_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url
        {
            get { return _starred_url; }
            set 
            {
                if (_starred_url != value)
                {
                    _starred_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url
        {
            get { return _subscriptions_url; }
            set 
            {
                if (_subscriptions_url != value)
                {
                    _subscriptions_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Committer4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Committer4>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous37 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous37 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous37>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Creator2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Creator2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Creator2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum MilestoneState
    {
        [System.Runtime.Serialization.EnumMember(Value = "open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "closed")]
        Closed = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Repository : System.ComponentModel.INotifyPropertyChanged
    {
        private string _description;
        private bool? _fork;
        private string _full_name;
        private string _html_url;
        private int? _id;
        private string _name;
        private Owner8 _owner;
        private bool? _private;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fork
        {
            get { return _fork; }
            set 
            {
                if (_fork != value)
                {
                    _fork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name
        {
            get { return _full_name; }
            set 
            {
                if (_full_name != value)
                {
                    _full_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Owner8 Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Private
        {
            get { return _private; }
            set 
            {
                if (_private != value)
                {
                    _private = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Repository FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Repository>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Subject : System.ComponentModel.INotifyPropertyChanged
    {
        private string _latest_comment_url;
        private string _title;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("latest_comment_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Latest_comment_url
        {
            get { return _latest_comment_url; }
            set 
            {
                if (_latest_comment_url != value)
                {
                    _latest_comment_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Subject FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Subject>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum OrgTeamsPostPermission
    {
        [System.Runtime.Serialization.EnumMember(Value = "pull")]
        Pull = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "push")]
        Push = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "admin")]
        Admin = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous38 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _code;
        private string _field;
        private string _resource;
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code
        {
            get { return _code; }
            set 
            {
                if (_code != value)
                {
                    _code = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field
        {
            get { return _field; }
            set 
            {
                if (_field != value)
                {
                    _field = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("resource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Resource
        {
            get { return _resource; }
            set 
            {
                if (_resource != value)
                {
                    _resource = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous38 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous38>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Files2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _delete_this_fileTxt;
        private File1Txt _file1Txt;
        private New_fileTxt _new_fileTxt;
        private Old_nameTxt _old_nameTxt;
    
        [Newtonsoft.Json.JsonProperty("delete_this_file.txt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Delete_this_fileTxt
        {
            get { return _delete_this_fileTxt; }
            set 
            {
                if (_delete_this_fileTxt != value)
                {
                    _delete_this_fileTxt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("file1.txt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public File1Txt File1Txt
        {
            get { return _file1Txt; }
            set 
            {
                if (_file1Txt != value)
                {
                    _file1Txt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("new_file.txt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public New_fileTxt New_fileTxt
        {
            get { return _new_fileTxt; }
            set 
            {
                if (_new_fileTxt != value)
                {
                    _new_fileTxt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("old_name.txt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Old_nameTxt Old_nameTxt
        {
            get { return _old_nameTxt; }
            set 
            {
                if (_old_nameTxt != value)
                {
                    _old_nameTxt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Files2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Files2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Files3 : System.ComponentModel.INotifyPropertyChanged
    {
        private File1Txt2 _file1Txt;
    
        [Newtonsoft.Json.JsonProperty("file1.txt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public File1Txt2 File1Txt
        {
            get { return _file1Txt; }
            set 
            {
                if (_file1Txt != value)
                {
                    _file1Txt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Files3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Files3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class _links4 : System.ComponentModel.INotifyPropertyChanged
    {
        private Comments _comments;
        private Html _html;
        private Review_comments _review_comments;
        private Self _self;
    
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments
        {
            get { return _comments; }
            set 
            {
                if (_comments != value)
                {
                    _comments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Html Html
        {
            get { return _html; }
            set 
            {
                if (_html != value)
                {
                    _html = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("review_comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Review_comments Review_comments
        {
            get { return _review_comments; }
            set 
            {
                if (_review_comments != value)
                {
                    _review_comments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Self Self
        {
            get { return _self; }
            set 
            {
                if (_self != value)
                {
                    _self = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static _links4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<_links4>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Base : System.ComponentModel.INotifyPropertyChanged
    {
        private string _label;
        private string _ref;
        private Repo3 _repo;
        private string _sha;
        private User18 _user;
    
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label
        {
            get { return _label; }
            set 
            {
                if (_label != value)
                {
                    _label = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref
        {
            get { return _ref; }
            set 
            {
                if (_ref != value)
                {
                    _ref = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Repo3 Repo
        {
            get { return _repo; }
            set 
            {
                if (_repo != value)
                {
                    _repo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User18 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Base FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Base>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Head : System.ComponentModel.INotifyPropertyChanged
    {
        private string _label;
        private string _ref;
        private Repo4 _repo;
        private string _sha;
        private User19 _user;
    
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label
        {
            get { return _label; }
            set 
            {
                if (_label != value)
                {
                    _label = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref
        {
            get { return _ref; }
            set 
            {
                if (_ref != value)
                {
                    _ref = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Repo4 Repo
        {
            get { return _repo; }
            set 
            {
                if (_repo != value)
                {
                    _repo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User19 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Head FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Head>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Merged_by : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Merged_by FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Merged_by>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User5 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User5>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class _links5 : System.ComponentModel.INotifyPropertyChanged
    {
        private Html2 _html;
        private Pull_request3 _pull_request;
        private Self2 _self;
    
        [Newtonsoft.Json.JsonProperty("html", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Html2 Html
        {
            get { return _html; }
            set 
            {
                if (_html != value)
                {
                    _html = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pull_request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pull_request3 Pull_request
        {
            get { return _pull_request; }
            set 
            {
                if (_pull_request != value)
                {
                    _pull_request = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Self2 Self
        {
            get { return _self; }
            set 
            {
                if (_self != value)
                {
                    _self = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static _links5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<_links5>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User6 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User6>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Rate : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _limit;
        private int? _remaining;
        private int? _reset;
    
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit
        {
            get { return _limit; }
            set 
            {
                if (_limit != value)
                {
                    _limit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("remaining", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Remaining
        {
            get { return _remaining; }
            set 
            {
                if (_remaining != value)
                {
                    _remaining = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Reset
        {
            get { return _reset; }
            set 
            {
                if (_reset != value)
                {
                    _reset = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Rate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Rate>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class _links6 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _git;
        private string _html;
        private string _self;
    
        [Newtonsoft.Json.JsonProperty("git", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git
        {
            get { return _git; }
            set 
            {
                if (_git != value)
                {
                    _git = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html
        {
            get { return _html; }
            set 
            {
                if (_html != value)
                {
                    _html = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self
        {
            get { return _self; }
            set 
            {
                if (_self != value)
                {
                    _self = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static _links6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<_links6>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Object2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Object2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Object2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous39 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _content_type;
        private string _created_at;
        private int? _download_count;
        private int? _id;
        private string _label;
        private string _name;
        private int? _size;
        private string _state;
        private string _updated_at;
        private Uploader3 _uploader;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("content_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content_type
        {
            get { return _content_type; }
            set 
            {
                if (_content_type != value)
                {
                    _content_type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("download_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Download_count
        {
            get { return _download_count; }
            set 
            {
                if (_download_count != value)
                {
                    _download_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label
        {
            get { return _label; }
            set 
            {
                if (_label != value)
                {
                    _label = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uploader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Uploader3 Uploader
        {
            get { return _uploader; }
            set 
            {
                if (_uploader != value)
                {
                    _uploader = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous39 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous39>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Author4 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _events_url;
        private string _followers_url;
        private string _following_url;
        private string _gists_url;
        private string _gravatar_id;
        private string _html_url;
        private int? _id;
        private string _login;
        private string _organizations_url;
        private string _received_events_url;
        private string _repos_url;
        private bool? _site_admin;
        private string _starred_url;
        private string _subscriptions_url;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url
        {
            get { return _events_url; }
            set 
            {
                if (_events_url != value)
                {
                    _events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url
        {
            get { return _followers_url; }
            set 
            {
                if (_followers_url != value)
                {
                    _followers_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url
        {
            get { return _following_url; }
            set 
            {
                if (_following_url != value)
                {
                    _following_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url
        {
            get { return _gists_url; }
            set 
            {
                if (_gists_url != value)
                {
                    _gists_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url
        {
            get { return _organizations_url; }
            set 
            {
                if (_organizations_url != value)
                {
                    _organizations_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url
        {
            get { return _received_events_url; }
            set 
            {
                if (_received_events_url != value)
                {
                    _received_events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url
        {
            get { return _repos_url; }
            set 
            {
                if (_repos_url != value)
                {
                    _repos_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("site_admin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Site_admin
        {
            get { return _site_admin; }
            set 
            {
                if (_site_admin != value)
                {
                    _site_admin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url
        {
            get { return _starred_url; }
            set 
            {
                if (_starred_url != value)
                {
                    _starred_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url
        {
            get { return _subscriptions_url; }
            set 
            {
                if (_subscriptions_url != value)
                {
                    _subscriptions_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Author4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Author4>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Organization2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Organization2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Organization2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Owner2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Owner2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Owner2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Parent : System.ComponentModel.INotifyPropertyChanged
    {
        private string _clone_url;
        private string _created_at;
        private string _description;
        private bool? _fork;
        private int? _forks;
        private int? _forks_count;
        private string _full_name;
        private string _git_url;
        private string _homepage;
        private string _html_url;
        private int? _id;
        private string _language;
        private string _master_branch;
        private string _mirror_url;
        private string _name;
        private int? _open_issues;
        private int? _open_issues_count;
        private Owner9 _owner;
        private bool? _private;
        private string _pushed_at;
        private int? _size;
        private string _ssh_url;
        private string _svn_url;
        private string _updated_at;
        private string _url;
        private int? _watchers;
        private int? _watchers_count;
    
        [Newtonsoft.Json.JsonProperty("clone_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Clone_url
        {
            get { return _clone_url; }
            set 
            {
                if (_clone_url != value)
                {
                    _clone_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fork
        {
            get { return _fork; }
            set 
            {
                if (_fork != value)
                {
                    _fork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks
        {
            get { return _forks; }
            set 
            {
                if (_forks != value)
                {
                    _forks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks_count
        {
            get { return _forks_count; }
            set 
            {
                if (_forks_count != value)
                {
                    _forks_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name
        {
            get { return _full_name; }
            set 
            {
                if (_full_name != value)
                {
                    _full_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_url
        {
            get { return _git_url; }
            set 
            {
                if (_git_url != value)
                {
                    _git_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Homepage
        {
            get { return _homepage; }
            set 
            {
                if (_homepage != value)
                {
                    _homepage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("master_branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Master_branch
        {
            get { return _master_branch; }
            set 
            {
                if (_master_branch != value)
                {
                    _master_branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mirror_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mirror_url
        {
            get { return _mirror_url; }
            set 
            {
                if (_mirror_url != value)
                {
                    _mirror_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues
        {
            get { return _open_issues; }
            set 
            {
                if (_open_issues != value)
                {
                    _open_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues_count
        {
            get { return _open_issues_count; }
            set 
            {
                if (_open_issues_count != value)
                {
                    _open_issues_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Owner9 Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Private
        {
            get { return _private; }
            set 
            {
                if (_private != value)
                {
                    _private = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("pushed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pushed_at
        {
            get { return _pushed_at; }
            set 
            {
                if (_pushed_at != value)
                {
                    _pushed_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ssh_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ssh_url
        {
            get { return _ssh_url; }
            set 
            {
                if (_ssh_url != value)
                {
                    _ssh_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("svn_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Svn_url
        {
            get { return _svn_url; }
            set 
            {
                if (_svn_url != value)
                {
                    _svn_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers
        {
            get { return _watchers; }
            set 
            {
                if (_watchers != value)
                {
                    _watchers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers_count
        {
            get { return _watchers_count; }
            set 
            {
                if (_watchers_count != value)
                {
                    _watchers_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Parent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Parent>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Source : System.ComponentModel.INotifyPropertyChanged
    {
        private string _clone_url;
        private string _created_at;
        private string _description;
        private bool? _fork;
        private int? _forks;
        private int? _forks_count;
        private string _full_name;
        private string _git_url;
        private string _homepage;
        private string _html_url;
        private int? _id;
        private string _language;
        private string _master_branch;
        private string _mirror_url;
        private string _name;
        private int? _open_issues;
        private int? _open_issues_count;
        private Owner10 _owner;
        private bool? _private;
        private string _pushed_at;
        private int? _size;
        private string _ssh_url;
        private string _svn_url;
        private string _updated_at;
        private string _url;
        private int? _watchers;
        private int? _watchers_count;
    
        [Newtonsoft.Json.JsonProperty("clone_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Clone_url
        {
            get { return _clone_url; }
            set 
            {
                if (_clone_url != value)
                {
                    _clone_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fork
        {
            get { return _fork; }
            set 
            {
                if (_fork != value)
                {
                    _fork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks
        {
            get { return _forks; }
            set 
            {
                if (_forks != value)
                {
                    _forks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks_count
        {
            get { return _forks_count; }
            set 
            {
                if (_forks_count != value)
                {
                    _forks_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name
        {
            get { return _full_name; }
            set 
            {
                if (_full_name != value)
                {
                    _full_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_url
        {
            get { return _git_url; }
            set 
            {
                if (_git_url != value)
                {
                    _git_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Homepage
        {
            get { return _homepage; }
            set 
            {
                if (_homepage != value)
                {
                    _homepage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("master_branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Master_branch
        {
            get { return _master_branch; }
            set 
            {
                if (_master_branch != value)
                {
                    _master_branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mirror_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mirror_url
        {
            get { return _mirror_url; }
            set 
            {
                if (_mirror_url != value)
                {
                    _mirror_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues
        {
            get { return _open_issues; }
            set 
            {
                if (_open_issues != value)
                {
                    _open_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues_count
        {
            get { return _open_issues_count; }
            set 
            {
                if (_open_issues_count != value)
                {
                    _open_issues_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Owner10 Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Private
        {
            get { return _private; }
            set 
            {
                if (_private != value)
                {
                    _private = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("pushed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pushed_at
        {
            get { return _pushed_at; }
            set 
            {
                if (_pushed_at != value)
                {
                    _pushed_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ssh_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ssh_url
        {
            get { return _ssh_url; }
            set 
            {
                if (_ssh_url != value)
                {
                    _ssh_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("svn_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Svn_url
        {
            get { return _svn_url; }
            set 
            {
                if (_svn_url != value)
                {
                    _svn_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers
        {
            get { return _watchers; }
            set 
            {
                if (_watchers != value)
                {
                    _watchers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers_count
        {
            get { return _watchers_count; }
            set 
            {
                if (_watchers_count != value)
                {
                    _watchers_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Source FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Source>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Author5 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Author5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Author5>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Committer5 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Committer5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Committer5>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous40 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous40 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous40>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Tree2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tree2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tree2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Author6 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Author6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Author6>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous41 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _git_url;
        private string _html_url;
        private string _name;
        private string _path;
        private Repository2 _repository;
        private double? _score;
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("git_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_url
        {
            get { return _git_url; }
            set 
            {
                if (_git_url != value)
                {
                    _git_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path
        {
            get { return _path; }
            set 
            {
                if (_path != value)
                {
                    _path = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repository", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Repository2 Repository
        {
            get { return _repository; }
            set 
            {
                if (_repository != value)
                {
                    _repository = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Score
        {
            get { return _score; }
            set 
            {
                if (_score != value)
                {
                    _score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous41 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous41>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous42 : System.ComponentModel.INotifyPropertyChanged
    {
        private Assignee3 _assignee;
        private string _body;
        private Closed_at _closed_at;
        private int? _comments;
        private string _comments_url;
        private string _created_at;
        private string _events_url;
        private string _html_url;
        private int? _id;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous61> _labels;
        private string _labels_url;
        private Milestone4 _milestone;
        private int? _number;
        private Pull_request4 _pull_request;
        private double? _score;
        private string _state;
        private string _title;
        private string _updated_at;
        private string _url;
        private User20 _user;
    
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Assignee3 Assignee
        {
            get { return _assignee; }
            set 
            {
                if (_assignee != value)
                {
                    _assignee = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("closed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Closed_at Closed_at
        {
            get { return _closed_at; }
            set 
            {
                if (_closed_at != value)
                {
                    _closed_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Comments
        {
            get { return _comments; }
            set 
            {
                if (_comments != value)
                {
                    _comments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("comments_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments_url
        {
            get { return _comments_url; }
            set 
            {
                if (_comments_url != value)
                {
                    _comments_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url
        {
            get { return _events_url; }
            set 
            {
                if (_events_url != value)
                {
                    _events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous61> Labels
        {
            get { return _labels; }
            set 
            {
                if (_labels != value)
                {
                    _labels = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("labels_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Labels_url
        {
            get { return _labels_url; }
            set 
            {
                if (_labels_url != value)
                {
                    _labels_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("milestone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Milestone4 Milestone
        {
            get { return _milestone; }
            set 
            {
                if (_milestone != value)
                {
                    _milestone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pull_request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pull_request4 Pull_request
        {
            get { return _pull_request; }
            set 
            {
                if (_pull_request != value)
                {
                    _pull_request = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Score
        {
            get { return _score; }
            set 
            {
                if (_score != value)
                {
                    _score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User20 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous42 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous42>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous43 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _body;
        private int? _comments;
        private string _created_at;
        private string _gravatar_id;
        private string _html_url;
        private System.Collections.ObjectModel.ObservableCollection<string> _labels;
        private int? _number;
        private int? _position;
        private string _state;
        private string _title;
        private string _updated_at;
        private string _user;
        private int? _votes;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body
        {
            get { return _body; }
            set 
            {
                if (_body != value)
                {
                    _body = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Comments
        {
            get { return _comments; }
            set 
            {
                if (_comments != value)
                {
                    _comments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Labels
        {
            get { return _labels; }
            set 
            {
                if (_labels != value)
                {
                    _labels = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Position
        {
            get { return _position; }
            set 
            {
                if (_position != value)
                {
                    _position = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("votes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Votes
        {
            get { return _votes; }
            set 
            {
                if (_votes != value)
                {
                    _votes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous43 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous43>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous44 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _created_at;
        private string _default_branch;
        private string _description;
        private bool? _fork;
        private int? _forks;
        private int? _forks_count;
        private string _full_name;
        private string _homepage;
        private string _html_url;
        private int? _id;
        private string _language;
        private string _master_branch;
        private string _name;
        private int? _open_issues;
        private int? _open_issues_count;
        private Owner11 _owner;
        private bool? _private;
        private string _pushed_at;
        private double? _score;
        private int? _size;
        private string _updated_at;
        private string _url;
        private int? _watchers;
        private int? _watchers_count;
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("default_branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Default_branch
        {
            get { return _default_branch; }
            set 
            {
                if (_default_branch != value)
                {
                    _default_branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fork
        {
            get { return _fork; }
            set 
            {
                if (_fork != value)
                {
                    _fork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks
        {
            get { return _forks; }
            set 
            {
                if (_forks != value)
                {
                    _forks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks_count
        {
            get { return _forks_count; }
            set 
            {
                if (_forks_count != value)
                {
                    _forks_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name
        {
            get { return _full_name; }
            set 
            {
                if (_full_name != value)
                {
                    _full_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Homepage
        {
            get { return _homepage; }
            set 
            {
                if (_homepage != value)
                {
                    _homepage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("master_branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Master_branch
        {
            get { return _master_branch; }
            set 
            {
                if (_master_branch != value)
                {
                    _master_branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues
        {
            get { return _open_issues; }
            set 
            {
                if (_open_issues != value)
                {
                    _open_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues_count
        {
            get { return _open_issues_count; }
            set 
            {
                if (_open_issues_count != value)
                {
                    _open_issues_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Owner11 Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Private
        {
            get { return _private; }
            set 
            {
                if (_private != value)
                {
                    _private = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("pushed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pushed_at
        {
            get { return _pushed_at; }
            set 
            {
                if (_pushed_at != value)
                {
                    _pushed_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Score
        {
            get { return _score; }
            set 
            {
                if (_score != value)
                {
                    _score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers
        {
            get { return _watchers; }
            set 
            {
                if (_watchers != value)
                {
                    _watchers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers_count
        {
            get { return _watchers_count; }
            set 
            {
                if (_watchers_count != value)
                {
                    _watchers_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous44 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous44>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous45 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _created;
        private string _created_at;
        private string _description;
        private int? _followers;
        private bool? _fork;
        private int? _forks;
        private bool? _has_downloads;
        private bool? _has_issues;
        private bool? _has_wiki;
        private string _homepage;
        private string _language;
        private string _name;
        private int? _open_issues;
        private string _owner;
        private bool? _private;
        private string _pushed;
        private string _pushed_at;
        private double? _score;
        private int? _size;
        private string _type;
        private string _url;
        private string _username;
        private int? _watchers;
    
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Followers
        {
            get { return _followers; }
            set 
            {
                if (_followers != value)
                {
                    _followers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fork
        {
            get { return _fork; }
            set 
            {
                if (_fork != value)
                {
                    _fork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks
        {
            get { return _forks; }
            set 
            {
                if (_forks != value)
                {
                    _forks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("has_downloads", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Has_downloads
        {
            get { return _has_downloads; }
            set 
            {
                if (_has_downloads != value)
                {
                    _has_downloads = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("has_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Has_issues
        {
            get { return _has_issues; }
            set 
            {
                if (_has_issues != value)
                {
                    _has_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("has_wiki", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Has_wiki
        {
            get { return _has_wiki; }
            set 
            {
                if (_has_wiki != value)
                {
                    _has_wiki = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Homepage
        {
            get { return _homepage; }
            set 
            {
                if (_homepage != value)
                {
                    _homepage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues
        {
            get { return _open_issues; }
            set 
            {
                if (_open_issues != value)
                {
                    _open_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Private
        {
            get { return _private; }
            set 
            {
                if (_private != value)
                {
                    _private = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pushed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pushed
        {
            get { return _pushed; }
            set 
            {
                if (_pushed != value)
                {
                    _pushed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pushed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pushed_at
        {
            get { return _pushed_at; }
            set 
            {
                if (_pushed_at != value)
                {
                    _pushed_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Score
        {
            get { return _score; }
            set 
            {
                if (_score != value)
                {
                    _score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set 
            {
                if (_username != value)
                {
                    _username = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers
        {
            get { return _watchers; }
            set 
            {
                if (_watchers != value)
                {
                    _watchers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous45 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous45>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User7 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _blog;
        private string _company;
        private string _created;
        private string _created_at;
        private string _email;
        private int? _followers_count;
        private int? _following_count;
        private string _gravatar_id;
        private int? _id;
        private string _location;
        private string _login;
        private string _name;
        private int? _public_gist_count;
        private int? _public_repo_count;
        private string _type;
    
        [Newtonsoft.Json.JsonProperty("blog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Blog
        {
            get { return _blog; }
            set 
            {
                if (_blog != value)
                {
                    _blog = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company
        {
            get { return _company; }
            set 
            {
                if (_company != value)
                {
                    _company = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Followers_count
        {
            get { return _followers_count; }
            set 
            {
                if (_followers_count != value)
                {
                    _followers_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Following_count
        {
            get { return _following_count; }
            set 
            {
                if (_following_count != value)
                {
                    _following_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("public_gist_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Public_gist_count
        {
            get { return _public_gist_count; }
            set 
            {
                if (_public_gist_count != value)
                {
                    _public_gist_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("public_repo_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Public_repo_count
        {
            get { return _public_repo_count; }
            set 
            {
                if (_public_repo_count != value)
                {
                    _public_repo_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User7 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User7>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous46 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _followers_url;
        private string _gravatar_id;
        private string _html_url;
        private int? _id;
        private string _login;
        private string _organizations_url;
        private string _received_events_url;
        private string _repos_url;
        private double? _score;
        private string _subscriptions_url;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url
        {
            get { return _followers_url; }
            set 
            {
                if (_followers_url != value)
                {
                    _followers_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url
        {
            get { return _organizations_url; }
            set 
            {
                if (_organizations_url != value)
                {
                    _organizations_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url
        {
            get { return _received_events_url; }
            set 
            {
                if (_received_events_url != value)
                {
                    _received_events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url
        {
            get { return _repos_url; }
            set 
            {
                if (_repos_url != value)
                {
                    _repos_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Score
        {
            get { return _score; }
            set 
            {
                if (_score != value)
                {
                    _score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url
        {
            get { return _subscriptions_url; }
            set 
            {
                if (_subscriptions_url != value)
                {
                    _subscriptions_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous46 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous46>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous47 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _created;
        private string _created_at;
        private int? _followers;
        private int? _followers_count;
        private string _fullname;
        private string _gravatar_id;
        private string _id;
        private string _language;
        private string _location;
        private string _login;
        private string _name;
        private int? _public_repo_count;
        private int? _repos;
        private double? _score;
        private string _type;
        private string _username;
    
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Followers
        {
            get { return _followers; }
            set 
            {
                if (_followers != value)
                {
                    _followers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Followers_count
        {
            get { return _followers_count; }
            set 
            {
                if (_followers_count != value)
                {
                    _followers_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fullname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fullname
        {
            get { return _fullname; }
            set 
            {
                if (_fullname != value)
                {
                    _fullname = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("public_repo_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Public_repo_count
        {
            get { return _public_repo_count; }
            set 
            {
                if (_public_repo_count != value)
                {
                    _public_repo_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Repos
        {
            get { return _repos; }
            set 
            {
                if (_repos != value)
                {
                    _repos = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Score
        {
            get { return _score; }
            set 
            {
                if (_score != value)
                {
                    _score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set 
            {
                if (_username != value)
                {
                    _username = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous47 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous47>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Object3 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Object3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Object3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Tagger : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tagger FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tagger>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Tagger2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        /// <summary>Timestamp of when this object was tagged.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>String of the email of the author of the tag.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>String of the name of the author of the tag.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tagger2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tagger2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous48 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _mode;
        private string _path;
        private string _sha;
        private int? _size;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mode
        {
            get { return _mode; }
            set 
            {
                if (_mode != value)
                {
                    _mode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path
        {
            get { return _path; }
            set 
            {
                if (_path != value)
                {
                    _path = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous48 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous48>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous49 : System.ComponentModel.INotifyPropertyChanged
    {
        private Mode? _mode;
        private string _path;
        private string _sha;
        private Type4? _type;
        private string _url;
    
        /// <summary>One of 100644 for file (blob), 100755 for executable (blob), 040000 for subdirectory (tree), 160000 for submodule (commit) or 120000 for a blob that specifies the path of a symlink.</summary>
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Mode? Mode
        {
            get { return _mode; }
            set 
            {
                if (_mode != value)
                {
                    _mode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path
        {
            get { return _path; }
            set 
            {
                if (_path != value)
                {
                    _path = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>SHA1 checksum ID of the object in the tree.</summary>
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type4? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous49 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous49>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Plan : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _collaborators;
        private string _name;
        private int? _private_repos;
        private int? _space;
    
        [Newtonsoft.Json.JsonProperty("collaborators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Collaborators
        {
            get { return _collaborators; }
            set 
            {
                if (_collaborators != value)
                {
                    _collaborators = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("private_repos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Private_repos
        {
            get { return _private_repos; }
            set 
            {
                if (_private_repos != value)
                {
                    _private_repos = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("space", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Space
        {
            get { return _space; }
            set 
            {
                if (_space != value)
                {
                    _space = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Plan FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Plan>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Files4 : System.ComponentModel.INotifyPropertyChanged
    {
        private RingErl2 _ringErl;
    
        [Newtonsoft.Json.JsonProperty("ring.erl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RingErl2 RingErl
        {
            get { return _ringErl; }
            set 
            {
                if (_ringErl != value)
                {
                    _ringErl = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Files4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Files4>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User8 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User8 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User8>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User9 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User9 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User9>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Assignee : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Assignee FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Assignee>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous50 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _color;
        private string _name;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color
        {
            get { return _color; }
            set 
            {
                if (_color != value)
                {
                    _color = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous50 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous50>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Milestone2 : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _closed_issues;
        private string _created_at;
        private Creator6 _creator;
        private string _description;
        private string _due_on;
        private int? _number;
        private int? _open_issues;
        private Milestone2State? _state;
        private string _title;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("closed_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Closed_issues
        {
            get { return _closed_issues; }
            set 
            {
                if (_closed_issues != value)
                {
                    _closed_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creator6 Creator
        {
            get { return _creator; }
            set 
            {
                if (_creator != value)
                {
                    _creator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("due_on", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Due_on
        {
            get { return _due_on; }
            set 
            {
                if (_due_on != value)
                {
                    _due_on = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues
        {
            get { return _open_issues; }
            set 
            {
                if (_open_issues != value)
                {
                    _open_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Milestone2State? State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Milestone2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Milestone2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Pull_request : System.ComponentModel.INotifyPropertyChanged
    {
        private string _diff_url;
        private string _html_url;
        private string _patch_url;
    
        [Newtonsoft.Json.JsonProperty("diff_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Diff_url
        {
            get { return _diff_url; }
            set 
            {
                if (_diff_url != value)
                {
                    _diff_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("patch_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patch_url
        {
            get { return _patch_url; }
            set 
            {
                if (_patch_url != value)
                {
                    _patch_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Pull_request FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Pull_request>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum State8
    {
        [System.Runtime.Serialization.EnumMember(Value = "open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "closed")]
        Closed = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User10 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User10 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User10>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Owner3 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Owner3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Owner3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Commit6 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Commit6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Commit6>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User11 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User11 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User11>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Author7 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Author7 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Author7>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Commit7 : System.ComponentModel.INotifyPropertyChanged
    {
        private Author17 _author;
        private Committer14 _committer;
        private string _message;
        private Tree7 _tree;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author17 Author
        {
            get { return _author; }
            set 
            {
                if (_author != value)
                {
                    _author = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("committer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Committer14 Committer
        {
            get { return _committer; }
            set 
            {
                if (_committer != value)
                {
                    _committer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tree", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tree7 Tree
        {
            get { return _tree; }
            set 
            {
                if (_tree != value)
                {
                    _tree = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Commit7 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Commit7>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Committer6 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Committer6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Committer6>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous51 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous51 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous51>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous52 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _context;
        private string _created_at;
        private string _description;
        private double? _id;
        private string _state;
        private string _target_url;
        private string _updated_at;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("context", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context
        {
            get { return _context; }
            set 
            {
                if (_context != value)
                {
                    _context = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("target_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target_url
        {
            get { return _target_url; }
            set 
            {
                if (_target_url != value)
                {
                    _target_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous52 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous52>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Creator3 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _events_url;
        private string _followers_url;
        private string _following_url;
        private string _gists_url;
        private string _gravatar_id;
        private string _html_url;
        private int? _id;
        private string _login;
        private string _organizations_url;
        private string _received_events_url;
        private string _repos_url;
        private bool? _site_admin;
        private string _starred_url;
        private string _subscriptions_url;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url
        {
            get { return _events_url; }
            set 
            {
                if (_events_url != value)
                {
                    _events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url
        {
            get { return _followers_url; }
            set 
            {
                if (_followers_url != value)
                {
                    _followers_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url
        {
            get { return _following_url; }
            set 
            {
                if (_following_url != value)
                {
                    _following_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url
        {
            get { return _gists_url; }
            set 
            {
                if (_gists_url != value)
                {
                    _gists_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url
        {
            get { return _organizations_url; }
            set 
            {
                if (_organizations_url != value)
                {
                    _organizations_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url
        {
            get { return _received_events_url; }
            set 
            {
                if (_received_events_url != value)
                {
                    _received_events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url
        {
            get { return _repos_url; }
            set 
            {
                if (_repos_url != value)
                {
                    _repos_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("site_admin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Site_admin
        {
            get { return _site_admin; }
            set 
            {
                if (_site_admin != value)
                {
                    _site_admin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url
        {
            get { return _starred_url; }
            set 
            {
                if (_starred_url != value)
                {
                    _starred_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url
        {
            get { return _subscriptions_url; }
            set 
            {
                if (_subscriptions_url != value)
                {
                    _subscriptions_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Creator3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Creator3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Creator4 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _events_url;
        private string _followers_url;
        private string _following_url;
        private string _gists_url;
        private string _gravatar_id;
        private string _html_url;
        private int? _id;
        private string _login;
        private string _organizations_url;
        private string _received_events_url;
        private string _repos_url;
        private bool? _site_admin;
        private string _starred_url;
        private string _subscriptions_url;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url
        {
            get { return _events_url; }
            set 
            {
                if (_events_url != value)
                {
                    _events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url
        {
            get { return _followers_url; }
            set 
            {
                if (_followers_url != value)
                {
                    _followers_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url
        {
            get { return _following_url; }
            set 
            {
                if (_following_url != value)
                {
                    _following_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url
        {
            get { return _gists_url; }
            set 
            {
                if (_gists_url != value)
                {
                    _gists_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url
        {
            get { return _organizations_url; }
            set 
            {
                if (_organizations_url != value)
                {
                    _organizations_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url
        {
            get { return _received_events_url; }
            set 
            {
                if (_received_events_url != value)
                {
                    _received_events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url
        {
            get { return _repos_url; }
            set 
            {
                if (_repos_url != value)
                {
                    _repos_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("site_admin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Site_admin
        {
            get { return _site_admin; }
            set 
            {
                if (_site_admin != value)
                {
                    _site_admin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url
        {
            get { return _starred_url; }
            set 
            {
                if (_starred_url != value)
                {
                    _starred_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url
        {
            get { return _subscriptions_url; }
            set 
            {
                if (_subscriptions_url != value)
                {
                    _subscriptions_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Creator4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Creator4>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Owner4 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Owner4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Owner4>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Object4 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Object4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Object4>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Config : System.ComponentModel.INotifyPropertyChanged
    {
        private string _content_type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("content_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content_type
        {
            get { return _content_type; }
            set 
            {
                if (_content_type != value)
                {
                    _content_type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Config FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Config>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Anonymous53
    {
        [System.Runtime.Serialization.EnumMember(Value = "push")]
        Push = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "issues")]
        Issues = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "issue_comment")]
        Issue_comment = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "commit_comment")]
        Commit_comment = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "pull_request")]
        Pull_request = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "pull_request_review_comment")]
        Pull_request_review_comment = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "gollum")]
        Gollum = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "watch")]
        Watch = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "download")]
        Download = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "fork")]
        Fork = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "fork_apply")]
        Fork_apply = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "member")]
        Member = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "public")]
        Public = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "team_add")]
        Team_add = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "status")]
        Status = 14,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class _links7 : System.ComponentModel.INotifyPropertyChanged
    {
        private Html3 _html;
        private Pull_request5 _pull_request;
        private Self3 _self;
    
        [Newtonsoft.Json.JsonProperty("html", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Html3 Html
        {
            get { return _html; }
            set 
            {
                if (_html != value)
                {
                    _html = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pull_request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pull_request5 Pull_request
        {
            get { return _pull_request; }
            set 
            {
                if (_pull_request != value)
                {
                    _pull_request = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Self3 Self
        {
            get { return _self; }
            set 
            {
                if (_self != value)
                {
                    _self = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static _links7 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<_links7>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User12 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User12 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User12>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class _links8 : System.ComponentModel.INotifyPropertyChanged
    {
        private Comments2 _comments;
        private Html4 _html;
        private Review_comments2 _review_comments;
        private Self4 _self;
    
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments2 Comments
        {
            get { return _comments; }
            set 
            {
                if (_comments != value)
                {
                    _comments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Html4 Html
        {
            get { return _html; }
            set 
            {
                if (_html != value)
                {
                    _html = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("review_comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Review_comments2 Review_comments
        {
            get { return _review_comments; }
            set 
            {
                if (_review_comments != value)
                {
                    _review_comments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Self4 Self
        {
            get { return _self; }
            set 
            {
                if (_self != value)
                {
                    _self = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static _links8 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<_links8>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Base2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _label;
        private string _ref;
        private Repo5 _repo;
        private string _sha;
        private User21 _user;
    
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label
        {
            get { return _label; }
            set 
            {
                if (_label != value)
                {
                    _label = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref
        {
            get { return _ref; }
            set 
            {
                if (_ref != value)
                {
                    _ref = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Repo5 Repo
        {
            get { return _repo; }
            set 
            {
                if (_repo != value)
                {
                    _repo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User21 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Base2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Base2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Head2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _label;
        private string _ref;
        private Repo6 _repo;
        private string _sha;
        private User22 _user;
    
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label
        {
            get { return _label; }
            set 
            {
                if (_label != value)
                {
                    _label = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref
        {
            get { return _ref; }
            set 
            {
                if (_ref != value)
                {
                    _ref = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Repo6 Repo
        {
            get { return _repo; }
            set 
            {
                if (_repo != value)
                {
                    _repo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User22 User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Head2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Head2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum State9
    {
        [System.Runtime.Serialization.EnumMember(Value = "open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "closed")]
        Closed = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User13 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User13 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User13>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous54 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _content_type;
        private string _created_at;
        private int? _download_count;
        private int? _id;
        private string _label;
        private string _name;
        private int? _size;
        private string _state;
        private string _updated_at;
        private Uploader4 _uploader;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("content_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content_type
        {
            get { return _content_type; }
            set 
            {
                if (_content_type != value)
                {
                    _content_type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("download_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Download_count
        {
            get { return _download_count; }
            set 
            {
                if (_download_count != value)
                {
                    _download_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label
        {
            get { return _label; }
            set 
            {
                if (_label != value)
                {
                    _label = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uploader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Uploader4 Uploader
        {
            get { return _uploader; }
            set 
            {
                if (_uploader != value)
                {
                    _uploader = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous54 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous54>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Author8 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _events_url;
        private string _followers_url;
        private string _following_url;
        private string _gists_url;
        private string _gravatar_id;
        private string _html_url;
        private int? _id;
        private string _login;
        private string _organizations_url;
        private string _received_events_url;
        private string _repos_url;
        private bool? _site_admin;
        private string _starred_url;
        private string _subscriptions_url;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url
        {
            get { return _events_url; }
            set 
            {
                if (_events_url != value)
                {
                    _events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url
        {
            get { return _followers_url; }
            set 
            {
                if (_followers_url != value)
                {
                    _followers_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url
        {
            get { return _following_url; }
            set 
            {
                if (_following_url != value)
                {
                    _following_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url
        {
            get { return _gists_url; }
            set 
            {
                if (_gists_url != value)
                {
                    _gists_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url
        {
            get { return _organizations_url; }
            set 
            {
                if (_organizations_url != value)
                {
                    _organizations_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url
        {
            get { return _received_events_url; }
            set 
            {
                if (_received_events_url != value)
                {
                    _received_events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url
        {
            get { return _repos_url; }
            set 
            {
                if (_repos_url != value)
                {
                    _repos_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("site_admin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Site_admin
        {
            get { return _site_admin; }
            set 
            {
                if (_site_admin != value)
                {
                    _site_admin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url
        {
            get { return _starred_url; }
            set 
            {
                if (_starred_url != value)
                {
                    _starred_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url
        {
            get { return _subscriptions_url; }
            set 
            {
                if (_subscriptions_url != value)
                {
                    _subscriptions_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Author8 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Author8>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Uploader2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _events_url;
        private string _followers_url;
        private string _following_url;
        private string _gists_url;
        private string _gravatar_id;
        private string _html_url;
        private double? _id;
        private string _login;
        private string _organizations_url;
        private string _received_events_url;
        private string _repos_url;
        private bool? _site_admin;
        private string _starred_url;
        private string _subscriptions_url;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url
        {
            get { return _events_url; }
            set 
            {
                if (_events_url != value)
                {
                    _events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url
        {
            get { return _followers_url; }
            set 
            {
                if (_followers_url != value)
                {
                    _followers_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url
        {
            get { return _following_url; }
            set 
            {
                if (_following_url != value)
                {
                    _following_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url
        {
            get { return _gists_url; }
            set 
            {
                if (_gists_url != value)
                {
                    _gists_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url
        {
            get { return _organizations_url; }
            set 
            {
                if (_organizations_url != value)
                {
                    _organizations_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url
        {
            get { return _received_events_url; }
            set 
            {
                if (_received_events_url != value)
                {
                    _received_events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url
        {
            get { return _repos_url; }
            set 
            {
                if (_repos_url != value)
                {
                    _repos_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("site_admin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Site_admin
        {
            get { return _site_admin; }
            set 
            {
                if (_site_admin != value)
                {
                    _site_admin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url
        {
            get { return _starred_url; }
            set 
            {
                if (_starred_url != value)
                {
                    _starred_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url
        {
            get { return _subscriptions_url; }
            set 
            {
                if (_subscriptions_url != value)
                {
                    _subscriptions_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Uploader2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Uploader2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Author9 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Author9 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Author9>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous55 : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _a;
        private int? _c;
        private int? _d;
        private string _w;
    
        /// <summary>Number of additions.</summary>
        [Newtonsoft.Json.JsonProperty("a", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? A
        {
            get { return _a; }
            set 
            {
                if (_a != value)
                {
                    _a = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of commits.</summary>
        [Newtonsoft.Json.JsonProperty("c", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? C
        {
            get { return _c; }
            set 
            {
                if (_c != value)
                {
                    _c = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of deletions.</summary>
        [Newtonsoft.Json.JsonProperty("d", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? D
        {
            get { return _d; }
            set 
            {
                if (_d != value)
                {
                    _d = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Start of the week.</summary>
        [Newtonsoft.Json.JsonProperty("w", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string W
        {
            get { return _w; }
            set 
            {
                if (_w != value)
                {
                    _w = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous55 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous55>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Creator5 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Creator5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Creator5>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Owner5 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Owner5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Owner5>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Language : System.ComponentModel.INotifyPropertyChanged
    {
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Language FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Language>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Owner6 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Owner6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Owner6>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Owner7 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Owner7 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Owner7>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Organization3 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Organization3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Organization3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Author10 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Author10 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Author10>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Commit8 : System.ComponentModel.INotifyPropertyChanged
    {
        private Author18 _author;
        private Committer15 _committer;
        private string _message;
        private Tree8 _tree;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author18 Author
        {
            get { return _author; }
            set 
            {
                if (_author != value)
                {
                    _author = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("committer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Committer15 Committer
        {
            get { return _committer; }
            set 
            {
                if (_committer != value)
                {
                    _committer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tree", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tree8 Tree
        {
            get { return _tree; }
            set 
            {
                if (_tree != value)
                {
                    _tree = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Commit8 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Commit8>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Committer7 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Committer7 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Committer7>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous56 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous56 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous56>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Author11 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Author11 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Author11>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Committer8 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Committer8 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Committer8>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Tree3 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tree3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tree3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Author12 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _events_url;
        private string _followers_url;
        private string _following_url;
        private string _gists_url;
        private string _gravatar_id;
        private string _html_url;
        private int? _id;
        private string _login;
        private string _organizations_url;
        private string _received_events_url;
        private string _repos_url;
        private bool? _site_admin;
        private string _starred_url;
        private string _subscriptions_url;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url
        {
            get { return _events_url; }
            set 
            {
                if (_events_url != value)
                {
                    _events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url
        {
            get { return _followers_url; }
            set 
            {
                if (_followers_url != value)
                {
                    _followers_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url
        {
            get { return _following_url; }
            set 
            {
                if (_following_url != value)
                {
                    _following_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url
        {
            get { return _gists_url; }
            set 
            {
                if (_gists_url != value)
                {
                    _gists_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url
        {
            get { return _organizations_url; }
            set 
            {
                if (_organizations_url != value)
                {
                    _organizations_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url
        {
            get { return _received_events_url; }
            set 
            {
                if (_received_events_url != value)
                {
                    _received_events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url
        {
            get { return _repos_url; }
            set 
            {
                if (_repos_url != value)
                {
                    _repos_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("site_admin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Site_admin
        {
            get { return _site_admin; }
            set 
            {
                if (_site_admin != value)
                {
                    _site_admin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url
        {
            get { return _starred_url; }
            set 
            {
                if (_starred_url != value)
                {
                    _starred_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url
        {
            get { return _subscriptions_url; }
            set 
            {
                if (_subscriptions_url != value)
                {
                    _subscriptions_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Author12 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Author12>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Commit9 : System.ComponentModel.INotifyPropertyChanged
    {
        private Author19 _author;
        private Committer16 _committer;
        private string _message;
        private Tree9 _tree;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author19 Author
        {
            get { return _author; }
            set 
            {
                if (_author != value)
                {
                    _author = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("committer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Committer16 Committer
        {
            get { return _committer; }
            set 
            {
                if (_committer != value)
                {
                    _committer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tree", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tree9 Tree
        {
            get { return _tree; }
            set 
            {
                if (_tree != value)
                {
                    _tree = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Commit9 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Commit9>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Committer9 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _events_url;
        private string _followers_url;
        private string _following_url;
        private string _gists_url;
        private string _gravatar_id;
        private string _html_url;
        private int? _id;
        private string _login;
        private string _organizations_url;
        private string _received_events_url;
        private string _repos_url;
        private bool? _site_admin;
        private string _starred_url;
        private string _subscriptions_url;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url
        {
            get { return _events_url; }
            set 
            {
                if (_events_url != value)
                {
                    _events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url
        {
            get { return _followers_url; }
            set 
            {
                if (_followers_url != value)
                {
                    _followers_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url
        {
            get { return _following_url; }
            set 
            {
                if (_following_url != value)
                {
                    _following_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url
        {
            get { return _gists_url; }
            set 
            {
                if (_gists_url != value)
                {
                    _gists_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url
        {
            get { return _organizations_url; }
            set 
            {
                if (_organizations_url != value)
                {
                    _organizations_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url
        {
            get { return _received_events_url; }
            set 
            {
                if (_received_events_url != value)
                {
                    _received_events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url
        {
            get { return _repos_url; }
            set 
            {
                if (_repos_url != value)
                {
                    _repos_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("site_admin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Site_admin
        {
            get { return _site_admin; }
            set 
            {
                if (_site_admin != value)
                {
                    _site_admin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url
        {
            get { return _starred_url; }
            set 
            {
                if (_starred_url != value)
                {
                    _starred_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url
        {
            get { return _subscriptions_url; }
            set 
            {
                if (_subscriptions_url != value)
                {
                    _subscriptions_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Committer9 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Committer9>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous57 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous57 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous57>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Author13 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _events_url;
        private string _followers_url;
        private string _following_url;
        private string _gists_url;
        private string _gravatar_id;
        private string _html_url;
        private int? _id;
        private string _login;
        private string _organizations_url;
        private string _received_events_url;
        private string _repos_url;
        private bool? _site_admin;
        private string _starred_url;
        private string _subscriptions_url;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url
        {
            get { return _events_url; }
            set 
            {
                if (_events_url != value)
                {
                    _events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url
        {
            get { return _followers_url; }
            set 
            {
                if (_followers_url != value)
                {
                    _followers_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url
        {
            get { return _following_url; }
            set 
            {
                if (_following_url != value)
                {
                    _following_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url
        {
            get { return _gists_url; }
            set 
            {
                if (_gists_url != value)
                {
                    _gists_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url
        {
            get { return _organizations_url; }
            set 
            {
                if (_organizations_url != value)
                {
                    _organizations_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url
        {
            get { return _received_events_url; }
            set 
            {
                if (_received_events_url != value)
                {
                    _received_events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url
        {
            get { return _repos_url; }
            set 
            {
                if (_repos_url != value)
                {
                    _repos_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("site_admin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Site_admin
        {
            get { return _site_admin; }
            set 
            {
                if (_site_admin != value)
                {
                    _site_admin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url
        {
            get { return _starred_url; }
            set 
            {
                if (_starred_url != value)
                {
                    _starred_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url
        {
            get { return _subscriptions_url; }
            set 
            {
                if (_subscriptions_url != value)
                {
                    _subscriptions_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Author13 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Author13>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Commit10 : System.ComponentModel.INotifyPropertyChanged
    {
        private Author20 _author;
        private Committer17 _committer;
        private string _message;
        private Tree10 _tree;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author20 Author
        {
            get { return _author; }
            set 
            {
                if (_author != value)
                {
                    _author = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("committer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Committer17 Committer
        {
            get { return _committer; }
            set 
            {
                if (_committer != value)
                {
                    _committer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tree", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tree10 Tree
        {
            get { return _tree; }
            set 
            {
                if (_tree != value)
                {
                    _tree = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Commit10 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Commit10>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Committer10 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _events_url;
        private string _followers_url;
        private string _following_url;
        private string _gists_url;
        private string _gravatar_id;
        private string _html_url;
        private int? _id;
        private string _login;
        private string _organizations_url;
        private string _received_events_url;
        private string _repos_url;
        private bool? _site_admin;
        private string _starred_url;
        private string _subscriptions_url;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url
        {
            get { return _events_url; }
            set 
            {
                if (_events_url != value)
                {
                    _events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url
        {
            get { return _followers_url; }
            set 
            {
                if (_followers_url != value)
                {
                    _followers_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url
        {
            get { return _following_url; }
            set 
            {
                if (_following_url != value)
                {
                    _following_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url
        {
            get { return _gists_url; }
            set 
            {
                if (_gists_url != value)
                {
                    _gists_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url
        {
            get { return _organizations_url; }
            set 
            {
                if (_organizations_url != value)
                {
                    _organizations_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url
        {
            get { return _received_events_url; }
            set 
            {
                if (_received_events_url != value)
                {
                    _received_events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url
        {
            get { return _repos_url; }
            set 
            {
                if (_repos_url != value)
                {
                    _repos_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("site_admin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Site_admin
        {
            get { return _site_admin; }
            set 
            {
                if (_site_admin != value)
                {
                    _site_admin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url
        {
            get { return _starred_url; }
            set 
            {
                if (_starred_url != value)
                {
                    _starred_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url
        {
            get { return _subscriptions_url; }
            set 
            {
                if (_subscriptions_url != value)
                {
                    _subscriptions_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Committer10 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Committer10>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous58 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous58 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous58>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Author14 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Author14 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Author14>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Committer11 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Committer11 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Committer11>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous59 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _html_url;
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous59 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous59>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Tree4 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tree4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tree4>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class _links9 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _git;
        private string _html;
        private string _self;
    
        [Newtonsoft.Json.JsonProperty("git", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git
        {
            get { return _git; }
            set 
            {
                if (_git != value)
                {
                    _git = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html
        {
            get { return _html; }
            set 
            {
                if (_html != value)
                {
                    _html = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self
        {
            get { return _self; }
            set 
            {
                if (_self != value)
                {
                    _self = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static _links9 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<_links9>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Author15 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Author15 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Author15>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Committer12 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Committer12 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Committer12>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Parents : System.ComponentModel.INotifyPropertyChanged
    {
        private string _html_url;
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Parents FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Parents>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Tree5 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tree5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tree5>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Assignee2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Assignee2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Assignee2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous60 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _color;
        private string _name;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color
        {
            get { return _color; }
            set 
            {
                if (_color != value)
                {
                    _color = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous60 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous60>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Milestone3 : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _closed_issues;
        private string _created_at;
        private Creator7 _creator;
        private string _description;
        private string _due_on;
        private int? _number;
        private int? _open_issues;
        private Milestone3State? _state;
        private string _title;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("closed_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Closed_issues
        {
            get { return _closed_issues; }
            set 
            {
                if (_closed_issues != value)
                {
                    _closed_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creator7 Creator
        {
            get { return _creator; }
            set 
            {
                if (_creator != value)
                {
                    _creator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("due_on", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Due_on
        {
            get { return _due_on; }
            set 
            {
                if (_due_on != value)
                {
                    _due_on = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues
        {
            get { return _open_issues; }
            set 
            {
                if (_open_issues != value)
                {
                    _open_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Milestone3State? State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Milestone3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Milestone3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Pull_request2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _diff_url;
        private string _html_url;
        private string _patch_url;
    
        [Newtonsoft.Json.JsonProperty("diff_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Diff_url
        {
            get { return _diff_url; }
            set 
            {
                if (_diff_url != value)
                {
                    _diff_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("patch_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patch_url
        {
            get { return _patch_url; }
            set 
            {
                if (_patch_url != value)
                {
                    _patch_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Pull_request2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Pull_request2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Issue2State
    {
        [System.Runtime.Serialization.EnumMember(Value = "open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "closed")]
        Closed = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User14 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User14 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User14>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Current_user : System.ComponentModel.INotifyPropertyChanged
    {
        private string _href;
        private string _type;
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href
        {
            get { return _href; }
            set 
            {
                if (_href != value)
                {
                    _href = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Current_user FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Current_user>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Current_user_actor : System.ComponentModel.INotifyPropertyChanged
    {
        private string _href;
        private string _type;
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href
        {
            get { return _href; }
            set 
            {
                if (_href != value)
                {
                    _href = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Current_user_actor FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Current_user_actor>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Current_user_organization : System.ComponentModel.INotifyPropertyChanged
    {
        private string _href;
        private string _type;
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href
        {
            get { return _href; }
            set 
            {
                if (_href != value)
                {
                    _href = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Current_user_organization FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Current_user_organization>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Current_user_public : System.ComponentModel.INotifyPropertyChanged
    {
        private string _href;
        private string _type;
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href
        {
            get { return _href; }
            set 
            {
                if (_href != value)
                {
                    _href = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Current_user_public FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Current_user_public>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Timeline : System.ComponentModel.INotifyPropertyChanged
    {
        private string _href;
        private string _type;
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href
        {
            get { return _href; }
            set 
            {
                if (_href != value)
                {
                    _href = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Timeline FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Timeline>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User15 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _href;
        private string _type;
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href
        {
            get { return _href; }
            set 
            {
                if (_href != value)
                {
                    _href = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User15 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User15>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class RingErl : System.ComponentModel.INotifyPropertyChanged
    {
        private string _filename;
        private string _raw_url;
        private int? _size;
    
        [Newtonsoft.Json.JsonProperty("filename", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filename
        {
            get { return _filename; }
            set 
            {
                if (_filename != value)
                {
                    _filename = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("raw_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Raw_url
        {
            get { return _raw_url; }
            set 
            {
                if (_raw_url != value)
                {
                    _raw_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RingErl FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RingErl>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User16 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User16 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User16>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Change_status : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _additions;
        private int? _deletions;
        private int? _total;
    
        [Newtonsoft.Json.JsonProperty("additions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Additions
        {
            get { return _additions; }
            set 
            {
                if (_additions != value)
                {
                    _additions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("deletions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Deletions
        {
            get { return _deletions; }
            set 
            {
                if (_deletions != value)
                {
                    _deletions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total
        {
            get { return _total; }
            set 
            {
                if (_total != value)
                {
                    _total = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Change_status FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Change_status>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User17 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User17 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User17>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Author16 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Author16 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Author16>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Committer13 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Committer13 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Committer13>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Tree6 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tree6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tree6>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Owner8 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Owner8 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Owner8>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class File1Txt : System.ComponentModel.INotifyPropertyChanged
    {
        private string _content;
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content
        {
            get { return _content; }
            set 
            {
                if (_content != value)
                {
                    _content = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static File1Txt FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<File1Txt>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class New_fileTxt : System.ComponentModel.INotifyPropertyChanged
    {
        private string _content;
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content
        {
            get { return _content; }
            set 
            {
                if (_content != value)
                {
                    _content = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static New_fileTxt FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<New_fileTxt>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Old_nameTxt : System.ComponentModel.INotifyPropertyChanged
    {
        private string _content;
        private string _filename;
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content
        {
            get { return _content; }
            set 
            {
                if (_content != value)
                {
                    _content = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("filename", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filename
        {
            get { return _filename; }
            set 
            {
                if (_filename != value)
                {
                    _filename = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Old_nameTxt FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Old_nameTxt>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class File1Txt2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _content;
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content
        {
            get { return _content; }
            set 
            {
                if (_content != value)
                {
                    _content = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static File1Txt2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<File1Txt2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Comments : System.ComponentModel.INotifyPropertyChanged
    {
        private string _href;
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href
        {
            get { return _href; }
            set 
            {
                if (_href != value)
                {
                    _href = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Comments FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Comments>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Html : System.ComponentModel.INotifyPropertyChanged
    {
        private string _href;
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href
        {
            get { return _href; }
            set 
            {
                if (_href != value)
                {
                    _href = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Html FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Html>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Review_comments : System.ComponentModel.INotifyPropertyChanged
    {
        private string _href;
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href
        {
            get { return _href; }
            set 
            {
                if (_href != value)
                {
                    _href = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Review_comments FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Review_comments>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Self : System.ComponentModel.INotifyPropertyChanged
    {
        private string _href;
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href
        {
            get { return _href; }
            set 
            {
                if (_href != value)
                {
                    _href = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Self FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Self>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Repo3 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _clone_url;
        private string _created_at;
        private string _description;
        private bool? _fork;
        private int? _forks;
        private int? _forks_count;
        private string _full_name;
        private string _git_url;
        private string _homepage;
        private string _html_url;
        private int? _id;
        private Language2 _language;
        private string _master_branch;
        private string _mirror_url;
        private string _name;
        private int? _open_issues;
        private int? _open_issues_count;
        private Owner12 _owner;
        private bool? _private;
        private string _pushed_at;
        private int? _size;
        private string _ssh_url;
        private string _svn_url;
        private string _updated_at;
        private string _url;
        private int? _watchers;
        private int? _watchers_count;
    
        [Newtonsoft.Json.JsonProperty("clone_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Clone_url
        {
            get { return _clone_url; }
            set 
            {
                if (_clone_url != value)
                {
                    _clone_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fork
        {
            get { return _fork; }
            set 
            {
                if (_fork != value)
                {
                    _fork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks
        {
            get { return _forks; }
            set 
            {
                if (_forks != value)
                {
                    _forks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks_count
        {
            get { return _forks_count; }
            set 
            {
                if (_forks_count != value)
                {
                    _forks_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name
        {
            get { return _full_name; }
            set 
            {
                if (_full_name != value)
                {
                    _full_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_url
        {
            get { return _git_url; }
            set 
            {
                if (_git_url != value)
                {
                    _git_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Homepage
        {
            get { return _homepage; }
            set 
            {
                if (_homepage != value)
                {
                    _homepage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Language2 Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("master_branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Master_branch
        {
            get { return _master_branch; }
            set 
            {
                if (_master_branch != value)
                {
                    _master_branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mirror_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mirror_url
        {
            get { return _mirror_url; }
            set 
            {
                if (_mirror_url != value)
                {
                    _mirror_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues
        {
            get { return _open_issues; }
            set 
            {
                if (_open_issues != value)
                {
                    _open_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues_count
        {
            get { return _open_issues_count; }
            set 
            {
                if (_open_issues_count != value)
                {
                    _open_issues_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Owner12 Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Private
        {
            get { return _private; }
            set 
            {
                if (_private != value)
                {
                    _private = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pushed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pushed_at
        {
            get { return _pushed_at; }
            set 
            {
                if (_pushed_at != value)
                {
                    _pushed_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ssh_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ssh_url
        {
            get { return _ssh_url; }
            set 
            {
                if (_ssh_url != value)
                {
                    _ssh_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("svn_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Svn_url
        {
            get { return _svn_url; }
            set 
            {
                if (_svn_url != value)
                {
                    _svn_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers
        {
            get { return _watchers; }
            set 
            {
                if (_watchers != value)
                {
                    _watchers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers_count
        {
            get { return _watchers_count; }
            set 
            {
                if (_watchers_count != value)
                {
                    _watchers_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Repo3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Repo3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User18 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User18 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User18>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Repo4 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _clone_url;
        private string _created_at;
        private string _description;
        private bool? _fork;
        private int? _forks;
        private int? _forks_count;
        private string _full_name;
        private string _git_url;
        private string _homepage;
        private string _html_url;
        private int? _id;
        private Language3 _language;
        private string _master_branch;
        private string _mirror_url;
        private string _name;
        private int? _open_issues;
        private int? _open_issues_count;
        private Owner13 _owner;
        private bool? _private;
        private string _pushed_at;
        private int? _size;
        private string _ssh_url;
        private string _svn_url;
        private string _updated_at;
        private string _url;
        private int? _watchers;
        private int? _watchers_count;
    
        [Newtonsoft.Json.JsonProperty("clone_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Clone_url
        {
            get { return _clone_url; }
            set 
            {
                if (_clone_url != value)
                {
                    _clone_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fork
        {
            get { return _fork; }
            set 
            {
                if (_fork != value)
                {
                    _fork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks
        {
            get { return _forks; }
            set 
            {
                if (_forks != value)
                {
                    _forks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks_count
        {
            get { return _forks_count; }
            set 
            {
                if (_forks_count != value)
                {
                    _forks_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name
        {
            get { return _full_name; }
            set 
            {
                if (_full_name != value)
                {
                    _full_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_url
        {
            get { return _git_url; }
            set 
            {
                if (_git_url != value)
                {
                    _git_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Homepage
        {
            get { return _homepage; }
            set 
            {
                if (_homepage != value)
                {
                    _homepage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Language3 Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("master_branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Master_branch
        {
            get { return _master_branch; }
            set 
            {
                if (_master_branch != value)
                {
                    _master_branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mirror_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mirror_url
        {
            get { return _mirror_url; }
            set 
            {
                if (_mirror_url != value)
                {
                    _mirror_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues
        {
            get { return _open_issues; }
            set 
            {
                if (_open_issues != value)
                {
                    _open_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues_count
        {
            get { return _open_issues_count; }
            set 
            {
                if (_open_issues_count != value)
                {
                    _open_issues_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Owner13 Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Private
        {
            get { return _private; }
            set 
            {
                if (_private != value)
                {
                    _private = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pushed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pushed_at
        {
            get { return _pushed_at; }
            set 
            {
                if (_pushed_at != value)
                {
                    _pushed_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ssh_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ssh_url
        {
            get { return _ssh_url; }
            set 
            {
                if (_ssh_url != value)
                {
                    _ssh_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("svn_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Svn_url
        {
            get { return _svn_url; }
            set 
            {
                if (_svn_url != value)
                {
                    _svn_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers
        {
            get { return _watchers; }
            set 
            {
                if (_watchers != value)
                {
                    _watchers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers_count
        {
            get { return _watchers_count; }
            set 
            {
                if (_watchers_count != value)
                {
                    _watchers_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Repo4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Repo4>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User19 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User19 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User19>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Html2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _href;
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href
        {
            get { return _href; }
            set 
            {
                if (_href != value)
                {
                    _href = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Html2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Html2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Pull_request3 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _href;
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href
        {
            get { return _href; }
            set 
            {
                if (_href != value)
                {
                    _href = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Pull_request3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Pull_request3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Self2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _href;
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href
        {
            get { return _href; }
            set 
            {
                if (_href != value)
                {
                    _href = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Self2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Self2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Uploader3 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _events_url;
        private string _followers_url;
        private string _following_url;
        private string _gists_url;
        private string _gravatar_id;
        private string _html_url;
        private int? _id;
        private string _login;
        private string _organizations_url;
        private string _received_events_url;
        private string _repos_url;
        private bool? _site_admin;
        private string _starred_url;
        private string _subscriptions_url;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url
        {
            get { return _events_url; }
            set 
            {
                if (_events_url != value)
                {
                    _events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url
        {
            get { return _followers_url; }
            set 
            {
                if (_followers_url != value)
                {
                    _followers_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url
        {
            get { return _following_url; }
            set 
            {
                if (_following_url != value)
                {
                    _following_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url
        {
            get { return _gists_url; }
            set 
            {
                if (_gists_url != value)
                {
                    _gists_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url
        {
            get { return _organizations_url; }
            set 
            {
                if (_organizations_url != value)
                {
                    _organizations_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url
        {
            get { return _received_events_url; }
            set 
            {
                if (_received_events_url != value)
                {
                    _received_events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url
        {
            get { return _repos_url; }
            set 
            {
                if (_repos_url != value)
                {
                    _repos_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("site_admin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Site_admin
        {
            get { return _site_admin; }
            set 
            {
                if (_site_admin != value)
                {
                    _site_admin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url
        {
            get { return _starred_url; }
            set 
            {
                if (_starred_url != value)
                {
                    _starred_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url
        {
            get { return _subscriptions_url; }
            set 
            {
                if (_subscriptions_url != value)
                {
                    _subscriptions_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Uploader3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Uploader3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Owner9 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Owner9 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Owner9>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Owner10 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Owner10 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Owner10>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Repository2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _archive_url;
        private string _assignees_url;
        private string _blobs_url;
        private string _branches_url;
        private string _collaborators_url;
        private string _comments_url;
        private string _commits_url;
        private string _compare_url;
        private string _contents_url;
        private string _contributors_url;
        private string _description;
        private string _downloads_url;
        private string _events_url;
        private bool? _fork;
        private string _forks_url;
        private string _full_name;
        private string _git_commits_url;
        private string _git_refs_url;
        private string _git_tags_url;
        private string _hooks_url;
        private string _html_url;
        private int? _id;
        private string _issue_comment_url;
        private string _issue_events_url;
        private string _issues_url;
        private string _keys_url;
        private string _labels_url;
        private string _languages_url;
        private string _merges_url;
        private string _milestones_url;
        private string _name;
        private string _notifications_url;
        private Owner14 _owner;
        private bool? _private;
        private string _pulls_url;
        private string _stargazers_url;
        private string _statuses_url;
        private string _subscribers_url;
        private string _subscription_url;
        private string _tags_url;
        private string _teams_url;
        private string _trees_url;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("archive_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Archive_url
        {
            get { return _archive_url; }
            set 
            {
                if (_archive_url != value)
                {
                    _archive_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("assignees_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignees_url
        {
            get { return _assignees_url; }
            set 
            {
                if (_assignees_url != value)
                {
                    _assignees_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("blobs_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Blobs_url
        {
            get { return _blobs_url; }
            set 
            {
                if (_blobs_url != value)
                {
                    _blobs_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("branches_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Branches_url
        {
            get { return _branches_url; }
            set 
            {
                if (_branches_url != value)
                {
                    _branches_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("collaborators_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Collaborators_url
        {
            get { return _collaborators_url; }
            set 
            {
                if (_collaborators_url != value)
                {
                    _collaborators_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("comments_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments_url
        {
            get { return _comments_url; }
            set 
            {
                if (_comments_url != value)
                {
                    _comments_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commits_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commits_url
        {
            get { return _commits_url; }
            set 
            {
                if (_commits_url != value)
                {
                    _commits_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("compare_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Compare_url
        {
            get { return _compare_url; }
            set 
            {
                if (_compare_url != value)
                {
                    _compare_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contents_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contents_url
        {
            get { return _contents_url; }
            set 
            {
                if (_contents_url != value)
                {
                    _contents_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contributors_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contributors_url
        {
            get { return _contributors_url; }
            set 
            {
                if (_contributors_url != value)
                {
                    _contributors_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("downloads_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Downloads_url
        {
            get { return _downloads_url; }
            set 
            {
                if (_downloads_url != value)
                {
                    _downloads_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url
        {
            get { return _events_url; }
            set 
            {
                if (_events_url != value)
                {
                    _events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fork
        {
            get { return _fork; }
            set 
            {
                if (_fork != value)
                {
                    _fork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Forks_url
        {
            get { return _forks_url; }
            set 
            {
                if (_forks_url != value)
                {
                    _forks_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name
        {
            get { return _full_name; }
            set 
            {
                if (_full_name != value)
                {
                    _full_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_commits_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_commits_url
        {
            get { return _git_commits_url; }
            set 
            {
                if (_git_commits_url != value)
                {
                    _git_commits_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_refs_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_refs_url
        {
            get { return _git_refs_url; }
            set 
            {
                if (_git_refs_url != value)
                {
                    _git_refs_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_tags_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_tags_url
        {
            get { return _git_tags_url; }
            set 
            {
                if (_git_tags_url != value)
                {
                    _git_tags_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hooks_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hooks_url
        {
            get { return _hooks_url; }
            set 
            {
                if (_hooks_url != value)
                {
                    _hooks_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("issue_comment_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Issue_comment_url
        {
            get { return _issue_comment_url; }
            set 
            {
                if (_issue_comment_url != value)
                {
                    _issue_comment_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("issue_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Issue_events_url
        {
            get { return _issue_events_url; }
            set 
            {
                if (_issue_events_url != value)
                {
                    _issue_events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("issues_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Issues_url
        {
            get { return _issues_url; }
            set 
            {
                if (_issues_url != value)
                {
                    _issues_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("keys_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Keys_url
        {
            get { return _keys_url; }
            set 
            {
                if (_keys_url != value)
                {
                    _keys_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("labels_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Labels_url
        {
            get { return _labels_url; }
            set 
            {
                if (_labels_url != value)
                {
                    _labels_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("languages_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Languages_url
        {
            get { return _languages_url; }
            set 
            {
                if (_languages_url != value)
                {
                    _languages_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("merges_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Merges_url
        {
            get { return _merges_url; }
            set 
            {
                if (_merges_url != value)
                {
                    _merges_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("milestones_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Milestones_url
        {
            get { return _milestones_url; }
            set 
            {
                if (_milestones_url != value)
                {
                    _milestones_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("notifications_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notifications_url
        {
            get { return _notifications_url; }
            set 
            {
                if (_notifications_url != value)
                {
                    _notifications_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Owner14 Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Private
        {
            get { return _private; }
            set 
            {
                if (_private != value)
                {
                    _private = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pulls_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pulls_url
        {
            get { return _pulls_url; }
            set 
            {
                if (_pulls_url != value)
                {
                    _pulls_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("stargazers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stargazers_url
        {
            get { return _stargazers_url; }
            set 
            {
                if (_stargazers_url != value)
                {
                    _stargazers_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("statuses_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Statuses_url
        {
            get { return _statuses_url; }
            set 
            {
                if (_statuses_url != value)
                {
                    _statuses_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscribers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscribers_url
        {
            get { return _subscribers_url; }
            set 
            {
                if (_subscribers_url != value)
                {
                    _subscribers_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscription_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscription_url
        {
            get { return _subscription_url; }
            set 
            {
                if (_subscription_url != value)
                {
                    _subscription_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tags_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tags_url
        {
            get { return _tags_url; }
            set 
            {
                if (_tags_url != value)
                {
                    _tags_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("teams_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Teams_url
        {
            get { return _teams_url; }
            set 
            {
                if (_teams_url != value)
                {
                    _teams_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("trees_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Trees_url
        {
            get { return _trees_url; }
            set 
            {
                if (_trees_url != value)
                {
                    _trees_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Repository2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Repository2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Assignee3 : System.ComponentModel.INotifyPropertyChanged
    {
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Assignee3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Assignee3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Closed_at : System.ComponentModel.INotifyPropertyChanged
    {
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Closed_at FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Closed_at>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Anonymous61 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _color;
        private string _name;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color
        {
            get { return _color; }
            set 
            {
                if (_color != value)
                {
                    _color = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous61 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous61>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Milestone4 : System.ComponentModel.INotifyPropertyChanged
    {
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Milestone4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Milestone4>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Pull_request4 : System.ComponentModel.INotifyPropertyChanged
    {
        private Diff_url _diff_url;
        private Html_url _html_url;
        private Patch_url _patch_url;
    
        [Newtonsoft.Json.JsonProperty("diff_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Diff_url Diff_url
        {
            get { return _diff_url; }
            set 
            {
                if (_diff_url != value)
                {
                    _diff_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Html_url Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("patch_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Patch_url Patch_url
        {
            get { return _patch_url; }
            set 
            {
                if (_patch_url != value)
                {
                    _patch_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Pull_request4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Pull_request4>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User20 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _events_url;
        private string _followers_url;
        private string _following_url;
        private string _gists_url;
        private string _gravatar_id;
        private string _html_url;
        private int? _id;
        private string _login;
        private string _organizations_url;
        private string _received_events_url;
        private string _repos_url;
        private string _starred_url;
        private string _subscriptions_url;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url
        {
            get { return _events_url; }
            set 
            {
                if (_events_url != value)
                {
                    _events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url
        {
            get { return _followers_url; }
            set 
            {
                if (_followers_url != value)
                {
                    _followers_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url
        {
            get { return _following_url; }
            set 
            {
                if (_following_url != value)
                {
                    _following_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url
        {
            get { return _gists_url; }
            set 
            {
                if (_gists_url != value)
                {
                    _gists_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url
        {
            get { return _organizations_url; }
            set 
            {
                if (_organizations_url != value)
                {
                    _organizations_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url
        {
            get { return _received_events_url; }
            set 
            {
                if (_received_events_url != value)
                {
                    _received_events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url
        {
            get { return _repos_url; }
            set 
            {
                if (_repos_url != value)
                {
                    _repos_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url
        {
            get { return _starred_url; }
            set 
            {
                if (_starred_url != value)
                {
                    _starred_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url
        {
            get { return _subscriptions_url; }
            set 
            {
                if (_subscriptions_url != value)
                {
                    _subscriptions_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User20 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User20>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Owner11 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _received_events_url;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url
        {
            get { return _received_events_url; }
            set 
            {
                if (_received_events_url != value)
                {
                    _received_events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Owner11 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Owner11>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Mode
    {
        [System.Runtime.Serialization.EnumMember(Value = "100644")]
        _100644 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "100755")]
        _100755 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "040000")]
        _040000 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "160000")]
        _160000 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "120000")]
        _120000 = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Type4
    {
        [System.Runtime.Serialization.EnumMember(Value = "blob")]
        Blob = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "tree")]
        Tree = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "commit")]
        Commit = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class RingErl2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _filename;
        private string _raw_url;
        private int? _size;
    
        [Newtonsoft.Json.JsonProperty("filename", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filename
        {
            get { return _filename; }
            set 
            {
                if (_filename != value)
                {
                    _filename = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("raw_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Raw_url
        {
            get { return _raw_url; }
            set 
            {
                if (_raw_url != value)
                {
                    _raw_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RingErl2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RingErl2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Creator6 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Creator6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Creator6>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Milestone2State
    {
        [System.Runtime.Serialization.EnumMember(Value = "open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "closed")]
        Closed = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Author17 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Author17 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Author17>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Committer14 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Committer14 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Committer14>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Tree7 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tree7 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tree7>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Html3 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _href;
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href
        {
            get { return _href; }
            set 
            {
                if (_href != value)
                {
                    _href = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Html3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Html3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Pull_request5 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _href;
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href
        {
            get { return _href; }
            set 
            {
                if (_href != value)
                {
                    _href = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Pull_request5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Pull_request5>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Self3 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _href;
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href
        {
            get { return _href; }
            set 
            {
                if (_href != value)
                {
                    _href = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Self3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Self3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Comments2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _href;
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href
        {
            get { return _href; }
            set 
            {
                if (_href != value)
                {
                    _href = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Comments2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Comments2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Html4 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _href;
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href
        {
            get { return _href; }
            set 
            {
                if (_href != value)
                {
                    _href = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Html4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Html4>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Review_comments2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _href;
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href
        {
            get { return _href; }
            set 
            {
                if (_href != value)
                {
                    _href = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Review_comments2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Review_comments2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Self4 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _href;
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href
        {
            get { return _href; }
            set 
            {
                if (_href != value)
                {
                    _href = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Self4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Self4>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Repo5 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _clone_url;
        private string _created_at;
        private string _description;
        private bool? _fork;
        private int? _forks;
        private int? _forks_count;
        private string _full_name;
        private string _git_url;
        private string _homepage;
        private string _html_url;
        private int? _id;
        private string _language;
        private string _master_branch;
        private string _mirror_url;
        private string _name;
        private int? _open_issues;
        private int? _open_issues_count;
        private Owner15 _owner;
        private bool? _private;
        private string _pushed_at;
        private int? _size;
        private string _ssh_url;
        private string _svn_url;
        private string _updated_at;
        private string _url;
        private int? _watchers;
        private int? _watchers_count;
    
        [Newtonsoft.Json.JsonProperty("clone_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Clone_url
        {
            get { return _clone_url; }
            set 
            {
                if (_clone_url != value)
                {
                    _clone_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fork
        {
            get { return _fork; }
            set 
            {
                if (_fork != value)
                {
                    _fork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks
        {
            get { return _forks; }
            set 
            {
                if (_forks != value)
                {
                    _forks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks_count
        {
            get { return _forks_count; }
            set 
            {
                if (_forks_count != value)
                {
                    _forks_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name
        {
            get { return _full_name; }
            set 
            {
                if (_full_name != value)
                {
                    _full_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_url
        {
            get { return _git_url; }
            set 
            {
                if (_git_url != value)
                {
                    _git_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Homepage
        {
            get { return _homepage; }
            set 
            {
                if (_homepage != value)
                {
                    _homepage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("master_branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Master_branch
        {
            get { return _master_branch; }
            set 
            {
                if (_master_branch != value)
                {
                    _master_branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mirror_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mirror_url
        {
            get { return _mirror_url; }
            set 
            {
                if (_mirror_url != value)
                {
                    _mirror_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues
        {
            get { return _open_issues; }
            set 
            {
                if (_open_issues != value)
                {
                    _open_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues_count
        {
            get { return _open_issues_count; }
            set 
            {
                if (_open_issues_count != value)
                {
                    _open_issues_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Owner15 Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Private
        {
            get { return _private; }
            set 
            {
                if (_private != value)
                {
                    _private = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("pushed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pushed_at
        {
            get { return _pushed_at; }
            set 
            {
                if (_pushed_at != value)
                {
                    _pushed_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ssh_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ssh_url
        {
            get { return _ssh_url; }
            set 
            {
                if (_ssh_url != value)
                {
                    _ssh_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("svn_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Svn_url
        {
            get { return _svn_url; }
            set 
            {
                if (_svn_url != value)
                {
                    _svn_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers
        {
            get { return _watchers; }
            set 
            {
                if (_watchers != value)
                {
                    _watchers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers_count
        {
            get { return _watchers_count; }
            set 
            {
                if (_watchers_count != value)
                {
                    _watchers_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Repo5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Repo5>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User21 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User21 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User21>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Repo6 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _clone_url;
        private string _created_at;
        private string _description;
        private bool? _fork;
        private int? _forks;
        private int? _forks_count;
        private string _full_name;
        private string _git_url;
        private string _homepage;
        private string _html_url;
        private int? _id;
        private string _language;
        private string _master_branch;
        private string _mirror_url;
        private string _name;
        private int? _open_issues;
        private int? _open_issues_count;
        private Owner16 _owner;
        private bool? _private;
        private string _pushed_at;
        private int? _size;
        private string _ssh_url;
        private string _svn_url;
        private string _updated_at;
        private string _url;
        private int? _watchers;
        private int? _watchers_count;
    
        [Newtonsoft.Json.JsonProperty("clone_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Clone_url
        {
            get { return _clone_url; }
            set 
            {
                if (_clone_url != value)
                {
                    _clone_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at
        {
            get { return _created_at; }
            set 
            {
                if (_created_at != value)
                {
                    _created_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fork
        {
            get { return _fork; }
            set 
            {
                if (_fork != value)
                {
                    _fork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks
        {
            get { return _forks; }
            set 
            {
                if (_forks != value)
                {
                    _forks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("forks_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Forks_count
        {
            get { return _forks_count; }
            set 
            {
                if (_forks_count != value)
                {
                    _forks_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name
        {
            get { return _full_name; }
            set 
            {
                if (_full_name != value)
                {
                    _full_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("git_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_url
        {
            get { return _git_url; }
            set 
            {
                if (_git_url != value)
                {
                    _git_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Homepage
        {
            get { return _homepage; }
            set 
            {
                if (_homepage != value)
                {
                    _homepage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("master_branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Master_branch
        {
            get { return _master_branch; }
            set 
            {
                if (_master_branch != value)
                {
                    _master_branch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mirror_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mirror_url
        {
            get { return _mirror_url; }
            set 
            {
                if (_mirror_url != value)
                {
                    _mirror_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues
        {
            get { return _open_issues; }
            set 
            {
                if (_open_issues != value)
                {
                    _open_issues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("open_issues_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues_count
        {
            get { return _open_issues_count; }
            set 
            {
                if (_open_issues_count != value)
                {
                    _open_issues_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Owner16 Owner
        {
            get { return _owner; }
            set 
            {
                if (_owner != value)
                {
                    _owner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Private
        {
            get { return _private; }
            set 
            {
                if (_private != value)
                {
                    _private = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("pushed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pushed_at
        {
            get { return _pushed_at; }
            set 
            {
                if (_pushed_at != value)
                {
                    _pushed_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ssh_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ssh_url
        {
            get { return _ssh_url; }
            set 
            {
                if (_ssh_url != value)
                {
                    _ssh_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("svn_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Svn_url
        {
            get { return _svn_url; }
            set 
            {
                if (_svn_url != value)
                {
                    _svn_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at
        {
            get { return _updated_at; }
            set 
            {
                if (_updated_at != value)
                {
                    _updated_at = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers
        {
            get { return _watchers; }
            set 
            {
                if (_watchers != value)
                {
                    _watchers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("watchers_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Watchers_count
        {
            get { return _watchers_count; }
            set 
            {
                if (_watchers_count != value)
                {
                    _watchers_count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Repo6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Repo6>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class User22 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User22 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User22>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Uploader4 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _events_url;
        private string _followers_url;
        private string _following_url;
        private string _gists_url;
        private string _gravatar_id;
        private string _html_url;
        private int? _id;
        private string _login;
        private string _organizations_url;
        private string _received_events_url;
        private string _repos_url;
        private bool? _site_admin;
        private string _starred_url;
        private string _subscriptions_url;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url
        {
            get { return _events_url; }
            set 
            {
                if (_events_url != value)
                {
                    _events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url
        {
            get { return _followers_url; }
            set 
            {
                if (_followers_url != value)
                {
                    _followers_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url
        {
            get { return _following_url; }
            set 
            {
                if (_following_url != value)
                {
                    _following_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url
        {
            get { return _gists_url; }
            set 
            {
                if (_gists_url != value)
                {
                    _gists_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url
        {
            get { return _organizations_url; }
            set 
            {
                if (_organizations_url != value)
                {
                    _organizations_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url
        {
            get { return _received_events_url; }
            set 
            {
                if (_received_events_url != value)
                {
                    _received_events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url
        {
            get { return _repos_url; }
            set 
            {
                if (_repos_url != value)
                {
                    _repos_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("site_admin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Site_admin
        {
            get { return _site_admin; }
            set 
            {
                if (_site_admin != value)
                {
                    _site_admin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url
        {
            get { return _starred_url; }
            set 
            {
                if (_starred_url != value)
                {
                    _starred_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url
        {
            get { return _subscriptions_url; }
            set 
            {
                if (_subscriptions_url != value)
                {
                    _subscriptions_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Uploader4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Uploader4>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Author18 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Author18 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Author18>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Committer15 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        /// <summary>ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Committer15 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Committer15>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Tree8 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tree8 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tree8>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Author19 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Author19 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Author19>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Committer16 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Committer16 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Committer16>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Tree9 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tree9 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tree9>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Author20 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Author20 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Author20>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Committer17 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _date;
        private string _email;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Committer17 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Committer17>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Tree10 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sha;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha
        {
            get { return _sha; }
            set 
            {
                if (_sha != value)
                {
                    _sha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tree10 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tree10>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Creator7 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Creator7 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Creator7>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public enum Milestone3State
    {
        [System.Runtime.Serialization.EnumMember(Value = "open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "closed")]
        Closed = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Language2 : System.ComponentModel.INotifyPropertyChanged
    {
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Language2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Language2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Owner12 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Owner12 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Owner12>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Language3 : System.ComponentModel.INotifyPropertyChanged
    {
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Language3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Language3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Owner13 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Owner13 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Owner13>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Owner14 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _events_url;
        private string _followers_url;
        private string _following_url;
        private string _gists_url;
        private string _gravatar_id;
        private string _html_url;
        private int? _id;
        private string _login;
        private string _organizations_url;
        private string _received_events_url;
        private string _repos_url;
        private string _starred_url;
        private string _subscriptions_url;
        private string _type;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url
        {
            get { return _events_url; }
            set 
            {
                if (_events_url != value)
                {
                    _events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url
        {
            get { return _followers_url; }
            set 
            {
                if (_followers_url != value)
                {
                    _followers_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url
        {
            get { return _following_url; }
            set 
            {
                if (_following_url != value)
                {
                    _following_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url
        {
            get { return _gists_url; }
            set 
            {
                if (_gists_url != value)
                {
                    _gists_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url
        {
            get { return _html_url; }
            set 
            {
                if (_html_url != value)
                {
                    _html_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url
        {
            get { return _organizations_url; }
            set 
            {
                if (_organizations_url != value)
                {
                    _organizations_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url
        {
            get { return _received_events_url; }
            set 
            {
                if (_received_events_url != value)
                {
                    _received_events_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url
        {
            get { return _repos_url; }
            set 
            {
                if (_repos_url != value)
                {
                    _repos_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url
        {
            get { return _starred_url; }
            set 
            {
                if (_starred_url != value)
                {
                    _starred_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url
        {
            get { return _subscriptions_url; }
            set 
            {
                if (_subscriptions_url != value)
                {
                    _subscriptions_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Owner14 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Owner14>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Diff_url : System.ComponentModel.INotifyPropertyChanged
    {
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Diff_url FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Diff_url>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Html_url : System.ComponentModel.INotifyPropertyChanged
    {
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Html_url FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Html_url>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Patch_url : System.ComponentModel.INotifyPropertyChanged
    {
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Patch_url FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Patch_url>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Owner15 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Owner15 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Owner15>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
    public partial class Owner16 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _avatar_url;
        private string _gravatar_id;
        private int? _id;
        private string _login;
        private string _url;
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url
        {
            get { return _avatar_url; }
            set 
            {
                if (_avatar_url != value)
                {
                    _avatar_url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gravatar_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gravatar_id
        {
            get { return _gravatar_id; }
            set 
            {
                if (_gravatar_id != value)
                {
                    _gravatar_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login
        {
            get { return _login; }
            set 
            {
                if (_login != value)
                {
                    _login = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Owner16 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Owner16>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.4.3.0")]
    public class SwaggerException : System.Exception
    {
        public string StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.4.3.0")]
    public class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}