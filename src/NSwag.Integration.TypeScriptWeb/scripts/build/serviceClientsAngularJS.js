/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.5.6264.39438 (NJsonSchema v8.6.6263.34621) (http://NSwag.org)
// </auto-generated>
//----------------------
class GeoClient {
    constructor($http, baseUrl) {
        this.baseUrl = undefined;
        this.http = null;
        this.jsonParseReviver = undefined;
        this.http = $http;
        this.baseUrl = baseUrl !== undefined ? baseUrl : "http://localhost:13452";
    }
    fromBodyTest(location) {
        let url_ = this.baseUrl + "/api/Geo/FromBodyTest";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(location ? location.toJS() : null);
        var options_ = {
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http(options_).then((response) => {
            return this.processFromBodyTest(response);
        }, (response) => {
            if (response.status)
                return this.processFromBodyTest(response);
            throw response;
        });
    }
    processFromBodyTest(response) {
        const responseText = response.data;
        const status = response.status;
        if (status === 204) {
            return null;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    fromUriTest(latitude, longitude) {
        let url_ = this.baseUrl + "/api/Geo/FromUriTest?";
        if (latitude === null)
            throw new Error("The parameter 'latitude' cannot be null.");
        else if (latitude !== undefined)
            url_ += "Latitude=" + encodeURIComponent("" + latitude) + "&";
        if (longitude === null)
            throw new Error("The parameter 'longitude' cannot be null.");
        else if (longitude !== undefined)
            url_ += "Longitude=" + encodeURIComponent("" + longitude) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        var options_ = {
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http(options_).then((response) => {
            return this.processFromUriTest(response);
        }, (response) => {
            if (response.status)
                return this.processFromUriTest(response);
            throw response;
        });
    }
    processFromUriTest(response) {
        const responseText = response.data;
        const status = response.status;
        if (status === 204) {
            return null;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    addPolygon(points) {
        let url_ = this.baseUrl + "/api/Geo/AddPolygon";
        url_ = url_.replace(/[?&]$/, "");
        let contentData_ = [];
        if (points) {
            for (let item of points)
                contentData_.push(item.toJS());
        }
        const content_ = JSON.stringify(points ? contentData_ : null);
        var options_ = {
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http(options_).then((response) => {
            return this.processAddPolygon(response);
        }, (response) => {
            if (response.status)
                return this.processAddPolygon(response);
            throw response;
        });
    }
    processAddPolygon(response) {
        const responseText = response.data;
        const status = response.status;
        if (status === 204) {
            return null;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    filter(currentStates) {
        let url_ = this.baseUrl + "/api/Geo/Filter?";
        if (currentStates !== undefined)
            currentStates.forEach(item => { url_ += "currentStates=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        var options_ = {
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http(options_).then((response) => {
            return this.processFilter(response);
        }, (response) => {
            if (response.status)
                return this.processFilter(response);
            throw response;
        });
    }
    processFilter(response) {
        const responseText = response.data;
        const status = response.status;
        if (status === 204) {
            return null;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    reverse(values) {
        let url_ = this.baseUrl + "/api/Geo/Reverse?";
        if (values !== undefined)
            values.forEach(item => { url_ += "values=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        var options_ = {
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http(options_).then((response) => {
            return this.processReverse(response);
        }, (response) => {
            if (response.status)
                return this.processReverse(response);
            throw response;
        });
    }
    processReverse(response) {
        const responseText = response.data;
        const status = response.status;
        if (status === 200) {
            let result200 = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    refresh() {
        let url_ = this.baseUrl + "/api/Geo/Refresh";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        var options_ = {
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http(options_).then((response) => {
            return this.processRefresh(response);
        }, (response) => {
            if (response.status)
                return this.processRefresh(response);
            throw response;
        });
    }
    processRefresh(response) {
        const responseText = response.data;
        const status = response.status;
        if (status === 204) {
            return null;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    uploadFile(file) {
        let url_ = this.baseUrl + "/api/Geo/UploadFile";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = new FormData();
        if (file !== null)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        var options_ = {
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                'Content-Type': undefined,
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http(options_).then((response) => {
            return this.processUploadFile(response);
        }, (response) => {
            if (response.status)
                return this.processUploadFile(response);
            throw response;
        });
    }
    processUploadFile(response) {
        const responseText = response.data;
        const status = response.status;
        if (status === 200) {
            let result200 = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    uploadFiles(files) {
        let url_ = this.baseUrl + "/api/Geo/UploadFiles";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = new FormData();
        if (files !== null)
            files.forEach(item_ => content_.append("files", item_.data, item_.fileName ? item_.fileName : "files"));
        var options_ = {
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                'Content-Type': undefined,
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http(options_).then((response) => {
            return this.processUploadFiles(response);
        }, (response) => {
            if (response.status)
                return this.processUploadFiles(response);
            throw response;
        });
    }
    processUploadFiles(response) {
        const responseText = response.data;
        const status = response.status;
        if (status === 204) {
            return null;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    saveItems(request) {
        let url_ = this.baseUrl + "/api/Geo/SaveItems";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(request ? request.toJS() : null);
        var options_ = {
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http(options_).then((response) => {
            return this.processSaveItems(response);
        }, (response) => {
            if (response.status)
                return this.processSaveItems(response);
            throw response;
        });
    }
    processSaveItems(response) {
        const responseText = response.data;
        const status = response.status;
        if (status === 204) {
            return null;
        }
        else if (status === 450) {
            let result450 = null;
            let resultData450 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result450 = resultData450 ? Exception.fromJS(resultData450) : null;
            this.throwException("A server error occurred.", status, responseText, result450);
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    getUploadedFile(id, override) {
        let url_ = this.baseUrl + "/api/Geo/GetUploadedFile/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (override === null)
            throw new Error("The parameter 'override' cannot be null.");
        else if (override !== undefined)
            url_ += "override=" + encodeURIComponent("" + override) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        var options_ = {
            url: url_,
            method: "GET",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http(options_).then((response) => {
            return this.processGetUploadedFile(response);
        }, (response) => {
            if (response.status)
                return this.processGetUploadedFile(response);
            throw response;
        });
    }
    processGetUploadedFile(response) {
        const responseText = response.data;
        const status = response.status;
        if (status === 200) {
            let result200 = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    throwException(message, status, response, result) {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}
exports.GeoClient = GeoClient;
class PersonsClient {
    constructor($http, baseUrl) {
        this.baseUrl = undefined;
        this.http = null;
        this.jsonParseReviver = undefined;
        this.http = $http;
        this.baseUrl = baseUrl !== undefined ? baseUrl : "http://localhost:13452";
    }
    getAll() {
        let url_ = this.baseUrl + "/api/Persons";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        var options_ = {
            url: url_,
            method: "GET",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http(options_).then((response) => {
            return this.processGetAll(response);
        }, (response) => {
            if (response.status)
                return this.processGetAll(response);
            throw response;
        });
    }
    processGetAll(response) {
        const responseText = response.data;
        const status = response.status;
        if (status === 200) {
            let result200 = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    add(person) {
        let url_ = this.baseUrl + "/api/Persons";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(person ? person.toJS() : null);
        var options_ = {
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http(options_).then((response) => {
            return this.processAdd(response);
        }, (response) => {
            if (response.status)
                return this.processAdd(response);
            throw response;
        });
    }
    processAdd(response) {
        const responseText = response.data;
        const status = response.status;
        if (status === 204) {
            return null;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    find(gender) {
        let url_ = this.baseUrl + "/api/Persons/find/{gender}";
        if (gender === undefined || gender === null)
            throw new Error("The parameter 'gender' must be defined.");
        url_ = url_.replace("{gender}", encodeURIComponent("" + gender));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        var options_ = {
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http(options_).then((response) => {
            return this.processFind(response);
        }, (response) => {
            if (response.status)
                return this.processFind(response);
            throw response;
        });
    }
    processFind(response) {
        const responseText = response.data;
        const status = response.status;
        if (status === 200) {
            let result200 = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    findOptional(gender) {
        let url_ = this.baseUrl + "/api/Persons/find2?";
        if (gender === undefined)
            throw new Error("The parameter 'gender' must be defined.");
        else
            url_ += "gender=" + encodeURIComponent("" + gender) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        var options_ = {
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http(options_).then((response) => {
            return this.processFindOptional(response);
        }, (response) => {
            if (response.status)
                return this.processFindOptional(response);
            throw response;
        });
    }
    processFindOptional(response) {
        const responseText = response.data;
        const status = response.status;
        if (status === 200) {
            let result200 = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    get(id) {
        let url_ = this.baseUrl + "/api/Persons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        var options_ = {
            url: url_,
            method: "GET",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http(options_).then((response) => {
            return this.processGet(response);
        }, (response) => {
            if (response.status)
                return this.processGet(response);
            throw response;
        });
    }
    processGet(response) {
        const responseText = response.data;
        const status = response.status;
        if (status === 200) {
            let result200 = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Person.fromJS(resultData200) : null;
            return result200;
        }
        else if (status === 500) {
            let result500 = null;
            let resultData500 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result500 = resultData500 ? PersonNotFoundException.fromJS(resultData500) : null;
            this.throwException("A server error occurred.", status, responseText, result500);
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    delete(id) {
        let url_ = this.baseUrl + "/api/Persons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        var options_ = {
            url: url_,
            method: "DELETE",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http(options_).then((response) => {
            return this.processDelete(response);
        }, (response) => {
            if (response.status)
                return this.processDelete(response);
            throw response;
        });
    }
    processDelete(response) {
        const responseText = response.data;
        const status = response.status;
        if (status === 204) {
            return null;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    throw(id) {
        let url_ = this.baseUrl + "/api/Persons/Throw?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        var options_ = {
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http(options_).then((response) => {
            return this.processThrow(response);
        }, (response) => {
            if (response.status)
                return this.processThrow(response);
            throw response;
        });
    }
    processThrow(response) {
        const responseText = response.data;
        const status = response.status;
        if (status === 200) {
            let result200 = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Person.fromJS(resultData200) : null;
            return result200;
        }
        else if (status === 500) {
            let result500 = null;
            let resultData500 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result500 = resultData500 ? PersonNotFoundException.fromJS(resultData500) : null;
            this.throwException("A server error occurred.", status, responseText, result500);
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    /**
     * Gets the name of a person.
     * @id The person ID.
     * @return The person's name.
     */
    getName(id) {
        let url_ = this.baseUrl + "/api/Persons/{id}/Name";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        var options_ = {
            url: url_,
            method: "GET",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http(options_).then((response) => {
            return this.processGetName(response);
        }, (response) => {
            if (response.status)
                return this.processGetName(response);
            throw response;
        });
    }
    processGetName(response) {
        const responseText = response.data;
        const status = response.status;
        if (status === 200) {
            let result200 = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        }
        else if (status === 500) {
            let result500 = null;
            let resultData500 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result500 = resultData500 ? PersonNotFoundException.fromJS(resultData500) : null;
            this.throwException("A server error occurred.", status, responseText, result500);
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    addXml(person) {
        let url_ = this.baseUrl + "/api/Persons/AddXml";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = person;
        var options_ = {
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/xml; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        };
        return this.http(options_).then((response) => {
            return this.processAddXml(response);
        }, (response) => {
            if (response.status)
                return this.processAddXml(response);
            throw response;
        });
    }
    processAddXml(response) {
        const responseText = response.data;
        const status = response.status;
        if (status === 200) {
            let result200 = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    throwException(message, status, response, result) {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}
exports.PersonsClient = PersonsClient;
class GeoPoint {
    constructor(data) {
        if (data !== undefined) {
            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : undefined;
            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : undefined;
        }
    }
    static fromJS(data) {
        return new GeoPoint(data);
    }
    toJS(data) {
        data = data === undefined ? {} : data;
        data["Latitude"] = this.latitude !== undefined ? this.latitude : undefined;
        data["Longitude"] = this.longitude !== undefined ? this.longitude : undefined;
        return data;
    }
    toJSON() {
        return JSON.stringify(this.toJS());
    }
    clone() {
        const json = this.toJSON();
        return new GeoPoint(JSON.parse(json));
    }
}
exports.GeoPoint = GeoPoint;
class GenericRequestOfAddressAndPerson {
    constructor(data) {
        if (data !== undefined) {
            this.item1 = data["Item1"] ? Address.fromJS(data["Item1"]) : undefined;
            this.item2 = data["Item2"] ? Person.fromJS(data["Item2"]) : undefined;
        }
    }
    static fromJS(data) {
        return new GenericRequestOfAddressAndPerson(data);
    }
    toJS(data) {
        data = data === undefined ? {} : data;
        data["Item1"] = this.item1 ? this.item1.toJS() : undefined;
        data["Item2"] = this.item2 ? this.item2.toJS() : undefined;
        return data;
    }
    toJSON() {
        return JSON.stringify(this.toJS());
    }
    clone() {
        const json = this.toJSON();
        return new GenericRequestOfAddressAndPerson(JSON.parse(json));
    }
}
exports.GenericRequestOfAddressAndPerson = GenericRequestOfAddressAndPerson;
class Address {
    constructor(data) {
        if (data !== undefined) {
            this.isPrimary = data["IsPrimary"] !== undefined ? data["IsPrimary"] : undefined;
            this.city = data["City"] !== undefined ? data["City"] : undefined;
        }
    }
    static fromJS(data) {
        return new Address(data);
    }
    toJS(data) {
        data = data === undefined ? {} : data;
        data["IsPrimary"] = this.isPrimary !== undefined ? this.isPrimary : undefined;
        data["City"] = this.city !== undefined ? this.city : undefined;
        return data;
    }
    toJSON() {
        return JSON.stringify(this.toJS());
    }
    clone() {
        const json = this.toJSON();
        return new Address(JSON.parse(json));
    }
}
exports.Address = Address;
class Person {
    constructor(data) {
        this.address = new Address();
        this.children = [];
        this._discriminator = "Person";
        if (data !== undefined) {
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.firstName = data["FirstName"] !== undefined ? data["FirstName"] : undefined;
            this.lastName = data["LastName"] !== undefined ? data["LastName"] : undefined;
            this.gender = data["Gender"] !== undefined ? data["Gender"] : undefined;
            this.dateOfBirth = data["DateOfBirth"] ? new Date(data["DateOfBirth"].toString()) : undefined;
            this.weight = data["Weight"] !== undefined ? data["Weight"] : undefined;
            this.height = data["Height"] !== undefined ? data["Height"] : undefined;
            this.age = data["Age"] !== undefined ? data["Age"] : undefined;
            this.averageSleepTime = data["AverageSleepTime"] !== undefined ? data["AverageSleepTime"] : undefined;
            this.address = data["Address"] ? Address.fromJS(data["Address"]) : new Address();
            if (data["Children"] && data["Children"].constructor === Array) {
                this.children = [];
                for (let item of data["Children"])
                    this.children.push(Person.fromJS(item));
            }
            if (data["Skills"]) {
                this.skills = {};
                for (let key in data["Skills"]) {
                    if (data["Skills"].hasOwnProperty(key))
                        this.skills[key] = data["Skills"][key] !== undefined ? data["Skills"][key] : undefined;
                }
            }
        }
    }
    static fromJS(data) {
        if (data["discriminator"] === "Teacher")
            return new Teacher(data);
        return new Person(data);
    }
    toJS(data) {
        data = data === undefined ? {} : data;
        data["discriminator"] = this._discriminator;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : undefined;
        data["LastName"] = this.lastName !== undefined ? this.lastName : undefined;
        data["Gender"] = this.gender !== undefined ? this.gender : undefined;
        data["DateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : undefined;
        data["Weight"] = this.weight !== undefined ? this.weight : undefined;
        data["Height"] = this.height !== undefined ? this.height : undefined;
        data["Age"] = this.age !== undefined ? this.age : undefined;
        data["AverageSleepTime"] = this.averageSleepTime !== undefined ? this.averageSleepTime : undefined;
        data["Address"] = this.address ? this.address.toJS() : undefined;
        if (this.children && this.children.constructor === Array) {
            data["Children"] = [];
            for (let item of this.children)
                data["Children"].push(item.toJS());
        }
        if (this.skills) {
            data["Skills"] = {};
            for (let key in this.skills) {
                if (this.skills.hasOwnProperty(key))
                    data["Skills"][key] = this.skills[key] !== undefined ? this.skills[key] : undefined;
            }
        }
        return data;
    }
    toJSON() {
        return JSON.stringify(this.toJS());
    }
    clone() {
        const json = this.toJSON();
        return new Person(JSON.parse(json));
    }
}
exports.Person = Person;
var Gender;
(function (Gender) {
    Gender[Gender["Male"] = "Male"] = "Male";
    Gender[Gender["Female"] = "Female"] = "Female";
})(Gender = exports.Gender || (exports.Gender = {}));
var SkillLevel;
(function (SkillLevel) {
    SkillLevel[SkillLevel["Low"] = 0] = "Low";
    SkillLevel[SkillLevel["Medium"] = 1] = "Medium";
    SkillLevel[SkillLevel["Height"] = 2] = "Height";
})(SkillLevel = exports.SkillLevel || (exports.SkillLevel = {}));
class Teacher extends Person {
    constructor(data) {
        super(data);
        this.skillLevel = SkillLevel.Medium;
        this._discriminator = "Teacher";
        if (data !== undefined) {
            this.course = data["Course"] !== undefined ? data["Course"] : undefined;
            this.skillLevel = data["SkillLevel"] !== undefined ? data["SkillLevel"] : undefined;
        }
    }
    static fromJS(data) {
        return new Teacher(data);
    }
    toJS(data) {
        data = data === undefined ? {} : data;
        data["Course"] = this.course !== undefined ? this.course : undefined;
        data["SkillLevel"] = this.skillLevel !== undefined ? this.skillLevel : undefined;
        super.toJS(data);
        return data;
    }
    toJSON() {
        return JSON.stringify(this.toJS());
    }
    clone() {
        const json = this.toJSON();
        return new Teacher(JSON.parse(json));
    }
}
exports.Teacher = Teacher;
class Exception {
    constructor(data) {
        if (data !== undefined) {
            this.message = data["Message"] !== undefined ? data["Message"] : undefined;
            this.innerException = data["InnerException"] ? Exception.fromJS(data["InnerException"]) : undefined;
            this.stackTrace = data["StackTrace"] !== undefined ? data["StackTrace"] : undefined;
            this.source = data["Source"] !== undefined ? data["Source"] : undefined;
        }
    }
    static fromJS(data) {
        return new Exception(data);
    }
    toJS(data) {
        data = data === undefined ? {} : data;
        data["Message"] = this.message !== undefined ? this.message : undefined;
        data["InnerException"] = this.innerException ? this.innerException.toJS() : undefined;
        data["StackTrace"] = this.stackTrace !== undefined ? this.stackTrace : undefined;
        data["Source"] = this.source !== undefined ? this.source : undefined;
        return data;
    }
    toJSON() {
        return JSON.stringify(this.toJS());
    }
    clone() {
        const json = this.toJSON();
        return new Exception(JSON.parse(json));
    }
}
exports.Exception = Exception;
class PersonNotFoundException extends Exception {
    constructor(data) {
        super(data);
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }
    static fromJS(data) {
        return new PersonNotFoundException(data);
    }
    toJS(data) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : undefined;
        super.toJS(data);
        return data;
    }
    toJSON() {
        return JSON.stringify(this.toJS());
    }
    clone() {
        const json = this.toJSON();
        return new PersonNotFoundException(JSON.parse(json));
    }
}
exports.PersonNotFoundException = PersonNotFoundException;
class SwaggerException extends Error {
    constructor(message, status, response, result) {
        super();
        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}
exports.SwaggerException = SwaggerException;
//# sourceMappingURL=serviceClientsAngularJS.js.map