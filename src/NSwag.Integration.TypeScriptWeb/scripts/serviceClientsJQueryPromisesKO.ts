/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.1.0.0 (NJsonSchema v9.13.28.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import * as ko from 'knockout';

import * as jQuery from 'jquery';

export class GeoClient {
    baseUrl: string; 
    beforeSend: any = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string) {
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:13452";
    }

    fromBodyTest(location: GeoPoint | null) {
        return new Promise<void>((resolve, reject) => {
            this.fromBodyTestWithCallbacks(location, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private fromBodyTestWithCallbacks(location: GeoPoint | null, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/FromBodyTest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(location);

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
            }
        }).done((_data, _textStatus, xhr) => {
            this.processFromBodyTestWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFromBodyTestWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processFromBodyTestWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processFromBodyTest(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processFromBodyTest(xhr: any): void | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 204) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    fromUriTest(latitude: number | undefined, longitude: number | undefined) {
        return new Promise<void>((resolve, reject) => {
            this.fromUriTestWithCallbacks(latitude, longitude, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private fromUriTestWithCallbacks(latitude: number | undefined, longitude: number | undefined, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/FromUriTest?";
        if (latitude === null)
            throw new Error("The parameter 'latitude' cannot be null.");
        else if (latitude !== undefined)
            url_ += "Latitude=" + encodeURIComponent("" + latitude) + "&"; 
        if (longitude === null)
            throw new Error("The parameter 'longitude' cannot be null.");
        else if (longitude !== undefined)
            url_ += "Longitude=" + encodeURIComponent("" + longitude) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            dataType: "text",
            headers: {
            }
        }).done((_data, _textStatus, xhr) => {
            this.processFromUriTestWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFromUriTestWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processFromUriTestWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processFromUriTest(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processFromUriTest(xhr: any): void | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 204) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    addPolygon(points: GeoPoint[] | null) {
        return new Promise<void>((resolve, reject) => {
            this.addPolygonWithCallbacks(points, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private addPolygonWithCallbacks(points: GeoPoint[] | null, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/AddPolygon";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(points);

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
            }
        }).done((_data, _textStatus, xhr) => {
            this.processAddPolygonWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAddPolygonWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processAddPolygonWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAddPolygon(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAddPolygon(xhr: any): void | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 204) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    filter(currentStates: string[] | null | undefined) {
        return new Promise<void>((resolve, reject) => {
            this.filterWithCallbacks(currentStates, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private filterWithCallbacks(currentStates: string[] | null | undefined, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/Filter?";
        if (currentStates !== undefined)
            currentStates && currentStates.forEach(item => { url_ += "currentStates=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            dataType: "text",
            headers: {
            }
        }).done((_data, _textStatus, xhr) => {
            this.processFilterWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFilterWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processFilterWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processFilter(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processFilter(xhr: any): void | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 204) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    reverse(values: string[] | null | undefined) {
        return new Promise<string[] | null>((resolve, reject) => {
            this.reverseWithCallbacks(values, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private reverseWithCallbacks(values: string[] | null | undefined, onSuccess?: (result: string[] | null) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/Reverse?";
        if (values !== undefined)
            values && values.forEach(item => { url_ += "values=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }).done((_data, _textStatus, xhr) => {
            this.processReverseWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processReverseWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processReverseWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processReverse(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processReverse(xhr: any): string[] | null | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    refresh() {
        return new Promise<void>((resolve, reject) => {
            this.refreshWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private refreshWithCallbacks(onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/Refresh";
        url_ = url_.replace(/[?&]$/, "");

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            dataType: "text",
            headers: {
            }
        }).done((_data, _textStatus, xhr) => {
            this.processRefreshWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processRefreshWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processRefreshWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processRefresh(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processRefresh(xhr: any): void | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 204) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    uploadFile(file: FileParameter | null | undefined) {
        return new Promise<boolean>((resolve, reject) => {
            this.uploadFileWithCallbacks(file, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private uploadFileWithCallbacks(file: FileParameter | null | undefined, onSuccess?: (result: boolean) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/UploadFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            mimeType: "multipart/form-data",
            contentType: false,
            headers: {
                "Accept": "application/json"
            }
        }).done((_data, _textStatus, xhr) => {
            this.processUploadFileWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processUploadFileWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processUploadFileWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processUploadFile(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processUploadFile(xhr: any): boolean | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    uploadFiles(files: FileParameter[] | null | undefined) {
        return new Promise<void>((resolve, reject) => {
            this.uploadFilesWithCallbacks(files, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private uploadFilesWithCallbacks(files: FileParameter[] | null | undefined, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/UploadFiles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (files !== null && files !== undefined)
            files.forEach(item_ => content_.append("files", item_.data, item_.fileName ? item_.fileName : "files") );

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            mimeType: "multipart/form-data",
            contentType: false,
            headers: {
            }
        }).done((_data, _textStatus, xhr) => {
            this.processUploadFilesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processUploadFilesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processUploadFilesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processUploadFiles(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processUploadFiles(xhr: any): void | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 204) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    saveItems(request: GenericRequestOfAddressAndPerson | null) {
        return new Promise<void>((resolve, reject) => {
            this.saveItemsWithCallbacks(request, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private saveItemsWithCallbacks(request: GenericRequestOfAddressAndPerson | null, onSuccess?: (result: void) => void, onFail?: (exception: Exception | string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/SaveItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
            }
        }).done((_data, _textStatus, xhr) => {
            this.processSaveItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSaveItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processSaveItemsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSaveItems(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSaveItems(xhr: any): void | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 204) {
            const _responseText = xhr.responseText;
            return;
        } else if (status === 450) {
            const _responseText = xhr.responseText;
            let result450: any = null;
            let resultData450 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result450 = resultData450 ? Exception.fromJS(resultData450) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result450);
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    getUploadedFile(id: number, override: boolean | undefined) {
        return new Promise<any | null>((resolve, reject) => {
            this.getUploadedFileWithCallbacks(id, override, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private getUploadedFileWithCallbacks(id: number, override: boolean | undefined, onSuccess?: (result: any | null) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/GetUploadedFile/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (override === null)
            throw new Error("The parameter 'override' cannot be null.");
        else if (override !== undefined)
            url_ += "override=" + encodeURIComponent("" + override) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }).done((_data, _textStatus, xhr) => {
            this.processGetUploadedFileWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetUploadedFileWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetUploadedFileWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetUploadedFile(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetUploadedFile(xhr: any): any | null | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 200 || status === 206) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    postDouble(value: number | null | undefined) {
        return new Promise<number | null>((resolve, reject) => {
            this.postDoubleWithCallbacks(value, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private postDoubleWithCallbacks(value: number | null | undefined, onSuccess?: (result: number | null) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Geo/PostDouble?";
        if (value !== undefined)
            url_ += "value=" + encodeURIComponent("" + value) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }).done((_data, _textStatus, xhr) => {
            this.processPostDoubleWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostDoubleWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostDoubleWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostDouble(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostDouble(xhr: any): number | null | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }
}

export class PersonsClient {
    baseUrl: string; 
    beforeSend: any = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string) {
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:13452";
    }

    getAll() {
        return new Promise<Person[] | null>((resolve, reject) => {
            this.getAllWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private getAllWithCallbacks(onSuccess?: (result: Person[] | null) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Persons";
        url_ = url_.replace(/[?&]$/, "");

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }).done((_data, _textStatus, xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAll(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAll(xhr: any): Person[] | null | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    add(person: Person | null) {
        return new Promise<void>((resolve, reject) => {
            this.addWithCallbacks(person, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private addWithCallbacks(person: Person | null, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Persons";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(person);

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
            }
        }).done((_data, _textStatus, xhr) => {
            this.processAddWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAddWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processAddWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAdd(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAdd(xhr: any): void | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 204) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    find(gender: Gender) {
        return new Promise<Person[] | null>((resolve, reject) => {
            this.findWithCallbacks(gender, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private findWithCallbacks(gender: Gender, onSuccess?: (result: Person[] | null) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Persons/find/{gender}";
        if (gender === undefined || gender === null)
            throw new Error("The parameter 'gender' must be defined.");
        url_ = url_.replace("{gender}", encodeURIComponent("" + gender)); 
        url_ = url_.replace(/[?&]$/, "");

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }).done((_data, _textStatus, xhr) => {
            this.processFindWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFindWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processFindWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processFind(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processFind(xhr: any): Person[] | null | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    findOptional(gender: Gender | null) {
        return new Promise<Person[] | null>((resolve, reject) => {
            this.findOptionalWithCallbacks(gender, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private findOptionalWithCallbacks(gender: Gender | null, onSuccess?: (result: Person[] | null) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Persons/find2?";
        if (gender === undefined)
            throw new Error("The parameter 'gender' must be defined.");
        else
            url_ += "gender=" + encodeURIComponent("" + gender) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }).done((_data, _textStatus, xhr) => {
            this.processFindOptionalWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFindOptionalWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processFindOptionalWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processFindOptional(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processFindOptional(xhr: any): Person[] | null | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    get(id: string) {
        return new Promise<Person | null>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private getWithCallbacks(id: string, onSuccess?: (result: Person | null) => void, onFail?: (exception: PersonNotFoundException | string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Persons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): Person | null | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 500) {
            const _responseText = xhr.responseText;
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 ? PersonNotFoundException.fromJS(resultData500) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
        } else if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Person.fromJS(resultData200) : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    delete(id: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Persons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            dataType: "text",
            headers: {
            }
        }).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 204) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    transform(person: Person | null) {
        return new Promise<Person | null>((resolve, reject) => {
            this.transformWithCallbacks(person, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private transformWithCallbacks(person: Person | null, onSuccess?: (result: Person | null) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Persons/transform";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(person);

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        }).done((_data, _textStatus, xhr) => {
            this.processTransformWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTransformWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processTransformWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTransform(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTransform(xhr: any): Person | null | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Person.fromJS(resultData200) : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    throw(id: string) {
        return new Promise<Person | null>((resolve, reject) => {
            this.throwWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private throwWithCallbacks(id: string, onSuccess?: (result: Person | null) => void, onFail?: (exception: PersonNotFoundException | string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Persons/Throw?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }).done((_data, _textStatus, xhr) => {
            this.processThrowWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processThrowWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processThrowWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processThrow(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processThrow(xhr: any): Person | null | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Person.fromJS(resultData200) : <any>null;
            return result200;
        } else if (status === 500) {
            const _responseText = xhr.responseText;
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 ? PersonNotFoundException.fromJS(resultData500) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * Gets the name of a person.
     * @param id The person ID.
     * @return The person's name.
     */
    getName(id: string) {
        return new Promise<string | null>((resolve, reject) => {
            this.getNameWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private getNameWithCallbacks(id: string, onSuccess?: (result: string | null) => void, onFail?: (exception: PersonNotFoundException | string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Persons/{id}/Name";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }).done((_data, _textStatus, xhr) => {
            this.processGetNameWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetNameWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetNameWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetName(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetName(xhr: any): string | null | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status === 500) {
            const _responseText = xhr.responseText;
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 ? PersonNotFoundException.fromJS(resultData500) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    addXml(person: string | null) {
        return new Promise<string | null>((resolve, reject) => {
            this.addXmlWithCallbacks(person, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private addXmlWithCallbacks(person: string | null, onSuccess?: (result: string | null) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Persons/AddXml";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = person;

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/xml", 
                "Accept": "application/json"
            }
        }).done((_data, _textStatus, xhr) => {
            this.processAddXmlWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAddXmlWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processAddXmlWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAddXml(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAddXml(xhr: any): string | null | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    upload(data: string | null) {
        return new Promise<string | null>((resolve, reject) => {
            this.uploadWithCallbacks(data, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private uploadWithCallbacks(data: string | null, onSuccess?: (result: string | null) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Persons/upload";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(data);

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/octet-stream", 
                "Accept": "application/json"
            }
        }).done((_data, _textStatus, xhr) => {
            this.processUploadWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processUploadWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processUploadWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processUpload(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processUpload(xhr: any): string | null | null {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }
}

export class GeoPoint {
    latitude = ko.observable<number>();
    longitude = ko.observable<number>();

    init(data?: any) {
        if (data !== undefined) {
            var latitude_: any; 
            latitude_ = data["Latitude"];
            this.latitude(latitude_);

            var longitude_: any; 
            longitude_ = data["Longitude"];
            this.longitude(longitude_);

        }
    }

    static fromJS(data: any): GeoPoint {
        let result = new GeoPoint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        let latitude_: any = this.latitude(); 
        data["Latitude"] = latitude_;

        let longitude_: any = this.longitude(); 
        data["Longitude"] = longitude_;

        return data; 
    }
}

export class Exception {
    message = ko.observable<string | undefined>();
    innerException = ko.observable<Exception | undefined>();
    stackTrace = ko.observable<string | undefined>();
    source = ko.observable<string | undefined>();

    init(data?: any) {
        if (data !== undefined) {
            var message_: any; 
            message_ = data["Message"];
            this.message(message_);

            var innerException_: any; 
            innerException_ = data["InnerException"] ? Exception.fromJS(data["InnerException"]) : <any>undefined;
            this.innerException(innerException_);

            var stackTrace_: any; 
            stackTrace_ = data["StackTrace"];
            this.stackTrace(stackTrace_);

            var source_: any; 
            source_ = data["Source"];
            this.source(source_);

        }
    }

    static fromJS(data: any): Exception {
        let result = new Exception();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        let message_: any = this.message(); 
        data["Message"] = message_;

        let innerException_: any = this.innerException(); 
        data["InnerException"] = innerException_ ? innerException_.toJSON() : <any>undefined;

        let stackTrace_: any = this.stackTrace(); 
        data["StackTrace"] = stackTrace_;

        let source_: any = this.source(); 
        data["Source"] = source_;

        return data; 
    }
}

export class GenericRequestOfAddressAndPerson {
    item1 = ko.observable<Address | undefined>();
    item2 = ko.observable<Person | undefined>();

    init(data?: any) {
        if (data !== undefined) {
            var item1_: any; 
            item1_ = data["Item1"] ? Address.fromJS(data["Item1"]) : <any>undefined;
            this.item1(item1_);

            var item2_: any; 
            item2_ = data["Item2"] ? Person.fromJS(data["Item2"]) : <any>undefined;
            this.item2(item2_);

        }
    }

    static fromJS(data: any): GenericRequestOfAddressAndPerson {
        let result = new GenericRequestOfAddressAndPerson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        let item1_: any = this.item1(); 
        data["Item1"] = item1_ ? item1_.toJSON() : <any>undefined;

        let item2_: any = this.item2(); 
        data["Item2"] = item2_ ? item2_.toJSON() : <any>undefined;

        return data; 
    }
}

export class Address {
    isPrimary = ko.observable<boolean>();
    city = ko.observable<string | undefined>();

    init(data?: any) {
        if (data !== undefined) {
            var isPrimary_: any; 
            isPrimary_ = data["IsPrimary"];
            this.isPrimary(isPrimary_);

            var city_: any; 
            city_ = data["City"];
            this.city(city_);

        }
    }

    static fromJS(data: any): Address {
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        let isPrimary_: any = this.isPrimary(); 
        data["IsPrimary"] = isPrimary_;

        let city_: any = this.city(); 
        data["City"] = city_;

        return data; 
    }
}

export class Person {
    id = ko.observable<string>();
    /** Gets or sets the first name. */
    firstName = ko.observable<string>();
    /** Gets or sets the last name. */
    lastName = ko.observable<string>();
    gender = ko.observable<Gender>();
    dateOfBirth = ko.observable<Date>();
    weight = ko.observable<number>();
    height = ko.observable<number>();
    age = ko.observable<number>();
    averageSleepTime = ko.observable<string>();
    address = ko.observable<Address>(new Address());
    children = ko.observableArray<Person>([]);
    skills = ko.observable<{ [key: string] : SkillLevel; } | undefined>();

    protected _discriminator: string;

    constructor() {
        this._discriminator = "Person";
    }

    init(data?: any) {
        if (data !== undefined) {
            var id_: any; 
            id_ = data["Id"];
            this.id(id_);

            var firstName_: any; 
            firstName_ = data["FirstName"];
            this.firstName(firstName_);

            var lastName_: any; 
            lastName_ = data["LastName"];
            this.lastName(lastName_);

            var gender_: any; 
            gender_ = data["Gender"];
            this.gender(gender_);

            var dateOfBirth_: any; 
            dateOfBirth_ = data["DateOfBirth"] ? new Date(data["DateOfBirth"].toString()) : <any>undefined;
            this.dateOfBirth(dateOfBirth_);

            var weight_: any; 
            weight_ = data["Weight"];
            this.weight(weight_);

            var height_: any; 
            height_ = data["Height"];
            this.height(height_);

            var age_: any; 
            age_ = data["Age"];
            this.age(age_);

            var averageSleepTime_: any; 
            averageSleepTime_ = data["AverageSleepTime"];
            this.averageSleepTime(averageSleepTime_);

            var address_: any; 
            address_ = data["Address"] ? Address.fromJS(data["Address"]) : new Address();
            this.address(address_);

            var children_: any; 
            if (data["Children"] && data["Children"].constructor === Array) {
                children_ = [] as any;
                for (let item of data["Children"])
                    children_.push(Person.fromJS(item));
            }
            this.children(children_);

            var skills_: any; 
            if (data["Skills"]) {
                skills_ = {} as any;
                for (let key in data["Skills"]) {
                    if (data["Skills"].hasOwnProperty(key))
                        skills_[key] = data["Skills"][key];
                }
            }
            this.skills(skills_);

        }
    }

    static fromJS(data: any): Person {
        if (data["discriminator"] === "Teacher") {
            let result = new Teacher();
            result.init(data);
            return result;
        }
        let result = new Person();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator; 
        let id_: any = this.id(); 
        data["Id"] = id_;

        let firstName_: any = this.firstName(); 
        data["FirstName"] = firstName_;

        let lastName_: any = this.lastName(); 
        data["LastName"] = lastName_;

        let gender_: any = this.gender(); 
        data["Gender"] = gender_;

        let dateOfBirth_: any = this.dateOfBirth(); 
        data["DateOfBirth"] = dateOfBirth_ ? dateOfBirth_.toISOString() : <any>undefined;

        let weight_: any = this.weight(); 
        data["Weight"] = weight_;

        let height_: any = this.height(); 
        data["Height"] = height_;

        let age_: any = this.age(); 
        data["Age"] = age_;

        let averageSleepTime_: any = this.averageSleepTime(); 
        data["AverageSleepTime"] = averageSleepTime_;

        let address_: any = this.address(); 
        data["Address"] = address_ ? address_.toJSON() : <any>undefined;

        let children_: any = this.children(); 
        if (children_ && children_.constructor === Array) {
            data["Children"] = [];
            for (let item of children_)
                data["Children"].push(item.toJSON());
        }

        let skills_: any = this.skills(); 
        if (skills_) {
            data["Skills"] = {};
            for (let key in skills_) {
                if (skills_.hasOwnProperty(key))
                    data["Skills"][key] = skills_[key];
            }
        }

        return data; 
    }
}

export enum Gender {
    Male = <any>"Male", 
    Female = <any>"Female", 
}

export enum SkillLevel {
    Low = 0, 
    Medium = 1, 
    Height = 2, 
}

export class Teacher extends Person {
    course = ko.observable<string | undefined>();
    skillLevel = ko.observable<SkillLevel>(SkillLevel.Medium);

    constructor() {
        super();
        this._discriminator = "Teacher";
    }

    init(data?: any) {
        super.init(data);
        if (data !== undefined) {
            var course_: any; 
            course_ = data["Course"];
            this.course(course_);

            var skillLevel_: any; 
            skillLevel_ = data["SkillLevel"] !== undefined ? data["SkillLevel"] : SkillLevel.Medium;
            this.skillLevel(skillLevel_);

        }
    }

    static fromJS(data: any): Teacher {
        let result = new Teacher();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        let course_: any = this.course(); 
        data["Course"] = course_;

        let skillLevel_: any = this.skillLevel(); 
        data["SkillLevel"] = skillLevel_;

        super.toJSON(data);
        return data; 
    }
}

export class PersonNotFoundException extends Exception {
    id = ko.observable<string>();

    init(data?: any) {
        super.init(data);
        if (data !== undefined) {
            var id_: any; 
            id_ = data["id"];
            this.id(id_);

        }
    }

    static fromJS(data: any): PersonNotFoundException {
        let result = new PersonNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        let id_: any = this.id(); 
        data["id"] = id_;

        super.toJSON(data);
        return data; 
    }
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}