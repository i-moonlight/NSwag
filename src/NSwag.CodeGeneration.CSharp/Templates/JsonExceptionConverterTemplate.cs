// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace NSwag.CodeGeneration.CSharp.Templates
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Data\NSwag\src\NSwag.CodeGeneration.CSharp\Templates\JsonExceptionConverterTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    internal partial class JsonExceptionConverterTemplate : JsonExceptionConverterTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("[System.CodeDom.Compiler.GeneratedCode(\"NSwag\", \"");
            
            #line 2 "C:\Data\NSwag\src\NSwag.CodeGeneration.CSharp\Templates\JsonExceptionConverterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SwaggerDocument.ToolchainVersion));
            
            #line default
            #line hidden
            this.Write(@""")]
internal class JsonExceptionConverter : Newtonsoft.Json.JsonConverter
{
    private readonly Newtonsoft.Json.Serialization.DefaultContractResolver _defaultContractResolver = new Newtonsoft.Json.Serialization.DefaultContractResolver();
    private readonly System.Collections.Generic.IDictionary<string, System.Reflection.Assembly> _searchedNamespaces;
    private readonly bool _hideStackTrace = false;
    
    public JsonExceptionConverter()
    {
        _searchedNamespaces = new System.Collections.Generic.Dictionary<string, System.Reflection.Assembly> { { typeof(");
            
            #line 11 "C:\Data\NSwag\src\NSwag.CodeGeneration.CSharp\Templates\JsonExceptionConverterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ExceptionModelClass));
            
            #line default
            #line hidden
            this.Write(").Namespace, System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(");
            
            #line 11 "C:\Data\NSwag\src\NSwag.CodeGeneration.CSharp\Templates\JsonExceptionConverterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ExceptionModelClass));
            
            #line default
            #line hidden
            this.Write(")).Assembly } };\r\n    }\r\n    \r\n    public override bool CanWrite => true;\r\n    \r\n" +
                    "    public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object val" +
                    "ue, Newtonsoft.Json.JsonSerializer serializer)\r\n    {\r\n        var exception = v" +
                    "alue as System.Exception;\r\n        if (exception != null)\r\n        {\r\n          " +
                    "  var resolver = serializer.ContractResolver as Newtonsoft.Json.Serialization.De" +
                    "faultContractResolver ?? _defaultContractResolver;\r\n    \r\n            var jObjec" +
                    "t = new Newtonsoft.Json.Linq.JObject();\r\n            jObject.Add(resolver.GetRes" +
                    "olvedPropertyName(\"discriminator\"), exception.GetType().Name);\r\n            jObj" +
                    "ect.Add(resolver.GetResolvedPropertyName(\"Message\"), exception.Message);\r\n      " +
                    "      jObject.Add(resolver.GetResolvedPropertyName(\"StackTrace\"), _hideStackTrac" +
                    "e ? \"HIDDEN\" : exception.StackTrace);\r\n            jObject.Add(resolver.GetResol" +
                    "vedPropertyName(\"Source\"), exception.Source);\r\n            jObject.Add(resolver." +
                    "GetResolvedPropertyName(\"InnerException\"),\r\n                exception.InnerExcep" +
                    "tion != null ? Newtonsoft.Json.Linq.JToken.FromObject(exception.InnerException, " +
                    "serializer) : null);\r\n    \r\n            foreach (var property in GetExceptionPro" +
                    "perties(value.GetType()))\r\n            {\r\n                var propertyValue = pr" +
                    "operty.Key.GetValue(exception);\r\n                if (propertyValue != null)\r\n   " +
                    "             {\r\n                    jObject.AddFirst(new Newtonsoft.Json.Linq.JP" +
                    "roperty(resolver.GetResolvedPropertyName(property.Value),\r\n                     " +
                    "   Newtonsoft.Json.Linq.JToken.FromObject(propertyValue, serializer)));\r\n       " +
                    "         }\r\n            }\r\n    \r\n            value = jObject;\r\n        }\r\n    \r\n" +
                    "        serializer.Serialize(writer, value);\r\n    }\r\n    \r\n    public override b" +
                    "ool CanConvert(System.Type objectType)\r\n    {\r\n        return System.Reflection." +
                    "IntrospectionExtensions.GetTypeInfo(typeof(System.Exception)).IsAssignableFrom(S" +
                    "ystem.Reflection.IntrospectionExtensions.GetTypeInfo(objectType));\r\n    }\r\n    \r" +
                    "\n    public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.T" +
                    "ype objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)" +
                    "\r\n    {\r\n        var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObje" +
                    "ct>(reader);\r\n        if (jObject == null)\r\n            return null;\r\n    \r\n    " +
                    "    var newSerializer = new Newtonsoft.Json.JsonSerializer();\r\n        newSerial" +
                    "izer.ContractResolver = (Newtonsoft.Json.Serialization.IContractResolver)System." +
                    "Activator.CreateInstance(serializer.ContractResolver.GetType());\r\n    \r\n        " +
                    "GetField(typeof(Newtonsoft.Json.Serialization.DefaultContractResolver), \"_shared" +
                    "Cache\").SetValue(newSerializer.ContractResolver, false);\r\n    \r\n        dynamic " +
                    "resolver = newSerializer.ContractResolver;\r\n        if (System.Reflection.Runtim" +
                    "eReflectionExtensions.GetRuntimeProperty(newSerializer.ContractResolver.GetType(" +
                    "), \"IgnoreSerializableAttribute\") != null)\r\n            resolver.IgnoreSerializa" +
                    "bleAttribute = true;\r\n        if (System.Reflection.RuntimeReflectionExtensions." +
                    "GetRuntimeProperty(newSerializer.ContractResolver.GetType(), \"IgnoreSerializable" +
                    "Interface\") != null)\r\n            resolver.IgnoreSerializableInterface = true;\r\n" +
                    "    \r\n        Newtonsoft.Json.Linq.JToken token;\r\n        if (jObject.TryGetValu" +
                    "e(\"discriminator\", System.StringComparison.OrdinalIgnoreCase, out token))\r\n     " +
                    "   {\r\n            var discriminator = Newtonsoft.Json.Linq.Extensions.Value<stri" +
                    "ng>(token);\r\n            if (objectType.Name.Equals(discriminator) == false)\r\n  " +
                    "          {\r\n                var exceptionType = System.Type.GetType(\"System.\" +" +
                    " discriminator, false);\r\n                if (exceptionType != null)\r\n           " +
                    "         objectType = exceptionType;\r\n                else\r\n                {\r\n " +
                    "                   foreach (var pair in _searchedNamespaces)\r\n                  " +
                    "  {\r\n                        exceptionType = pair.Value.GetType(pair.Key + \".\" +" +
                    " discriminator);\r\n                        if (exceptionType != null)\r\n          " +
                    "              {\r\n                            objectType = exceptionType;\r\n      " +
                    "                      break;\r\n                        }\r\n                    }\r\n" +
                    "    \r\n                }\r\n            }\r\n        }\r\n    \r\n        var value = jOb" +
                    "ject.ToObject(objectType, newSerializer);\r\n        foreach (var property in GetE" +
                    "xceptionProperties(value.GetType()))\r\n        {\r\n            var jValue = jObjec" +
                    "t.GetValue(resolver.GetResolvedPropertyName(property.Value));\r\n            var p" +
                    "ropertyValue = (object)jValue?.ToObject(property.Key.PropertyType);\r\n           " +
                    " if (property.Key.SetMethod != null)\r\n                property.Key.SetValue(valu" +
                    "e, propertyValue);\r\n            else\r\n            {\r\n                var field =" +
                    " GetField(objectType, \"m_\" + property.Value.Substring(0, 1).ToLowerInvariant() +" +
                    " property.Value.Substring(1));\r\n                if (field != null)\r\n            " +
                    "        field.SetValue(value, propertyValue);\r\n            }\r\n        }\r\n    \r\n " +
                    "       SetExceptionFieldValue(jObject, \"Message\", value, \"_message\", resolver, n" +
                    "ewSerializer);\r\n        SetExceptionFieldValue(jObject, \"StackTrace\", value, \"_s" +
                    "tackTraceString\", resolver, newSerializer);\r\n        SetExceptionFieldValue(jObj" +
                    "ect, \"Source\", value, \"_source\", resolver, newSerializer);\r\n        SetException" +
                    "FieldValue(jObject, \"InnerException\", value, \"_innerException\", resolver, serial" +
                    "izer);\r\n    \r\n        return value;\r\n    }\r\n    \r\n    private System.Reflection." +
                    "FieldInfo GetField(System.Type type, string fieldName)\r\n    {\r\n        var field" +
                    " = System.Reflection.IntrospectionExtensions.GetTypeInfo(type).GetDeclaredField(" +
                    "fieldName);\r\n        if (field == null && System.Reflection.IntrospectionExtensi" +
                    "ons.GetTypeInfo(type).BaseType != null)\r\n            return GetField(System.Refl" +
                    "ection.IntrospectionExtensions.GetTypeInfo(type).BaseType, fieldName);\r\n        " +
                    "return field;\r\n    }\r\n    \r\n    private System.Collections.Generic.IDictionary<S" +
                    "ystem.Reflection.PropertyInfo, string> GetExceptionProperties(System.Type except" +
                    "ionType)\r\n    {\r\n        var result = new System.Collections.Generic.Dictionary<" +
                    "System.Reflection.PropertyInfo, string>();\r\n        foreach (var property in Sys" +
                    "tem.Linq.Enumerable.Where(System.Reflection.RuntimeReflectionExtensions.GetRunti" +
                    "meProperties(exceptionType), \r\n            p => p.GetMethod?.IsPublic == true))\r" +
                    "\n        {\r\n            var attribute = System.Reflection.CustomAttributeExtensi" +
                    "ons.GetCustomAttribute<Newtonsoft.Json.JsonPropertyAttribute>(property);\r\n      " +
                    "      var propertyName = attribute != null ? attribute.PropertyName : property.N" +
                    "ame;\r\n    \r\n            if (!System.Linq.Enumerable.Contains(new[] { \"Message\", " +
                    "\"StackTrace\", \"Source\", \"InnerException\", \"Data\", \"TargetSite\", \"HelpLink\", \"HRe" +
                    "sult\" }, propertyName))\r\n                result[property] = propertyName;\r\n     " +
                    "   }\r\n        return result;\r\n    }\r\n    \r\n    private void SetExceptionFieldVal" +
                    "ue(Newtonsoft.Json.Linq.JObject jObject, string propertyName, object value, stri" +
                    "ng fieldName, Newtonsoft.Json.Serialization.IContractResolver resolver, Newtonso" +
                    "ft.Json.JsonSerializer serializer)\r\n    {\r\n        var field = System.Reflection" +
                    ".IntrospectionExtensions.GetTypeInfo(typeof(System.Exception)).GetDeclaredField(" +
                    "fieldName);\r\n        var jsonPropertyName = resolver is Newtonsoft.Json.Serializ" +
                    "ation.DefaultContractResolver ? ((Newtonsoft.Json.Serialization.DefaultContractR" +
                    "esolver)resolver).GetResolvedPropertyName(propertyName) : propertyName;\r\n       " +
                    " if (jObject[jsonPropertyName] != null)\r\n        {\r\n            var fieldValue =" +
                    " jObject[jsonPropertyName].ToObject(field.FieldType, serializer);\r\n            f" +
                    "ield.SetValue(value, fieldValue);\r\n        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    internal class JsonExceptionConverterTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
