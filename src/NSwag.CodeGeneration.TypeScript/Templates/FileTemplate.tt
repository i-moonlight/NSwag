<#@ template visibility="internal" #>
<#@ import namespace="NJsonSchema" #>
/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v<#=SwaggerDocument.ToolchainVersion#> (NJsonSchema v<#=JsonSchema4.ToolchainVersion#>) (http://NSwag.org)
// </auto-generated>
//----------------------

<#=Model.ExtensionCodeImport#>
<#if(Model.IsAngular2){#>

import 'rxjs/Rx'; 
import {Observable} from 'rxjs/Observable';
import {Injectable, Inject, Optional, OpaqueToken} from '@angular/core';
import {Http, Headers, Response<#if(Model.UseTransformOptionsMethod){#>, RequestOptionsArgs<#}#>} from '@angular/http';
<#}#>
<#if(Model.IsAurelia){#>

import { inject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-fetch-client';
<#}#>
<#if(Model.IsAngular){#>

import * as ng from 'angular';
<#}#>
<#if(Model.IsKnockout){#>

import * as ko from 'knockout';
<#}#>

<#if(Model.HasModuleName){#>
module <#=Model.ModuleName#> {
<#}
  if(Model.HasNamespace){#>
namespace <#=Model.Namespace#> {
<#}#>
<#if(Model.IsAngular2){#>
export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

<#}#>
<#=Model.ExtensionCodeTop#>

<#=Model.Clients#>

<#=Model.Types#>

<#if(Model.RequiresFileParameterInterface){#>
export interface FileParameter
{
    data: any;
    fileName: string;
}

<#}#>
<#if(Model.RequiresSwaggerExceptionClass){#>
export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

<#}#>
<#=Model.ExtensionCodeBottom#>
<#if(Model.HasNamespace){#>
}
<#}
  if(Model.HasModuleName){#>
}
<#}#>