//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v7.7.6182.38447 (NJsonSchema v6.2.6179.20107) (http://NSwag.org)
// </auto-generated>
//----------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;

namespace Uber
{
    #pragma warning disable // Disable all warnings

    [GeneratedCode("NSwag", "7.7.6182.38447")]
    public partial class Client 
    {
        private string _baseUrl = "https://api.uber.com/v1";
        
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        /// <summary>Product Types</summary>
        /// <param name="latitude">Latitude component of location.</param>
        /// <param name="longitude">Longitude component of location.</param>
        /// <returns>An array of products</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<Product>> ProductsAsync(double latitude, double longitude)
        {
            return ProductsAsync(latitude, longitude, CancellationToken.None);
        }
    
        /// <summary>Product Types</summary>
        /// <param name="latitude">Latitude component of location.</param>
        /// <param name="longitude">Longitude component of location.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>An array of products</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<Product>> ProductsAsync(double latitude, double longitude, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "products");
    
            if (latitude == null)
                throw new ArgumentNullException("latitude");
            else
                url_ += string.Format("latitude={0}&", Uri.EscapeDataString(latitude.ToString()));
    
            if (longitude == null)
                throw new ArgumentNullException("longitude");
            else
                url_ += string.Format("longitude={0}&", Uri.EscapeDataString(longitude.ToString()));
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(ObservableCollection<Product>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<ObservableCollection<Product>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
                var result_ = default(Error); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Error>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
    
                } 
                catch (Exception exception_) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception_);
                }
    
                throw new SwaggerException<Error>("Unexpected error", status_, responseData_, result_, null);
            }
    		
            return default(ObservableCollection<Product>);
        }
    
        /// <summary>Price Estimates</summary>
        /// <param name="start_latitude">Latitude component of start location.</param>
        /// <param name="start_longitude">Longitude component of start location.</param>
        /// <param name="end_latitude">Latitude component of end location.</param>
        /// <param name="end_longitude">Longitude component of end location.</param>
        /// <returns>An array of price estimates by product</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<PriceEstimate>> PriceAsync(double start_latitude, double start_longitude, double end_latitude, double end_longitude)
        {
            return PriceAsync(start_latitude, start_longitude, end_latitude, end_longitude, CancellationToken.None);
        }
    
        /// <summary>Price Estimates</summary>
        /// <param name="start_latitude">Latitude component of start location.</param>
        /// <param name="start_longitude">Longitude component of start location.</param>
        /// <param name="end_latitude">Latitude component of end location.</param>
        /// <param name="end_longitude">Longitude component of end location.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>An array of price estimates by product</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<PriceEstimate>> PriceAsync(double start_latitude, double start_longitude, double end_latitude, double end_longitude, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "estimates/price");
    
            if (start_latitude == null)
                throw new ArgumentNullException("start_latitude");
            else
                url_ += string.Format("start_latitude={0}&", Uri.EscapeDataString(start_latitude.ToString()));
    
            if (start_longitude == null)
                throw new ArgumentNullException("start_longitude");
            else
                url_ += string.Format("start_longitude={0}&", Uri.EscapeDataString(start_longitude.ToString()));
    
            if (end_latitude == null)
                throw new ArgumentNullException("end_latitude");
            else
                url_ += string.Format("end_latitude={0}&", Uri.EscapeDataString(end_latitude.ToString()));
    
            if (end_longitude == null)
                throw new ArgumentNullException("end_longitude");
            else
                url_ += string.Format("end_longitude={0}&", Uri.EscapeDataString(end_longitude.ToString()));
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(ObservableCollection<PriceEstimate>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<ObservableCollection<PriceEstimate>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
                var result_ = default(Error); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Error>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
    
                } 
                catch (Exception exception_) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception_);
                }
    
                throw new SwaggerException<Error>("Unexpected error", status_, responseData_, result_, null);
            }
    		
            return default(ObservableCollection<PriceEstimate>);
        }
    
        /// <summary>Time Estimates</summary>
        /// <param name="start_latitude">Latitude component of start location.</param>
        /// <param name="start_longitude">Longitude component of start location.</param>
        /// <param name="customer_uuid">Unique customer identifier to be used for experience customization.</param>
        /// <param name="product_id">Unique identifier representing a specific product for a given latitude & longitude.</param>
        /// <returns>An array of products</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<Product>> TimeAsync(double start_latitude, double start_longitude, Guid? customer_uuid, string product_id)
        {
            return TimeAsync(start_latitude, start_longitude, customer_uuid, product_id, CancellationToken.None);
        }
    
        /// <summary>Time Estimates</summary>
        /// <param name="start_latitude">Latitude component of start location.</param>
        /// <param name="start_longitude">Longitude component of start location.</param>
        /// <param name="customer_uuid">Unique customer identifier to be used for experience customization.</param>
        /// <param name="product_id">Unique identifier representing a specific product for a given latitude & longitude.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>An array of products</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<Product>> TimeAsync(double start_latitude, double start_longitude, Guid? customer_uuid, string product_id, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "estimates/time");
    
            if (start_latitude == null)
                throw new ArgumentNullException("start_latitude");
            else
                url_ += string.Format("start_latitude={0}&", Uri.EscapeDataString(start_latitude.ToString()));
    
            if (start_longitude == null)
                throw new ArgumentNullException("start_longitude");
            else
                url_ += string.Format("start_longitude={0}&", Uri.EscapeDataString(start_longitude.ToString()));
    
            if (customer_uuid != null)
                url_ += string.Format("customer_uuid={0}&", Uri.EscapeDataString(customer_uuid.Value.ToString()));
    
            if (product_id != null)
                url_ += string.Format("product_id={0}&", Uri.EscapeDataString(product_id.ToString()));
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(ObservableCollection<Product>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<ObservableCollection<Product>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
                var result_ = default(Error); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Error>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
    
                } 
                catch (Exception exception_) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception_);
                }
    
                throw new SwaggerException<Error>("Unexpected error", status_, responseData_, result_, null);
            }
    		
            return default(ObservableCollection<Product>);
        }
    
        /// <summary>User Profile</summary>
        /// <returns>Profile information for a user</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Profile> MeAsync()
        {
            return MeAsync(CancellationToken.None);
        }
    
        /// <summary>User Profile</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Profile information for a user</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Profile> MeAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "me");
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(Profile); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Profile>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
                var result_ = default(Error); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Error>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
    
                } 
                catch (Exception exception_) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception_);
                }
    
                throw new SwaggerException<Error>("Unexpected error", status_, responseData_, result_, null);
            }
    		
            return default(Profile);
        }
    
        /// <summary>User Activity</summary>
        /// <param name="offset">Offset the list of returned results by this amount. Default is zero.</param>
        /// <param name="limit">Number of items to retrieve. Default is 5, maximum is 100.</param>
        /// <returns>History information for the given user</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Activities> HistoryAsync(int? offset, int? limit)
        {
            return HistoryAsync(offset, limit, CancellationToken.None);
        }
    
        /// <summary>User Activity</summary>
        /// <param name="offset">Offset the list of returned results by this amount. Default is zero.</param>
        /// <param name="limit">Number of items to retrieve. Default is 5, maximum is 100.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>History information for the given user</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Activities> HistoryAsync(int? offset, int? limit, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "history");
    
            if (offset != null)
                url_ += string.Format("offset={0}&", Uri.EscapeDataString(offset.Value.ToString()));
    
            if (limit != null)
                url_ += string.Format("limit={0}&", Uri.EscapeDataString(limit.Value.ToString()));
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(Activities); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Activities>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
                var result_ = default(Error); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Error>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
    
                } 
                catch (Exception exception_) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception_);
                }
    
                throw new SwaggerException<Error>("Unexpected error", status_, responseData_, result_, null);
            }
    		
            return default(Activities);
        }
    
    }
    
    

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.2.6179.20107")]
    public partial class Product : INotifyPropertyChanged
    { 
        private string _product_id; 
        private string _description; 
        private string _display_name; 
        private string _capacity; 
        private string _image;
    
        /// <summary>Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.</summary>
        [JsonProperty("product_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Product_id
        {
            get { return _product_id; }
            set 
            {
                if (_product_id != value)
                {
                    _product_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Description of product.</summary>
        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Display name of product.</summary>
        [JsonProperty("display_name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Display_name
        {
            get { return _display_name; }
            set 
            {
                if (_display_name != value)
                {
                    _display_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Capacity of product. For example, 4 people.</summary>
        [JsonProperty("capacity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Capacity
        {
            get { return _capacity; }
            set 
            {
                if (_capacity != value)
                {
                    _capacity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Image URL representing the product.</summary>
        [JsonProperty("image", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Image
        {
            get { return _image; }
            set 
            {
                if (_image != value)
                {
                    _image = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Product FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Product>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.2.6179.20107")]
    public partial class PriceEstimate : INotifyPropertyChanged
    { 
        private string _product_id; 
        private string _currency_code; 
        private string _display_name; 
        private string _estimate; 
        private double? _low_estimate; 
        private double? _high_estimate; 
        private double? _surge_multiplier;
    
        /// <summary>Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles</summary>
        [JsonProperty("product_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Product_id
        {
            get { return _product_id; }
            set 
            {
                if (_product_id != value)
                {
                    _product_id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>[ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code.</summary>
        [JsonProperty("currency_code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency_code
        {
            get { return _currency_code; }
            set 
            {
                if (_currency_code != value)
                {
                    _currency_code = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Display name of product.</summary>
        [JsonProperty("display_name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Display_name
        {
            get { return _display_name; }
            set 
            {
                if (_display_name != value)
                {
                    _display_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or "Metered" for TAXI.</summary>
        [JsonProperty("estimate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Estimate
        {
            get { return _estimate; }
            set 
            {
                if (_estimate != value)
                {
                    _estimate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Lower bound of the estimated price.</summary>
        [JsonProperty("low_estimate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Low_estimate
        {
            get { return _low_estimate; }
            set 
            {
                if (_low_estimate != value)
                {
                    _low_estimate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Upper bound of the estimated price.</summary>
        [JsonProperty("high_estimate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? High_estimate
        {
            get { return _high_estimate; }
            set 
            {
                if (_high_estimate != value)
                {
                    _high_estimate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier.</summary>
        [JsonProperty("surge_multiplier", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Surge_multiplier
        {
            get { return _surge_multiplier; }
            set 
            {
                if (_surge_multiplier != value)
                {
                    _surge_multiplier = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static PriceEstimate FromJson(string data)
        {
            return JsonConvert.DeserializeObject<PriceEstimate>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.2.6179.20107")]
    public partial class Profile : INotifyPropertyChanged
    { 
        private string _first_name; 
        private string _last_name; 
        private string _email; 
        private string _picture; 
        private string _promo_code;
    
        /// <summary>First name of the Uber user.</summary>
        [JsonProperty("first_name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string First_name
        {
            get { return _first_name; }
            set 
            {
                if (_first_name != value)
                {
                    _first_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Last name of the Uber user.</summary>
        [JsonProperty("last_name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Last_name
        {
            get { return _last_name; }
            set 
            {
                if (_last_name != value)
                {
                    _last_name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Email address of the Uber user</summary>
        [JsonProperty("email", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Image URL of the Uber user.</summary>
        [JsonProperty("picture", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Picture
        {
            get { return _picture; }
            set 
            {
                if (_picture != value)
                {
                    _picture = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Promo code of the Uber user.</summary>
        [JsonProperty("promo_code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Promo_code
        {
            get { return _promo_code; }
            set 
            {
                if (_promo_code != value)
                {
                    _promo_code = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Profile FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Profile>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.2.6179.20107")]
    public partial class Activity : INotifyPropertyChanged
    { 
        private string _uuid;
    
        /// <summary>Unique identifier for the activity</summary>
        [JsonProperty("uuid", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Uuid
        {
            get { return _uuid; }
            set 
            {
                if (_uuid != value)
                {
                    _uuid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Activity FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Activity>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.2.6179.20107")]
    public partial class Activities : INotifyPropertyChanged
    { 
        private int? _offset; 
        private int? _limit; 
        private int? _count; 
        private ObservableCollection<Activity> _history;
    
        /// <summary>Position in pagination.</summary>
        [JsonProperty("offset", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Offset
        {
            get { return _offset; }
            set 
            {
                if (_offset != value)
                {
                    _offset = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of items to retrieve (100 max).</summary>
        [JsonProperty("limit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Limit
        {
            get { return _limit; }
            set 
            {
                if (_limit != value)
                {
                    _limit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Total number of items available.</summary>
        [JsonProperty("count", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Count
        {
            get { return _count; }
            set 
            {
                if (_count != value)
                {
                    _count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("history", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Activity> History
        {
            get { return _history; }
            set 
            {
                if (_history != value)
                {
                    _history = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Activities FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Activities>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.2.6179.20107")]
    public partial class Error : INotifyPropertyChanged
    { 
        private int? _code; 
        private string _message; 
        private string _fields;
    
        [JsonProperty("code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Code
        {
            get { return _code; }
            set 
            {
                if (_code != value)
                {
                    _code = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("message", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("fields", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Fields
        {
            get { return _fields; }
            set 
            {
                if (_fields != value)
                {
                    _fields = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Error FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Error>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [GeneratedCode("NSwag", "7.7.6182.38447")]
    public class SwaggerException : Exception
    {
        public string StatusCode { get; private set; }

        public byte[] ResponseData { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            ResponseData = responseData;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: n{0}n{1}", Encoding.UTF8.GetString(ResponseData, 0, ResponseData.Length), base.ToString());
        }
    }

    [GeneratedCode("NSwag", "7.7.6182.38447")]
    public class SwaggerException<TResponse> : SwaggerException
    {
        public TResponse Response { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, TResponse response, Exception innerException) 
            : base(message, statusCode, responseData, innerException)
        {
            Response = response;
        }
    }

}