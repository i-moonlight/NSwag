<#@ template visibility="internal" #>
<#@ import namespace="NJsonSchema" #>
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v<#=SwaggerDocument.ToolchainVersion#> (NJsonSchema v<#=JsonSchema4.ToolchainVersion#>) (http://NSwag.org)
// </auto-generated>
//----------------------

<#foreach(var usage in Model.NamespaceUsages){#>using <#=usage#>;
<#}#>

namespace <#=Model.Namespace#>
{
    #pragma warning disable // Disable all warnings

    <#=ConversionUtilities.Tab(Model.Clients, 1)#>

<#if(Model.GenerateContracts){#>
    <#=ConversionUtilities.Tab(Model.Classes, 1)#>

<#  if(Model.RequiresFileParameterType){#>
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "<#=SwaggerDocument.ToolchainVersion#>")]
    public class FileParameter
    {
        public FileParameter(System.IO.Stream data) 
            : this (data, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
        {
            Data = data;
            FileName = fileName;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }
    }

<#}#>
<#if (Model.GenerateFileResponseClass){#>
    public class FileResponse : System.IDisposable
    {
        private System.IDisposable _client; 
        private System.IDisposable _response; 

        public string StatusCode { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == "206"; }
        }

        public FileResponse(string statusCode, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode; 
            Headers = headers; 
            Stream = stream; 
            _client = client; 
            _response = response;
        }

        public void Dispose() 
        {
            if (Stream != null)
                Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

<#}#>
<#if (Model.WrapSuccessResponses && Model.GenerateResponseClasses){#>
<#  foreach (var responseClassName in Model.ResponseClassNames){#>
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "<#=SwaggerDocument.ToolchainVersion#>")]
    public class <#=responseClassName#>
    {
        public string StatusCode { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }
        
        public <#=responseClassName#>(string statusCode, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers) 
        {
            StatusCode = statusCode; 
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "<#=SwaggerDocument.ToolchainVersion#>")]
    public class <#=responseClassName#><TResult> : <#=responseClassName#>
    {
        public TResult Result { get; private set; }
        
        public <#=responseClassName#>(string statusCode, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result) 
            : base(statusCode, headers)
        {
            Result = result;
        }
    }

<#  }#>
<#}#>
<#if (Model.GenerateExceptionClasses){#>
<#  foreach (var exceptionClassName in Model.ExceptionClassNames){#>
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "<#=SwaggerDocument.ToolchainVersion#>")]
    public class <#=exceptionClassName#> : System.Exception
    {
        public string StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public <#=exceptionClassName#>(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "<#=SwaggerDocument.ToolchainVersion#>")]
    public class <#=exceptionClassName#><TResult> : <#=exceptionClassName#>
    {
        public TResult Result { get; private set; }

        public <#=exceptionClassName#>(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

<#  }#>
<#}#>
<#}#>
<#if(Model.GenerateImplementation){#>
<#  if(Model.RequiresJsonExceptionConverter){#>
    <#=Model.JsonExceptionConverterCode#>
<#  }#>
<#}#>
}