<#@ template visibility="internal" #>
<#@ import namespace="NJsonSchema" #>
<#      if(Model.IsAngular){#>
let _headers: any = response.headers ? response.headers.toJSON() : {};
<#      }else if(Model.IsFetchOrAurelia){#>
let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
<#      }else{#>
let _headers: any = {};
<#      }#>
<#if(Model.HandleReferences && Model.RequiresMappings){#>
let _mappings: { source: any, target: any }[] = [];
<#}#>
<#foreach(var response in Model.Responses){#>
if (status === <#=response.StatusCode#><#if(response.CheckChunkedStatusCode){#> || status === 206<#}#>) {
<#  if(Model.CanRequestBlobs && response.IsFile){#>
    const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
    const fileNameMatch = contentDisposition ? /filename="?([^"]*)"?;/g.exec(contentDisposition) : undefined;
    const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
<#      if(Model.IsAngular){#>
<#          if(Model.WrapResponse){#>
    return Observable.of(new <#=Model.ResponseClass#>(status, _headers, { fileName: fileName, data: response.blob(), status: status, headers: _headers }));
<#          }else{#>
    return Observable.of({ fileName: fileName, data: response.blob(), status: status, headers: _headers });
<#          }#>
<#      }else if(Model.IsAngularJS){#>
<#          if(Model.WrapResponse){#>
    return this.q.resolve(new <#=Model.ResponseClass#>(status, _headers, { fileName: fileName, status: status, data: new Blob([response]), headers: _headers }));
<#          }else{#>
    return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response]), headers: _headers });
<#          }#>
<#      }else{#>
<#          if(Model.WrapResponse){#>
    return response.blob().then(blob => { return new <#=Model.ResponseClass#>(status, _headers, { fileName: fileName, data: blob, status: status, headers: _headers }); });
<#          }else{#>
    return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
<#          }#>
<#      }#>
<#  }else{#>
<#      if(Model.IsFetchOrAurelia){#>
    return response.text().then((_responseText) => {
<#      }else if(Model.RequestAngularBlobs){#>
    return blobToText(response.blob()).flatMap(_responseText => {
<#      }else if(Model.RequestAngularJSBlobs){#>
    return blobToText(new Blob([response]), this.q).then(_responseText => {
<#      }else if(Model.IsAngular){#>
    const _responseText = response.text();
<#      }else if(Model.IsAngularJS){#>
    const _responseText = response.data;
<#      }else{#>
    const _responseText = xhr.responseText; 
<#      }#>
<#      if(response.HasType){#>
    let result<#=response.StatusCode#>: <#=response.Type#><#if(Model.SupportsStrictNullChecks){#> | null<#}#> = null;
<#          if(response.UseDtoClass || response.IsDate){#>
    let resultData<#=response.StatusCode#> = _responseText === "" ? null : <#if(Model.HandleReferences){#>jsonParse<#}else{#>JSON.parse<#}#>(_responseText, this.jsonParseReviver);
    <#=ConversionUtilities.Tab(response.DataConversionCode, 1)#>
<#          }else{#>
    result<#=response.StatusCode#> = _responseText === "" ? null : <<#=response.Type#>><#if(Model.HandleReferences){#>jsonParse<#}else{#>JSON.parse<#}#>(_responseText, this.jsonParseReviver);
<#          }
            if(response.IsSuccess(Model)){#>
<#              if(Model.IsAngular){#>
<#				    if(Model.WrapResponse){#>
    return Observable.of(new <#=Model.ResponseClass#>(status, _headers, result<#=response.StatusCode#>));
<#                  }else{#>
    return Observable.of(result<#=response.StatusCode#>);
<#                  }#>
<#              }else if(Model.IsAngularJS){#>
<#				    if(Model.WrapResponse){#>
    return this.q.resolve(new <#=Model.ResponseClass#>(status, _headers, result<#=response.StatusCode#>));
<#                  }else{#>
    return this.q.resolve(result<#=response.StatusCode#>);
<#                  }#>
<#              }else{#>
<#				    if(Model.WrapResponse){#>
    return new <#=Model.ResponseClass#>(status, _headers, result<#=response.StatusCode#>);
<#                  }else{#>
    return result<#=response.StatusCode#>;
<#                  }#>
<#              }#>
<#          }else{#>
    return throwException(<#if(Model.IsAngularJS){#>this.q, <#}#>"A server error occurred.", status, _responseText, _headers, result<#=response.StatusCode#>);
<#          }
        }else if(response.IsSuccess(Model)){#>
<#              if(Model.IsAngular){#>
    return Observable.of<<#=Model.ResultType#>>(<any>null);
<#              }else if(Model.IsAngularJS){#>
    return this.q.resolve<<#=Model.ResultType#>>(<any>null);
<#              }else{#>
    return<#if(Model.HasResultType){#> null<#}#>;
<#              }#>
<#      }else{#>
    return throwException(<#if(Model.IsAngularJS){#>this.q, <#}#>"A server error occurred.", status, _responseText, _headers);
<#      }#>
<#      if(Model.IsFetchOrAurelia || Model.RequestAngularBlobs || Model.RequestAngularJSBlobs){#>
    });
<#      }#>
<#  }#>
} else <#}
if(Model.HasDefaultResponse){#>{
<#  if(Model.CanRequestBlobs && Model.DefaultResponse.IsFile){#>
<#      if(Model.IsAngular){#>
    return Observable.of(response.blob());
<#      }else if(Model.IsAngularJS){#>
    return this.q.resolve(new Blob([response]));
<#      }else{#>
    return response.blob();
<#      }#>
<#  }else{#>
<#      if(Model.IsFetchOrAurelia){#>
    return response.text().then((_responseText) => {
<#      }else if(Model.RequestAngularBlobs){#>
    return blobToText(response.blob()).flatMap(_responseText => {
<#      }else if(Model.RequestAngularJSBlobs){#>
    return blobToText(new Blob([response]), this.q).then(_responseText => {
<#      }else if(Model.IsAngular){#>
    const _responseText = response.text();
<#      }else if(Model.IsAngularJS){#>
    const _responseText = response.data;
<#      }else{#>
    const _responseText = xhr.responseText; 
<#      }#>
<#      if(Model.DefaultResponse.HasType){#>
    let result: <#=Model.DefaultResponse.Type#><#if(Model.SupportsStrictNullChecks){#> | null<#}#> = null;
<#          if(Model.DefaultResponse.UseDtoClass || Model.DefaultResponse.IsDate){#>
    let resultData = _responseText === "" ? null : <#if(Model.HandleReferences){#>jsonParse<#}else{#>JSON.parse<#}#>(_responseText, this.jsonParseReviver);
    <#=ConversionUtilities.Tab(Model.DefaultResponse.DataConversionCode, 1)#>
<#          }else{#>
    result = _responseText === "" ? null : <<#=Model.DefaultResponse.Type#>><#if(Model.HandleReferences){#>jsonParse<#}else{#>JSON.parse<#}#>(_responseText, this.jsonParseReviver);
<#          }
            if(!Model.HasSuccessResponse){#>
<#              if(Model.IsAngular){#>
<#				    if(Model.WrapResponse){#>
    return Observable.of(new <#=Model.ResponseClass#>(status, _headers, result));
<#                  }else{#>
    return Observable.of(result);
<#                  }#>
<#              }else if(Model.IsAngularJS){#>
<#				    if(Model.WrapResponse){#>
    return this.q.resolve(new <#=Model.ResponseClass#>(status, _headers, result));
<#                  }else{#>
    return this.q.resolve(result);
<#                  }#>
<#              }else{#>
<#				    if(Model.WrapResponse){#>
    return new <#=Model.ResponseClass#>(status, _headers, result);
<#                  }else{#>
    return result;
<#                  }#>
<#              }#>
<#          }else{#>
    return throwException(<#if(Model.IsAngularJS){#>this.q, <#}#>"A server error occurred.", status, _responseText, _headers, result);
<#          }
        }else if(!Model.HasSuccessResponse){#>
<#              if(Model.IsAngular){#>
<#				    if(Model.WrapResponse){#>
    return Observable.of<<#=Model.ResultType#>>(new <#=Model.ResponseClass#>(status, _headers, <any>null));
<#                  }else{#>
    return Observable.of<<#=Model.ResultType#>>(<any>null);
<#                  }#>
<#              }else if(Model.IsAngularJS){#>
<#				    if(Model.WrapResponse){#>
    return this.q.resolve<<#=Model.ResultType#>>(new <#=Model.ResponseClass#>(status, _headers, <any>null));
<#                  }else{#>
    return this.q.resolve<<#=Model.ResultType#>>(<any>null);
<#                  }#>
<#              }else{#>
<#				    if(Model.WrapResponse){#>
    return new <#=Model.ResponseClass#>(status, _headers, <#if(Model.HasResultType){#>null<#}else{#><any>undefined<#}#>);
<#                  }else{#>
    return<#if(Model.HasResultType){#> null<#}#>;
<#                  }#>
<#              }#>
<#      }else{#>
    return throwException(<#if(Model.IsAngularJS){#>this.q, <#}#>"A server error occurred.", status, _responseText, _headers);
<#      }#>
<#  if(Model.IsFetchOrAurelia || Model.RequestAngularBlobs || Model.RequestAngularJSBlobs){#>
    });
<#  }#>
<#  }#>
}
<#}else{#>
if (status !== 200 && status !== 204) {
<#      if(Model.IsFetchOrAurelia){#>
    return response.text().then((_responseText) => {
<#      }else if(Model.RequestAngularBlobs){#>
    return blobToText(response.blob()).flatMap(_responseText => {
<#      }else if(Model.RequestAngularJSBlobs){#>
    return blobToText(new Blob([response]), this.q).then(_responseText => {
<#      }else if(Model.IsAngular){#>
    const _responseText = response.text();
<#      }else if(Model.IsAngularJS){#>
    const _responseText = response.data;
<#      }else{#>
    const _responseText = xhr.responseText; 
<#      }#>
    return throwException(<#if(Model.IsAngularJS){#>this.q, <#}#>"An unexpected server error occurred.", status, _responseText, _headers);
<#  if(Model.IsFetchOrAurelia || Model.RequestAngularBlobs || Model.RequestAngularJSBlobs){#>
    });
<#  }#>
}
<#  if(Model.IsFetchOrAurelia){#>
<#	    if(Model.WrapResponse){#>
return Promise.resolve<<#=Model.ResultType#>>(new <#=Model.ResponseClass#>(status, _headers, <any>null));
<#      }else{#>
return Promise.resolve<<#=Model.ResultType#>>(<any>null);
<#      }#>
<#  }else if(Model.IsAngular){#>
<#	    if(Model.WrapResponse){#>
return Observable.of<<#=Model.ResultType#>>(new <#=Model.ResponseClass#>(status, _headers, <any>null));
<#      }else{#>
return Observable.of<<#=Model.ResultType#>>(<any>null);
<#      }#>
<#  }else if(Model.IsAngularJS){#>
<#	    if(Model.WrapResponse){#>
return this.q.resolve<<#=Model.ResultType#>>(new <#=Model.ResponseClass#>(status, _headers, <any>null));
<#      }else{#>
return this.q.resolve<<#=Model.ResultType#>>(<any>null);
<#      }#>
<#  }else{#>
<#	    if(Model.WrapResponse){#>
return new <#=Model.ResponseClass#>(status, _headers, <any>null);
<#      }else{#>
return<#if(Model.HasResultType){#> null<#}#>;
<#      }#>
<#  }#>
<#}#>