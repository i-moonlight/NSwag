<if(hasOperations)>
<if(generateClientInterfaces)>
export interface I<class> {
<operations:{operation | 
<if(operation.HasDocumentation)>    /**
<if(operation.HasSummary)>     * <operation.Summary><endif>
<operation.Parameters:{parameter | 
<if(parameter.HasDescription)>     * @<parameter.Name> <parameter.Description><endif>}>
<if(operation.HasResultDescription)>     * @return <operation.ResultDescription><endif>
     */
<endif>    <operation.OperationNameLower>(<operation.Parameters:{parameter | <parameter.Name>: <parameter.Type>, }>onSuccess?: (result: <operation.ResultType>) => void, onFail?: (exception: <operation.ExceptionType>, reason: string) => void);

}>
}<endif>

export class <class> implements I<class> {
    baseUrl = "<baseUrl>"; 
    beforeSend: any = undefined; 

<operations:{operation | 
<if(operation.HasDocumentation)>    /**
<if(operation.HasSummary)>     * <operation.Summary><endif>
<operation.Parameters:{parameter | 
<if(parameter.HasDescription)>     * @<parameter.Name> <parameter.Description><endif>}>
<if(operation.HasResultDescription)>     * @return <operation.ResultDescription><endif>
     */
<endif>    <operation.OperationNameLower>(<operation.Parameters:{parameter | <parameter.Name>: <parameter.Type>, }>onSuccess?: (result: <operation.ResultType>) => void, onFail?: (exception: <operation.ExceptionType>, reason: string) => void) {
        var url = this.baseUrl + "/<operation.Path>?"; 

<operation.PlaceholderParameters:{parameter | 
    <if(parameter.IsDate)>
        url = url.replace("{<parameter.Name>\}", "" + <parameter.Name>.toJSON()); 
    <else>
        url = url.replace("{<parameter.Name>\}", "" + <parameter.Name>); 
    <endif>
}>

<operation.QueryParameters:{parameter | 
    <if(parameter.IsDate)>
        url += "<parameter.Name>=" + encodeURIComponent("" + <parameter.Name>.toJSON()) + "&"; 
    <else>
        url += "<parameter.Name>=" + encodeURIComponent("" + <parameter.Name>) + "&"; 
    <endif>
}>

<if(operation.HasContent)>
        var content = JSON.stringify(<operation.ContentParameter.Name>);
<else>
        var content = "";
<endif>

        $.ajax({
            url: url,
            beforeSend: this.beforeSend,
            type: "<operation.HttpMethodLower>",
            data: content,
            dataType: "text",
            contentType: "application/json; charset=UTF-8"
        \}).done((data, textStatus, xhr) => {
            this.process<operation.OperationNameUpper>(xhr, onSuccess, onFail);
        \}).fail((xhr) => {
            this.process<operation.OperationNameUpper>(xhr, onSuccess, onFail);
        \});
    \}

    private process<operation.OperationNameUpper>(xhr: any, onSuccess?: any, onFail?: any) {
        var data = xhr.responseText; 
        var status = xhr.status.toString(); 

<operation.Responses:{response | 
        if (status === "<response.StatusCode>") {
            var result<response.StatusCode> = null; 
            try { 
<if(response.TypeIsDate)>
                result<response.StatusCode> = new Date(data);
<else>
                result<response.StatusCode> = \<<response.Type>>jQuery.parseJSON(data);
<endif>
            \} catch(e) { 
                if (onFail !== undefined)
                    onFail(null, "error_parsing", e);
                return;
            \}
<if(response.IsSuccess)>
            if (onSuccess !== undefined)
                onSuccess(result<response.StatusCode>);
<else>
            if (onFail !== undefined)
                onFail(result<response.StatusCode>);
<endif>
            return;
        \}
        else}>
        {
<if(operation.HasDefaultResponse)>
            var result = null; 
            try { 
    <if(operation.DefaultResponse.TypeIsDate)>
                result = new Date(data);
    <else>
                result = \<<operation.DefaultResponse.Type>>jQuery.parseJSON(data);
    <endif>
            \} catch(e) { 
                if (onFail !== undefined)
                    onFail(null, "error_parsing", e);
                return;
            \}
    <if(operation.DefaultResponse.IsSuccess)>
            if (onSuccess !== undefined)
                onSuccess(result);
    <else>
            if (onFail !== undefined)
                onFail(result);
    <endif>
<else>
            if (onFail !== undefined)
                onFail(null, "error_no_callback_for_status");
<endif>
        \}
    \}

}>
}
<endif>

