/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.6.6265.34833 (NJsonSchema v8.6.6263.34621) (http://NSwag.org)
// </auto-generated>
//----------------------

import 'rxjs/Rx'; 
import {Observable} from 'rxjs/Observable';
import {Injectable, Inject, Optional, OpaqueToken} from '@angular/core';
import {Http, Headers, Response, RequestOptionsArgs} from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

export class MyBaseClass {
    protected transformOptions(options: any) {
        return options;
    }

    protected transformResult(_: string, response: any, processor: (response: any) => any) {
        return processor(response);
    }
}

@Injectable()
export class GeoClient extends MyBaseClass {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:13452"; 
    }

    fromBodyTest(location: GeoPoint): Observable<void> {
        let url_ = this.baseUrl + "/api/Geo/FromBodyTest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(location ? location.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processFromBodyTest(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processFromBodyTest(response)));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processFromBodyTest(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    fromUriTest(latitude: number, longitude: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Geo/FromUriTest?";
        if (latitude === null)
            throw new Error("The parameter 'latitude' cannot be null.");
        else if (latitude !== undefined)
            url_ += "Latitude=" + encodeURIComponent("" + latitude) + "&"; 
        if (longitude === null)
            throw new Error("The parameter 'longitude' cannot be null.");
        else if (longitude !== undefined)
            url_ += "Longitude=" + encodeURIComponent("" + longitude) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processFromUriTest(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processFromUriTest(response)));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processFromUriTest(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    addPolygon(points: GeoPoint[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Geo/AddPolygon";
        url_ = url_.replace(/[?&]$/, "");

        let contentData_: any = [];
        if (points) {
            for (let item of points)
                contentData_.push(item.toJS());
        }
        const content_ = JSON.stringify(points ? contentData_ : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processAddPolygon(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processAddPolygon(response)));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processAddPolygon(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    filter(currentStates: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Geo/Filter?";
        if (currentStates !== undefined)
            currentStates.forEach(item => { url_ += "currentStates=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processFilter(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processFilter(response)));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processFilter(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    reverse(values: string[]): Observable<string[]> {
        let url_ = this.baseUrl + "/api/Geo/Reverse?";
        if (values !== undefined)
            values.forEach(item => { url_ += "values=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processReverse(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processReverse(response)));
                } catch (e) {
                    return <Observable<string[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<string[]>><any>Observable.throw(response);
        });
    }

    protected processReverse(response: Response): string[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: string[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    refresh(): Observable<void> {
        let url_ = this.baseUrl + "/api/Geo/Refresh";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processRefresh(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processRefresh(response)));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processRefresh(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    uploadFile(file: FileParameter): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Geo/UploadFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                'Content-Type': undefined, 
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processUploadFile(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processUploadFile(response)));
                } catch (e) {
                    return <Observable<boolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<boolean>><any>Observable.throw(response);
        });
    }

    protected processUploadFile(response: Response): boolean {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: boolean | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    uploadFiles(files: FileParameter[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Geo/UploadFiles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (files !== null)
            files.forEach(item_ => content_.append("files", item_.data, item_.fileName ? item_.fileName : "files") );
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                'Content-Type': undefined, 
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processUploadFiles(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processUploadFiles(response)));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUploadFiles(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    saveItems(request: GenericRequestOfAddressAndPerson): Observable<void> {
        let url_ = this.baseUrl + "/api/Geo/SaveItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request ? request.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSaveItems(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSaveItems(response)));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSaveItems(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status === 450) {
            let result450: Exception | null = null;
            let resultData450 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result450 = resultData450 ? Exception.fromJS(resultData450) : null;
            this.throwException("A server error occurred.", status, responseText, result450);
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    getUploadedFile(id: number, override: boolean): Observable<any> {
        let url_ = this.baseUrl + "/api/Geo/GetUploadedFile/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (override === null)
            throw new Error("The parameter 'override' cannot be null.");
        else if (override !== undefined)
            url_ += "override=" + encodeURIComponent("" + override) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetUploadedFile(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetUploadedFile(response)));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processGetUploadedFile(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class PersonsClient extends MyBaseClass {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:13452"; 
    }

    getAll(): Observable<Person[]> {
        let url_ = this.baseUrl + "/api/Persons";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetAll(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetAll(response)));
                } catch (e) {
                    return <Observable<Person[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<Person[]>><any>Observable.throw(response);
        });
    }

    protected processGetAll(response: Response): Person[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: Person[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    add(person: Person): Observable<void> {
        let url_ = this.baseUrl + "/api/Persons";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(person ? person.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processAdd(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processAdd(response)));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processAdd(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    find(gender: Gender): Observable<Person[]> {
        let url_ = this.baseUrl + "/api/Persons/find/{gender}";
        if (gender === undefined || gender === null)
            throw new Error("The parameter 'gender' must be defined.");
        url_ = url_.replace("{gender}", encodeURIComponent("" + gender)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processFind(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processFind(response)));
                } catch (e) {
                    return <Observable<Person[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<Person[]>><any>Observable.throw(response);
        });
    }

    protected processFind(response: Response): Person[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: Person[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    findOptional(gender: Gender): Observable<Person[]> {
        let url_ = this.baseUrl + "/api/Persons/find2?";
        if (gender === undefined)
            throw new Error("The parameter 'gender' must be defined.");
        else
            url_ += "gender=" + encodeURIComponent("" + gender) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processFindOptional(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processFindOptional(response)));
                } catch (e) {
                    return <Observable<Person[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<Person[]>><any>Observable.throw(response);
        });
    }

    protected processFindOptional(response: Response): Person[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: Person[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    get(id: string): Observable<Person> {
        let url_ = this.baseUrl + "/api/Persons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGet(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGet(response)));
                } catch (e) {
                    return <Observable<Person>><any>Observable.throw(e);
                }
            } else
                return <Observable<Person>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): Person {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: Person | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Person.fromJS(resultData200) : null;
            return result200;
        } else if (status === 500) {
            let result500: PersonNotFoundException | null = null;
            let resultData500 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result500 = resultData500 ? PersonNotFoundException.fromJS(resultData500) : null;
            this.throwException("A server error occurred.", status, responseText, result500);
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Persons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processDelete(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processDelete(response)));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    throw(id: string): Observable<Person> {
        let url_ = this.baseUrl + "/api/Persons/Throw?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processThrow(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processThrow(response)));
                } catch (e) {
                    return <Observable<Person>><any>Observable.throw(e);
                }
            } else
                return <Observable<Person>><any>Observable.throw(response);
        });
    }

    protected processThrow(response: Response): Person {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: Person | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Person.fromJS(resultData200) : null;
            return result200;
        } else if (status === 500) {
            let result500: PersonNotFoundException | null = null;
            let resultData500 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result500 = resultData500 ? PersonNotFoundException.fromJS(resultData500) : null;
            this.throwException("A server error occurred.", status, responseText, result500);
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * Gets the name of a person.
     * @id The person ID.
     * @return The person's name.
     */
    getName(id: string): Observable<string> {
        let url_ = this.baseUrl + "/api/Persons/{id}/Name";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetName(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetName(response)));
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response);
        });
    }

    protected processGetName(response: Response): string {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: string | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        } else if (status === 500) {
            let result500: PersonNotFoundException | null = null;
            let resultData500 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result500 = resultData500 ? PersonNotFoundException.fromJS(resultData500) : null;
            this.throwException("A server error occurred.", status, responseText, result500);
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    addXml(person: string): Observable<string> {
        let url_ = this.baseUrl + "/api/Persons/AddXml";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = person;
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/xml; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processAddXml(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processAddXml(response)));
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response);
        });
    }

    protected processAddXml(response: Response): string {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: string | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export class GeoPoint { 
    latitude: number; 
    longitude: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : undefined;
            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : undefined;
        }
    }

    static fromJS(data: any): GeoPoint {
        return new GeoPoint(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Latitude"] = this.latitude !== undefined ? this.latitude : undefined;
        data["Longitude"] = this.longitude !== undefined ? this.longitude : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GeoPoint(JSON.parse(json));
    }
}

export class GenericRequestOfAddressAndPerson { 
    item1: Address; 
    item2: Person;
    constructor(data?: any) {
        if (data !== undefined) {
            this.item1 = data["Item1"] ? Address.fromJS(data["Item1"]) : undefined;
            this.item2 = data["Item2"] ? Person.fromJS(data["Item2"]) : undefined;
        }
    }

    static fromJS(data: any): GenericRequestOfAddressAndPerson {
        return new GenericRequestOfAddressAndPerson(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Item1"] = this.item1 ? this.item1.toJS() : undefined;
        data["Item2"] = this.item2 ? this.item2.toJS() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GenericRequestOfAddressAndPerson(JSON.parse(json));
    }
}

export class Address { 
    isPrimary: boolean; 
    city: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.isPrimary = data["IsPrimary"] !== undefined ? data["IsPrimary"] : undefined;
            this.city = data["City"] !== undefined ? data["City"] : undefined;
        }
    }

    static fromJS(data: any): Address {
        return new Address(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["IsPrimary"] = this.isPrimary !== undefined ? this.isPrimary : undefined;
        data["City"] = this.city !== undefined ? this.city : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new Address(JSON.parse(json));
    }
}

export class Person { 
    id: string; 
    /** Gets or sets the first name. */
    firstName: string; 
    /** Gets or sets the last name. */
    lastName: string; 
    gender: Gender; 
    dateOfBirth: Date; 
    weight: number; 
    height: number; 
    age: number; 
    averageSleepTime: string; 
    address: Address = new Address(); 
    children: Person[] = []; 
    skills: { [key: string] : SkillLevel; };    protected _discriminator: string;

    constructor(data?: any) {
        this._discriminator = "Person";
        if (data !== undefined) {
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.firstName = data["FirstName"] !== undefined ? data["FirstName"] : undefined;
            this.lastName = data["LastName"] !== undefined ? data["LastName"] : undefined;
            this.gender = data["Gender"] !== undefined ? data["Gender"] : undefined;
            this.dateOfBirth = data["DateOfBirth"] ? new Date(data["DateOfBirth"].toString()) : undefined;
            this.weight = data["Weight"] !== undefined ? data["Weight"] : undefined;
            this.height = data["Height"] !== undefined ? data["Height"] : undefined;
            this.age = data["Age"] !== undefined ? data["Age"] : undefined;
            this.averageSleepTime = data["AverageSleepTime"] !== undefined ? data["AverageSleepTime"] : undefined;
            this.address = data["Address"] ? Address.fromJS(data["Address"]) : new Address();
            if (data["Children"] && data["Children"].constructor === Array) {
                this.children = [];
                for (let item of data["Children"])
                    this.children.push(Person.fromJS(item));
            }
            if (data["Skills"]) {
                this.skills = {};
                for (let key in data["Skills"]) {
                    if (data["Skills"].hasOwnProperty(key))
                        this.skills[key] = data["Skills"][key] !== undefined ? data["Skills"][key] : undefined;
                }
            }
        }
    }

    static fromJS(data: any): Person {
        if (data["discriminator"] === "Teacher")
            return new Teacher(data);
        return new Person(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["discriminator"] = this._discriminator; 
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : undefined;
        data["LastName"] = this.lastName !== undefined ? this.lastName : undefined;
        data["Gender"] = this.gender !== undefined ? this.gender : undefined;
        data["DateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : undefined;
        data["Weight"] = this.weight !== undefined ? this.weight : undefined;
        data["Height"] = this.height !== undefined ? this.height : undefined;
        data["Age"] = this.age !== undefined ? this.age : undefined;
        data["AverageSleepTime"] = this.averageSleepTime !== undefined ? this.averageSleepTime : undefined;
        data["Address"] = this.address ? this.address.toJS() : undefined;
        if (this.children && this.children.constructor === Array) {
            data["Children"] = [];
            for (let item of this.children)
                data["Children"].push(item.toJS());
        }
        if (this.skills) {
            data["Skills"] = {};
            for (let key in this.skills) {
                if (this.skills.hasOwnProperty(key))
                    data["Skills"][key] = this.skills[key] !== undefined ? this.skills[key] : undefined;
            }
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new Person(JSON.parse(json));
    }
}

export enum Gender {
    Male = <any>"Male", 
    Female = <any>"Female", 
}

export enum SkillLevel {
    Low = 0, 
    Medium = 1, 
    Height = 2, 
}

export class Teacher extends Person { 
    course: string; 
    skillLevel: SkillLevel = SkillLevel.Medium;
    constructor(data?: any) {
        super(data);
        this._discriminator = "Teacher";
        if (data !== undefined) {
            this.course = data["Course"] !== undefined ? data["Course"] : undefined;
            this.skillLevel = data["SkillLevel"] !== undefined ? data["SkillLevel"] : undefined;
        }
    }

    static fromJS(data: any): Teacher {
        return new Teacher(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Course"] = this.course !== undefined ? this.course : undefined;
        data["SkillLevel"] = this.skillLevel !== undefined ? this.skillLevel : undefined;
        super.toJS(data);
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new Teacher(JSON.parse(json));
    }
}

export class Exception { 
    message: string; 
    innerException: Exception; 
    stackTrace: string; 
    source: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.message = data["Message"] !== undefined ? data["Message"] : undefined;
            this.innerException = data["InnerException"] ? Exception.fromJS(data["InnerException"]) : undefined;
            this.stackTrace = data["StackTrace"] !== undefined ? data["StackTrace"] : undefined;
            this.source = data["Source"] !== undefined ? data["Source"] : undefined;
        }
    }

    static fromJS(data: any): Exception {
        return new Exception(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Message"] = this.message !== undefined ? this.message : undefined;
        data["InnerException"] = this.innerException ? this.innerException.toJS() : undefined;
        data["StackTrace"] = this.stackTrace !== undefined ? this.stackTrace : undefined;
        data["Source"] = this.source !== undefined ? this.source : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new Exception(JSON.parse(json));
    }
}

export class PersonNotFoundException extends Exception { 
    id: string;
    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): PersonNotFoundException {
        return new PersonNotFoundException(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : undefined;
        super.toJS(data);
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PersonNotFoundException(JSON.parse(json));
    }
}

export interface FileParameter
{
    data: any;
    fileName: string;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}