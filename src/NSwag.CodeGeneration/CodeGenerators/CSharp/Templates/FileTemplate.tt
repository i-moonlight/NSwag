<#@ template visibility="internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="NJsonSchema" #>
<#@ import namespace="NJsonSchema.CodeGeneration" #>
<#@ import namespace="NJsonSchema.CodeGeneration.CSharp" #>
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v<#=SwaggerService.ToolchainVersion#> (NJsonSchema v<#=JsonSchema4.ToolchainVersion#>) (http://NSwag.org)
// </auto-generated>
//----------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
<#foreach(var usage in Model.NamespaceUsages){#>using <#=usage#>;
<#}#>

namespace <#=Model.Namespace#>
{
    #pragma warning disable // Disable all warnings

    <#=ConversionUtilities.Tab(Model.Clients, 1)#>

<#if(Model.GenerateContracts){#>
    <#=ConversionUtilities.Tab(Model.Classes, 1)#>

    [GeneratedCode("NSwag", "<#=SwaggerService.ToolchainVersion#>")]
    public class FileParameter
    {
        public FileParameter(Stream data) 
            : this (data, null)
        {
        }

        public FileParameter(Stream data, string fileName)
        {
            Data = data;
            FileName = fileName;
        }

        public Stream Data { get; private set; }

        public string FileName { get; private set; }
    }

    [GeneratedCode("NSwag", "<#=SwaggerService.ToolchainVersion#>")]
    public class SwaggerException : Exception
    {
        public string StatusCode { get; private set; }

        public byte[] ResponseData { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            ResponseData = responseData;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: n{0}n{1}", Encoding.UTF8.GetString(ResponseData, 0, ResponseData.Length), base.ToString());
        }
    }

    [GeneratedCode("NSwag", "<#=SwaggerService.ToolchainVersion#>")]
    public class SwaggerException<TResponse> : SwaggerException
    {
        public TResponse Response { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, TResponse response, Exception innerException) 
            : base(message, statusCode, responseData, innerException)
        {
            Response = response;
        }
    }
<#}#>

<#if(Model.GenerateImplementation){#>
    <#
        // TODO(exceptionhandling): Correctly implement this
        CSharpJsonConverters.GetJsonExceptionConverterCode(1);#>
<# }#>

<#if(Model.GenerateImplementation && Model.HasMissingHttpMethods){#>
    [GeneratedCode("NSwag", "<#=SwaggerService.ToolchainVersion#>")]
    internal static class HttpExtensions
    {
        public static async Task<HttpResponseMessage> OptionsAsync(this HttpClient client, string requestUri, HttpContent content, CancellationToken cancellationToken)
        {
            var method = new HttpMethod("OPTIONS");
            var request = new HttpRequestMessage(method, requestUri) { Content = content };
            return await client.SendAsync(request, cancellationToken);
        }

        public static async Task<HttpResponseMessage> HeadAsync(this HttpClient client, string requestUri, HttpContent content, CancellationToken cancellationToken)
        {
            var method = new HttpMethod("HEAD");
            var request = new HttpRequestMessage(method, requestUri) { Content = content };
            return await client.SendAsync(request, cancellationToken);
        }

        public static async Task<HttpResponseMessage> PatchAsync(this HttpClient client, string requestUri, HttpContent content, CancellationToken cancellationToken)
        {
            var method = new HttpMethod("PATCH");
            var request = new HttpRequestMessage(method, requestUri) { Content = content };
            return await client.SendAsync(request, cancellationToken);
        }

        public static async Task<HttpResponseMessage> DeleteAsync(this HttpClient client, string requestUri, HttpContent content, CancellationToken cancellationToken)
        {
            var method = new HttpMethod("DELETE");
            var request = new HttpRequestMessage(method, requestUri) { Content = content };
            return await client.SendAsync(request, cancellationToken);
        }
    }
<#}#>
}