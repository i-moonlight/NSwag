<#@ template visibility="internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="NJsonSchema.CodeGeneration" #>
<#@ import namespace="NSwag.CodeGeneration.CodeGenerators.TypeScript" #>
<#@ import namespace="System.Linq" #>

<#if(Model.HasOperations){#>
<#if(Model.GenerateClientInterfaces){#>
export interface I<#=Model.Class#> {
<#foreach(var operation in Model.Operations){#>
<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescription){#>     * @<#=parameter.VariableNameLower#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>    <#=operation.OperationNameLower#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableNameLower#>: <#=parameter.Type#><#if(!parameter.IsLast){#>, <#}#><#}#>): ng.IPromise<<#=operation.ResultType#>>;
<#}#>}
<#}#>

export class <#=Model.Class#> <#if(Model.GenerateClientInterfaces){#>implements I<#=Model.Class#> <#}#>{
    private baseUrl: string = undefined; 
    private http: ng.IHttpService = null; 
    private jsonParseReviver: (key: string, value: any) => any = undefined; 

    constructor($http: ng.IHttpService, baseUrl?: string, jsonParseReviver?: (key: string, value: any) => any) {
        this.http = $http; 
        this.baseUrl = baseUrl !== undefined ? baseUrl : "<#=Model.BaseUrl#>"; 
        this.jsonParseReviver = jsonParseReviver;
    }
<#if(Model.IsExtended){#>

    protected transformOptions(options: any) {
        return options; 
    }

    protected transformResult(url: string, response: any, processor: (response: any) => any) {
        return processor(response);
    }
<#}#>
<#foreach(var operation in Model.Operations){#>

<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescription){#>     * @<#=parameter.VariableNameLower#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>    <#=operation.OperationNameLower#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableNameLower#>: <#=parameter.Type#><#if(!parameter.IsLast){#>, <#}#><#}#>): ng.IPromise<<#=operation.ResultType#>> {
        let url_ = this.baseUrl + "/<#=operation.Path#><#if(operation.QueryParameters.Any()){#>?<#}#>"; 

<#foreach(var parameter in operation.PathParameters){#>
        if (<#=parameter.VariableNameLower#> === undefined || <#=parameter.VariableNameLower#> === null)
            throw new Error("The parameter '<#=parameter.VariableNameLower#>' must be defined.");
<#  if(parameter.IsDateArray){#>
        url_ = url_.replace("{<#=parameter.Name#>}", encodeURIComponent(<#=parameter.VariableNameLower#>.map(s_ => s_.toJSON()).join())); 
<#  }else if(parameter.IsDate){#>
        url_ = url_.replace("{<#=parameter.Name#>}", encodeURIComponent("" + <#=parameter.VariableNameLower#>.toJSON())); 
<#  }else if(parameter.IsArray){#>
        url_ = url_.replace("{<#=parameter.Name#>}", encodeURIComponent(<#=parameter.VariableNameLower#>.join())); 
<#  }else{#>
        url_ = url_.replace("{<#=parameter.Name#>}", encodeURIComponent("" + <#=parameter.VariableNameLower#>)); 
<#  }#>
<#}#>

<#foreach(var parameter in operation.QueryParameters){#>
<#  if (parameter.IsRequired) { 
        if(parameter.IsNullable){#>
        if (<#=parameter.VariableNameLower#> === undefined)
            throw new Error("The parameter '<#=parameter.VariableNameLower#>' must be defined.");
        else
<#      }else{#>
        if (<#=parameter.VariableNameLower#> === undefined || <#=parameter.VariableNameLower#> === null)
            throw new Error("The parameter '<#=parameter.VariableNameLower#>' must be defined and cannot be null.");
        else
<#      }
    }else{
        if(parameter.IsNullable){#>
        if (<#=parameter.VariableNameLower#> !== undefined)
<#      }else{#>
        if (<#=parameter.VariableNameLower#> === null)
            throw new Error("The parameter '<#=parameter.VariableNameLower#>' cannot be null.");
        else if (<#=parameter.VariableNameLower#> !== undefined)
<#      }
    }#>
<#  if(parameter.IsDateArray){#>
            <#=parameter.VariableNameLower#>.forEach(item => { url_ += "<#=parameter.Name#>=" + encodeURIComponent("" + item.toJSON()) + "&"; });
<#  }else if(parameter.IsDate){#>
            url_ += "<#=parameter.Name#>=" + encodeURIComponent("" + <#=parameter.VariableNameLower#>.toJSON()) + "&"; 
<#  }else if(parameter.IsArray){#>
            <#=parameter.VariableNameLower#>.forEach(item => { url_ += "<#=parameter.Name#>=" + encodeURIComponent("" + item) + "&"; });
<#  }else{#>
            url_ += "<#=parameter.Name#>=" + encodeURIComponent("" + <#=parameter.VariableNameLower#>) + "&"; 
<#  }
}#>

        <#=RequestBodyGenerator.Render(operation, 2)#>

        return this.http(<#if(Model.IsExtended){#>this.transformOptions(<#}#>{
            url: url_,
            method: "<#=operation.HttpMethodUpper.ToUpperInvariant()#>",
            data: content_,
            transformResponse: [], 
            headers: {
<#foreach(var parameter in operation.HeaderParameters){#>
                "<#=parameter.Name#>": <#=parameter.VariableNameLower#>, 
<#}#>
<#if(operation.HasFormParameters){#>                'Content-Type': undefined
<#}else{#>
                "Content-Type": "application/json; charset=UTF-8"
<#}#>
            }
        }<#if(Model.IsExtended){#>)<#}#>).then((response) => {
<#if(Model.IsExtended){#>
            return this.transformResult(url_, response, (response) => this.process<#=operation.OperationNameUpper#>(response));
<#}else{#>
            return this.process<#=operation.OperationNameUpper#>(response);
<#}#>
        });
    }

    private process<#=operation.OperationNameUpper#>(response: any) {
        const data = response.data;
        const status = response.status; 

<#foreach(var response in operation.Responses){#>
        if (status === <#=response.StatusCode#>) {
<#if(response.HasType){#>
            let result<#=response.StatusCode#>: <#=response.Type#> = null; 
<#  if(response.IsDate){#>
            result<#=response.StatusCode#> = new Date(data);
<#  }else{#>
<#      if(response.UseDtoClass){#>
            let resultData<#=response.StatusCode#> = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            <#=ConversionUtilities.Tab(response.DataConversionCode, 3)#>
<#      }else{#>
            result<#=response.StatusCode#> = data === "" ? null : <<#=response.Type#>>JSON.parse(data, this.jsonParseReviver);
<#      }#>
<#  }#>
<#  if(response.IsSuccess){#>
            return result<#=response.StatusCode#>; 
<#  }else{#>
            throw result<#=response.StatusCode#>; 
<#  }
}#>
        }
        else
<#}#>
        {
<#if(operation.HasDefaultResponse){#>
            let result: <#=operation.DefaultResponse.Type#> = null; 
<#  if(operation.DefaultResponse.IsDate){#>
            result = new Date(data);
<#  }else{#>
<#      if(operation.DefaultResponse.UseDtoClass){#>
            let resultData = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            <#=ConversionUtilities.Tab(operation.DefaultResponse.DataConversionCode, 3)#>
<#      }else{#>
            result = data === "" ? null : <<#=operation.DefaultResponse.Type#>>JSON.parse(data, this.jsonParseReviver);
<#      }#>
<#  }#>
<#  if(operation.DefaultResponse.IsSuccess){#>
            return result; 
<#  }else{#>
            throw result; 
<#  }
}else{#>
            throw new Error("error_no_callback_for_the_received_http_status"); 
<#}#>
        }
    }
<#}#>}
<#}#>

