<#@ template visibility="internal" #>
<#@ import namespace="NJsonSchema" #>
<#@ import namespace="CodeGeneration.TypeScript" #>

<#if(Model.HasOperations){#>
<#if(Model.GenerateClientInterfaces){#>
export interface I<#=Model.Class#> {
<#foreach(var operation in Model.Operations){#>
<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescription){#>     * @<#=parameter.VariableName#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>    <#=operation.MethodAccessModifier#><#=operation.ActualOperationName#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#><#if(Model.GenerateOptionalParameters && parameter.IsOptional){#>?<#}#>: <#=parameter.Type#><#=parameter.TypePostfix#><#if(!parameter.IsLast){#>, <#}#><#}#>): Promise<<#=operation.ResultType#>>;
<#}#>}
<#}#>

<#if(Model.UseAureliaHttpInjection){#>
@inject(String, HttpClient)
<#}#>
export class <#=Model.Class#> <#if(Model.HasBaseClass){#>extends <#=Model.BaseClass#> <#}#><#if(Model.GenerateClientInterfaces){#>implements I<#=Model.Class#> <#}#>{
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: <#if(Model.SupportsStrictNullChecks){#>((key: string, value: any) => any) | undefined<#}else{#>(key: string, value: any) => any<#}#> = undefined;

<#if(!Model.HasExtendedConstructor){#>
    constructor(<#if(Model.HasConfigurationClass){#>configuration: <#=Model.ConfigurationClass#>, <#}#>baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
<#if(Model.HasBaseClass){#>
        super(<#if(Model.HasConfigurationClass){#>configuration<#}#>);
<#}#>
        this.http = http ? http : <any>window;
<#if(Model.UseGetBaseUrlMethod){#>
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("<#=Model.BaseUrl#>");
<#}else{#>
        this.baseUrl = baseUrl ? baseUrl : "<#=Model.BaseUrl#>";
<#}#>
    }
<#}#>
<#if(Model.HasExtensionCode){#>
    <#=Model.ExtensionCode#>
    
<#}#>
<#foreach(var operation in Model.Operations){#>

<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescription){#>     * @<#=parameter.VariableName#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>
    <#=operation.MethodAccessModifier#><#=operation.ActualOperationName#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#><#if(Model.GenerateOptionalParameters && parameter.IsOptional){#>?<#}#>: <#=parameter.Type#><#=parameter.TypePostfix#><#if(!parameter.IsLast){#>, <#}#><#}#>): Promise<<#=operation.ResultType#>> {
        <#=TypeScriptTemplatePartGenerator.RenderRequestUrlCode(operation, 2)#>

<#if(operation.HasBody){#>
        <#=TypeScriptTemplatePartGenerator.RenderRequestBodyCode(operation, 2)#>

<#}#>
        let options_ = <RequestInit>{
<#if(operation.HasBody){#>
            body: content_,
<#}#>
            method: "<#=operation.HttpMethodUpper.ToUpperInvariant()#>",
            headers: {
<#foreach(var parameter in operation.HeaderParameters){#>
                "<#=parameter.Name#>": <#=parameter.VariableName#> !== undefined && <#=parameter.VariableName#> !== null ? "" + <#=parameter.VariableName#> : "", 
<#}#>
<#if(!operation.HasFormParameters){#>
                "Content-Type": "<#=operation.Consumes#>", 
<#}#>
<#if(operation.HasResultType && !operation.HasAcceptHeaderParameterParameter){#>
                "Accept": "<#=operation.Produces#>"
<#}#>
            }
        };

<#if(Model.UseTransformOptionsMethod){#>
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
<#}else{#>
        return this.http.fetch(url_, options_).then((_response: Response) => {
<#}#>
<#if(Model.UseTransformResultMethod){#>
            return this.transformResult(url_, _response, (_response: Response) => this.process<#=operation.ActualOperationNameUpper#>(_response));
<#}else{#>
            return this.process<#=operation.ActualOperationNameUpper#>(_response);
<#}#>
        });
    }

    protected process<#=operation.ActualOperationNameUpper#>(response: Response): Promise<<#=operation.ResultType#>> {
        const status = response.status;
        <#=TypeScriptTemplatePartGenerator.RenderProcessResponseCode(operation, 2)#>
    }
<#}#>
}
<#}#>