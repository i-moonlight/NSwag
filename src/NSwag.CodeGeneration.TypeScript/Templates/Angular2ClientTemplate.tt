<#@ template visibility="internal" #>
<#@ import namespace="NJsonSchema" #>
<#@ import namespace="CodeGeneration.TypeScript" #>

<#if(Model.HasOperations){#>
<#if(Model.GenerateClientInterfaces){#>
export interface I<#=Model.Class#> {
<#foreach(var operation in Model.Operations){#>
<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescription){#>     * @<#=parameter.VariableName#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>    <#=operation.ActualOperationName#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#>: <#=parameter.Type#><#if(!parameter.IsLast){#>, <#}#><#}#>): Observable<<#=operation.ResultType#>>;
<#}#>}
<#}#>

@Injectable()
export class <#=Model.Class#> <#if(Model.HasClientBaseClass){#>extends <#=Model.ClientBaseClass#> <#}#><#if(Model.GenerateClientInterfaces){#>implements I<#=Model.Class#> <#}#>{
    private http: Http = null; 
    private baseUrl: string<#if(Model.SupportsStrictNullChecks){#> | undefined<#}#> = undefined; 
    protected jsonParseReviver: <#if(Model.SupportsStrictNullChecks){#>((key: string, value: any) => any) | undefined<#}else{#>(key: string, value: any) => any<#}#> = undefined;

    constructor(<#if(Model.HasConfigurationClass){#>@Inject(<#=Model.ConfigurationClass#>) configuration: <#=Model.ConfigurationClass#>, <#}#>@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
<#if(Model.HasClientBaseClass){#>
        super(<#if(Model.HasConfigurationClass){#>configuration<#}#>);
<#}#>
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "<#=Model.BaseUrl#>"; 
    }
<#if(Model.HasExtensionClass && !Model.HasClientBaseClass){#>
<#  if(Model.UseTransformOptionsMethod){#>

    protected transformOptions(options: RequestOptionsArgs) {
        return Promise.resolve(options); 
    }
<#  }#>
<#  if(Model.UseTransformResultMethod){#>

    protected transformResult(url: string, response: Response, processor: (response: Response) => any) {
        return processor(response);
    }
<#  }#>
<#}#>
<#foreach(var operation in Model.Operations){#>

<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescription){#>     * @<#=parameter.VariableName#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>    <#=operation.ActualOperationName#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#>: <#=parameter.Type#><#if(!parameter.IsLast){#>, <#}#><#}#>): Observable<<#=operation.ResultType#>> {
        <#=TypeScriptTemplatePartGenerator.RenderRequestUrlCode(operation, 2)#>

        <#=TypeScriptTemplatePartGenerator.RenderRequestBodyCode(operation, 2)#>
        
        let options_ = {
            body: content_,
            method: "<#=operation.HttpMethodLower#>",
            headers: new Headers({
<#foreach(var parameter in operation.HeaderParameters){#>
                "<#=parameter.Name#>": <#=parameter.VariableName#>, 
<#}#>
<#if(operation.HasFormParameters){#>                'Content-Type': undefined, 
<#}else{#>
                "Content-Type": "<#=operation.Consumes#>; charset=UTF-8", 
                "Accept": "<#=operation.Produces#>; charset=UTF-8"
<#}#>
            })
        };

<#if(Model.UseTransformOptionsMethod){#>
        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
<#}else{#>
        return this.http.request(url_, options_).map((response) => {
<#}#>
<#if(Model.UseTransformResultMethod){#>
            return this.transformResult(url_, response, (response) => this.process<#=operation.ActualOperationNameUpper#>(response));
<#}else{#>
            return this.process<#=operation.ActualOperationNameUpper#>(response);
<#}#>
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
<#if(Model.UseTransformResultMethod){#>
                    return Observable.of(this.transformResult(url_, response, (response) => this.process<#=operation.ActualOperationNameUpper#>(response)));
<#}else{#>
                    return Observable.of(this.process<#=operation.ActualOperationNameUpper#>(response));
<#}#>
                } catch (e) {
                    return <Observable<<#=operation.ResultType#>>><any>Observable.throw(e);
                }
            } else
                return <Observable<<#=operation.ResultType#>>><any>Observable.throw(response);
        });
    }

    protected process<#=operation.ActualOperationNameUpper#>(response: Response): <#=operation.ResultType#> {
        const responseText = response.text();
        const status = response.status; 

        <#=TypeScriptTemplatePartGenerator.RenderProcessResponseCode(operation, 2)#>
    }
<#}#>

    <#=TypeScriptTemplatePartGenerator.RenderClientMethodsCode(Model, 1)#>
}
<#}#>