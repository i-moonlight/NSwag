//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v8.4.6213.42291 (NJsonSchema v7.2.6206.27034) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace PetStore
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "8.4.6213.42291")]
    public partial class PetStoreClient 
    {
        private string _baseUrl = "http://petstore.swagger.io/v2";
        
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        partial void PrepareRequest(System.Net.Http.HttpClient request, ref string url);
    
        partial void ProcessResponse(System.Net.Http.HttpClient request, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Add a new pet to the store</summary>
        /// <param name="body">Pet object that needs to be added to the store</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AddPetAsync(Pet body)
        {
            return AddPetAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Add a new pet to the store</summary>
        /// <param name="body">Pet object that needs to be added to the store</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AddPetAsync(Pet body, System.Threading.CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "pet");
    
            using (var client_ = new System.Net.Http.HttpClient())
            {
                var request_ = new System.Net.Http.HttpRequestMessage();
                PrepareRequest(client_, ref url_);
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
                ProcessResponse(client_, response_);
    
                var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
                var status_ = ((int)response_.StatusCode).ToString();
    
                if (status_ == "405") 
                {
                    throw new SwaggerException("Invalid input", status_, responseData_, null);
                }
                else
                if (status_ != "200" && status_ != "204")
                    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
            }
        }
    
        /// <summary>Update an existing pet</summary>
        /// <param name="body">Pet object that needs to be added to the store</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UpdatePetAsync(Pet body)
        {
            return UpdatePetAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update an existing pet</summary>
        /// <param name="body">Pet object that needs to be added to the store</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UpdatePetAsync(Pet body, System.Threading.CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "pet");
    
            using (var client_ = new System.Net.Http.HttpClient())
            {
                var request_ = new System.Net.Http.HttpRequestMessage();
                PrepareRequest(client_, ref url_);
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("PUT");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
                ProcessResponse(client_, response_);
    
                var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
                var status_ = ((int)response_.StatusCode).ToString();
    
                if (status_ == "400") 
                {
                    throw new SwaggerException("Invalid ID supplied", status_, responseData_, null);
                }
                else
                if (status_ == "404") 
                {
                    throw new SwaggerException("Pet not found", status_, responseData_, null);
                }
                else
                if (status_ == "405") 
                {
                    throw new SwaggerException("Validation exception", status_, responseData_, null);
                }
                else
                if (status_ != "200" && status_ != "204")
                    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
            }
        }
    
        /// <summary>Finds Pets by status</summary>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Pet>> FindPetsByStatusAsync(System.Collections.Generic.IEnumerable<Anonymous> status)
        {
            return FindPetsByStatusAsync(status, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Finds Pets by status</summary>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Pet>> FindPetsByStatusAsync(System.Collections.Generic.IEnumerable<Anonymous> status, System.Threading.CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "pet/findByStatus");
    
            if (status == null)
                throw new System.ArgumentNullException("status");
            else
                foreach(var item_ in status) { url_ += string.Format("status={0}&", System.Uri.EscapeDataString(item_.ToString())); }
    
            using (var client_ = new System.Net.Http.HttpClient())
            {
                var request_ = new System.Net.Http.HttpRequestMessage();
                PrepareRequest(client_, ref url_);
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
                ProcessResponse(client_, response_);
    
                var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
                var status_ = ((int)response_.StatusCode).ToString();
    
                if (status_ == "200") 
                {
                    var result_ = default(System.Collections.ObjectModel.ObservableCollection<Pet>); 
                    try
                    {
                        if (responseData_.Length > 0)
                            result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Pet>>(System.Text.Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                        return result_; 
                    } 
                    catch (System.Exception exception) 
                    {
                        throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                    }
                }
                else
                if (status_ == "400") 
                {
                    throw new SwaggerException("Invalid status value", status_, responseData_, null);
                }
                else
                if (status_ != "200" && status_ != "204")
                    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
            
                return default(System.Collections.ObjectModel.ObservableCollection<Pet>);
            }
        }
    
        /// <summary>Finds Pets by tags</summary>
        /// <param name="tags">Tags to filter by</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Pet>> FindPetsByTagsAsync(System.Collections.Generic.IEnumerable<string> tags)
        {
            return FindPetsByTagsAsync(tags, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Finds Pets by tags</summary>
        /// <param name="tags">Tags to filter by</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Pet>> FindPetsByTagsAsync(System.Collections.Generic.IEnumerable<string> tags, System.Threading.CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "pet/findByTags");
    
            if (tags == null)
                throw new System.ArgumentNullException("tags");
            else
                foreach(var item_ in tags) { url_ += string.Format("tags={0}&", System.Uri.EscapeDataString(item_.ToString())); }
    
            using (var client_ = new System.Net.Http.HttpClient())
            {
                var request_ = new System.Net.Http.HttpRequestMessage();
                PrepareRequest(client_, ref url_);
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
                ProcessResponse(client_, response_);
    
                var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
                var status_ = ((int)response_.StatusCode).ToString();
    
                if (status_ == "200") 
                {
                    var result_ = default(System.Collections.ObjectModel.ObservableCollection<Pet>); 
                    try
                    {
                        if (responseData_.Length > 0)
                            result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Pet>>(System.Text.Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                        return result_; 
                    } 
                    catch (System.Exception exception) 
                    {
                        throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                    }
                }
                else
                if (status_ == "400") 
                {
                    throw new SwaggerException("Invalid tag value", status_, responseData_, null);
                }
                else
                if (status_ != "200" && status_ != "204")
                    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
            
                return default(System.Collections.ObjectModel.ObservableCollection<Pet>);
            }
        }
    
        /// <summary>Find pet by ID</summary>
        /// <param name="petId">ID of pet to return</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Pet> GetPetByIdAsync(int petId)
        {
            return GetPetByIdAsync(petId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Find pet by ID</summary>
        /// <param name="petId">ID of pet to return</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Pet> GetPetByIdAsync(int petId, System.Threading.CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "pet/{petId}");
    
            if (petId == null)
                throw new System.ArgumentNullException("petId");
            url_ = url_.Replace("{petId}", System.Uri.EscapeDataString(petId.ToString()));
    
            using (var client_ = new System.Net.Http.HttpClient())
            {
                var request_ = new System.Net.Http.HttpRequestMessage();
                PrepareRequest(client_, ref url_);
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
                ProcessResponse(client_, response_);
    
                var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
                var status_ = ((int)response_.StatusCode).ToString();
    
                if (status_ == "200") 
                {
                    var result_ = default(Pet); 
                    try
                    {
                        if (responseData_.Length > 0)
                            result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pet>(System.Text.Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                        return result_; 
                    } 
                    catch (System.Exception exception) 
                    {
                        throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                    }
                }
                else
                if (status_ == "400") 
                {
                    throw new SwaggerException("Invalid ID supplied", status_, responseData_, null);
                }
                else
                if (status_ == "404") 
                {
                    throw new SwaggerException("Pet not found", status_, responseData_, null);
                }
                else
                if (status_ != "200" && status_ != "204")
                    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
            
                return default(Pet);
            }
        }
    
        /// <summary>Updates a pet in the store with form data</summary>
        /// <param name="petId">ID of pet that needs to be updated</param>
        /// <param name="name">Updated name of the pet</param>
        /// <param name="status">Updated status of the pet</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UpdatePetWithFormAsync(int petId, string name, string status)
        {
            return UpdatePetWithFormAsync(petId, name, status, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Updates a pet in the store with form data</summary>
        /// <param name="petId">ID of pet that needs to be updated</param>
        /// <param name="name">Updated name of the pet</param>
        /// <param name="status">Updated status of the pet</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UpdatePetWithFormAsync(int petId, string name, string status, System.Threading.CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "pet/{petId}");
    
            if (petId == null)
                throw new System.ArgumentNullException("petId");
            url_ = url_.Replace("{petId}", System.Uri.EscapeDataString(petId.ToString()));
    
            using (var client_ = new System.Net.Http.HttpClient())
            {
                var request_ = new System.Net.Http.HttpRequestMessage();
                PrepareRequest(client_, ref url_);
                var content_ = new System.Net.Http.MultipartFormDataContent();
                if (name != null)
                    content_.Add(new System.Net.Http.StringContent(name.ToString()), "name");
                if (status != null)
                    content_.Add(new System.Net.Http.StringContent(status.ToString()), "status");
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
                ProcessResponse(client_, response_);
    
                var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
                var status_ = ((int)response_.StatusCode).ToString();
    
                if (status_ == "405") 
                {
                    throw new SwaggerException("Invalid input", status_, responseData_, null);
                }
                else
                if (status_ != "200" && status_ != "204")
                    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
            }
        }
    
        /// <summary>Deletes a pet</summary>
        /// <param name="petId">Pet id to delete</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeletePetAsync(string api_key, int petId)
        {
            return DeletePetAsync(api_key, petId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Deletes a pet</summary>
        /// <param name="petId">Pet id to delete</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeletePetAsync(string api_key, int petId, System.Threading.CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "pet/{petId}");
    
            if (petId == null)
                throw new System.ArgumentNullException("petId");
            url_ = url_.Replace("{petId}", System.Uri.EscapeDataString(petId.ToString()));
    
            using (var client_ = new System.Net.Http.HttpClient())
            {
                var request_ = new System.Net.Http.HttpRequestMessage();
                PrepareRequest(client_, ref url_);
                request_.Headers.TryAddWithoutValidation("api_key", api_key);
                request_.Method = new System.Net.Http.HttpMethod("DELETE");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
                ProcessResponse(client_, response_);
    
                var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
                var status_ = ((int)response_.StatusCode).ToString();
    
                if (status_ == "400") 
                {
                    throw new SwaggerException("Invalid ID supplied", status_, responseData_, null);
                }
                else
                if (status_ == "404") 
                {
                    throw new SwaggerException("Pet not found", status_, responseData_, null);
                }
                else
                if (status_ != "200" && status_ != "204")
                    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
            }
        }
    
        /// <summary>uploads an image</summary>
        /// <param name="petId">ID of pet to update</param>
        /// <param name="additionalMetadata">Additional data to pass to server</param>
        /// <param name="file">file to upload</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiResponse> UploadFileAsync(int petId, string additionalMetadata, FileParameter file)
        {
            return UploadFileAsync(petId, additionalMetadata, file, System.Threading.CancellationToken.None);
        }
    
        /// <summary>uploads an image</summary>
        /// <param name="petId">ID of pet to update</param>
        /// <param name="additionalMetadata">Additional data to pass to server</param>
        /// <param name="file">file to upload</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiResponse> UploadFileAsync(int petId, string additionalMetadata, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "pet/{petId}/uploadImage");
    
            if (petId == null)
                throw new System.ArgumentNullException("petId");
            url_ = url_.Replace("{petId}", System.Uri.EscapeDataString(petId.ToString()));
    
            using (var client_ = new System.Net.Http.HttpClient())
            {
                var request_ = new System.Net.Http.HttpRequestMessage();
                PrepareRequest(client_, ref url_);
                var content_ = new System.Net.Http.MultipartFormDataContent();
                if (additionalMetadata != null)
                    content_.Add(new System.Net.Http.StringContent(additionalMetadata.ToString()), "additionalMetadata");
                if (file != null)
                    content_.Add(new System.Net.Http.StreamContent(file.Data), "file", file.FileName ?? "file");
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
                ProcessResponse(client_, response_);
    
                var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
                var status_ = ((int)response_.StatusCode).ToString();
    
                if (status_ == "200") 
                {
                    var result_ = default(ApiResponse); 
                    try
                    {
                        if (responseData_.Length > 0)
                            result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ApiResponse>(System.Text.Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                        return result_; 
                    } 
                    catch (System.Exception exception) 
                    {
                        throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                    }
                }
                else
                if (status_ != "200" && status_ != "204")
                    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
            
                return default(ApiResponse);
            }
        }
    
        /// <summary>Returns pet inventories by status</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> GetInventoryAsync()
        {
            return GetInventoryAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns pet inventories by status</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> GetInventoryAsync(System.Threading.CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "store/inventory");
    
            using (var client_ = new System.Net.Http.HttpClient())
            {
                var request_ = new System.Net.Http.HttpRequestMessage();
                PrepareRequest(client_, ref url_);
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
                ProcessResponse(client_, response_);
    
                var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
                var status_ = ((int)response_.StatusCode).ToString();
    
                if (status_ == "200") 
                {
                    var result_ = default(System.Collections.Generic.Dictionary<string, int>); 
                    try
                    {
                        if (responseData_.Length > 0)
                            result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, int>>(System.Text.Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                        return result_; 
                    } 
                    catch (System.Exception exception) 
                    {
                        throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                    }
                }
                else
                if (status_ != "200" && status_ != "204")
                    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
            
                return default(System.Collections.Generic.Dictionary<string, int>);
            }
        }
    
        /// <summary>Place an order for a pet</summary>
        /// <param name="body">order placed for purchasing the pet</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Order> PlaceOrderAsync(Order body)
        {
            return PlaceOrderAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Place an order for a pet</summary>
        /// <param name="body">order placed for purchasing the pet</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Order> PlaceOrderAsync(Order body, System.Threading.CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "store/order");
    
            using (var client_ = new System.Net.Http.HttpClient())
            {
                var request_ = new System.Net.Http.HttpRequestMessage();
                PrepareRequest(client_, ref url_);
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
                ProcessResponse(client_, response_);
    
                var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
                var status_ = ((int)response_.StatusCode).ToString();
    
                if (status_ == "200") 
                {
                    var result_ = default(Order); 
                    try
                    {
                        if (responseData_.Length > 0)
                            result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Order>(System.Text.Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                        return result_; 
                    } 
                    catch (System.Exception exception) 
                    {
                        throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                    }
                }
                else
                if (status_ == "400") 
                {
                    throw new SwaggerException("Invalid Order", status_, responseData_, null);
                }
                else
                if (status_ != "200" && status_ != "204")
                    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
            
                return default(Order);
            }
        }
    
        /// <summary>Find purchase order by ID</summary>
        /// <param name="orderId">ID of pet that needs to be fetched</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Order> GetOrderByIdAsync(int orderId)
        {
            return GetOrderByIdAsync(orderId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Find purchase order by ID</summary>
        /// <param name="orderId">ID of pet that needs to be fetched</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Order> GetOrderByIdAsync(int orderId, System.Threading.CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "store/order/{orderId}");
    
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");
            url_ = url_.Replace("{orderId}", System.Uri.EscapeDataString(orderId.ToString()));
    
            using (var client_ = new System.Net.Http.HttpClient())
            {
                var request_ = new System.Net.Http.HttpRequestMessage();
                PrepareRequest(client_, ref url_);
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
                ProcessResponse(client_, response_);
    
                var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
                var status_ = ((int)response_.StatusCode).ToString();
    
                if (status_ == "200") 
                {
                    var result_ = default(Order); 
                    try
                    {
                        if (responseData_.Length > 0)
                            result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Order>(System.Text.Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                        return result_; 
                    } 
                    catch (System.Exception exception) 
                    {
                        throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                    }
                }
                else
                if (status_ == "400") 
                {
                    throw new SwaggerException("Invalid ID supplied", status_, responseData_, null);
                }
                else
                if (status_ == "404") 
                {
                    throw new SwaggerException("Order not found", status_, responseData_, null);
                }
                else
                if (status_ != "200" && status_ != "204")
                    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
            
                return default(Order);
            }
        }
    
        /// <summary>Delete purchase order by ID</summary>
        /// <param name="orderId">ID of the order that needs to be deleted</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteOrderAsync(int orderId)
        {
            return DeleteOrderAsync(orderId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Delete purchase order by ID</summary>
        /// <param name="orderId">ID of the order that needs to be deleted</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteOrderAsync(int orderId, System.Threading.CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "store/order/{orderId}");
    
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");
            url_ = url_.Replace("{orderId}", System.Uri.EscapeDataString(orderId.ToString()));
    
            using (var client_ = new System.Net.Http.HttpClient())
            {
                var request_ = new System.Net.Http.HttpRequestMessage();
                PrepareRequest(client_, ref url_);
                request_.Method = new System.Net.Http.HttpMethod("DELETE");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
                ProcessResponse(client_, response_);
    
                var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
                var status_ = ((int)response_.StatusCode).ToString();
    
                if (status_ == "400") 
                {
                    throw new SwaggerException("Invalid ID supplied", status_, responseData_, null);
                }
                else
                if (status_ == "404") 
                {
                    throw new SwaggerException("Order not found", status_, responseData_, null);
                }
                else
                if (status_ != "200" && status_ != "204")
                    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
            }
        }
    
        /// <summary>Create user</summary>
        /// <param name="body">Created user object</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task CreateUserAsync(User body)
        {
            return CreateUserAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create user</summary>
        /// <param name="body">Created user object</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task CreateUserAsync(User body, System.Threading.CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "user");
    
            using (var client_ = new System.Net.Http.HttpClient())
            {
                var request_ = new System.Net.Http.HttpRequestMessage();
                PrepareRequest(client_, ref url_);
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
                ProcessResponse(client_, response_);
    
                var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
                var status_ = ((int)response_.StatusCode).ToString();
    
            }
        }
    
        /// <summary>Creates list of users with given input array</summary>
        /// <param name="body">List of user object</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task CreateUsersWithArrayInputAsync(System.Collections.Generic.IEnumerable<User> body)
        {
            return CreateUsersWithArrayInputAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Creates list of users with given input array</summary>
        /// <param name="body">List of user object</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task CreateUsersWithArrayInputAsync(System.Collections.Generic.IEnumerable<User> body, System.Threading.CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "user/createWithArray");
    
            using (var client_ = new System.Net.Http.HttpClient())
            {
                var request_ = new System.Net.Http.HttpRequestMessage();
                PrepareRequest(client_, ref url_);
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
                ProcessResponse(client_, response_);
    
                var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
                var status_ = ((int)response_.StatusCode).ToString();
    
            }
        }
    
        /// <summary>Creates list of users with given input array</summary>
        /// <param name="body">List of user object</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task CreateUsersWithListInputAsync(System.Collections.Generic.IEnumerable<User> body)
        {
            return CreateUsersWithListInputAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Creates list of users with given input array</summary>
        /// <param name="body">List of user object</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task CreateUsersWithListInputAsync(System.Collections.Generic.IEnumerable<User> body, System.Threading.CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "user/createWithList");
    
            using (var client_ = new System.Net.Http.HttpClient())
            {
                var request_ = new System.Net.Http.HttpRequestMessage();
                PrepareRequest(client_, ref url_);
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
                ProcessResponse(client_, response_);
    
                var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
                var status_ = ((int)response_.StatusCode).ToString();
    
            }
        }
    
        /// <summary>Logs user into the system</summary>
        /// <param name="username">The user name for login</param>
        /// <param name="password">The password for login in clear text</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> LoginUserAsync(string username, string password)
        {
            return LoginUserAsync(username, password, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Logs user into the system</summary>
        /// <param name="username">The user name for login</param>
        /// <param name="password">The password for login in clear text</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LoginUserAsync(string username, string password, System.Threading.CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "user/login");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
            else
                url_ += string.Format("username={0}&", System.Uri.EscapeDataString(username.ToString()));
    
            if (password == null)
                throw new System.ArgumentNullException("password");
            else
                url_ += string.Format("password={0}&", System.Uri.EscapeDataString(password.ToString()));
    
            using (var client_ = new System.Net.Http.HttpClient())
            {
                var request_ = new System.Net.Http.HttpRequestMessage();
                PrepareRequest(client_, ref url_);
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
                ProcessResponse(client_, response_);
    
                var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
                var status_ = ((int)response_.StatusCode).ToString();
    
                if (status_ == "200") 
                {
                    var result_ = default(string); 
                    try
                    {
                        if (responseData_.Length > 0)
                            result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<string>(System.Text.Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                        return result_; 
                    } 
                    catch (System.Exception exception) 
                    {
                        throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                    }
                }
                else
                if (status_ == "400") 
                {
                    throw new SwaggerException("Invalid username/password supplied", status_, responseData_, null);
                }
                else
                if (status_ != "200" && status_ != "204")
                    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
            
                return default(string);
            }
        }
    
        /// <summary>Logs out current logged in user session</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task LogoutUserAsync()
        {
            return LogoutUserAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Logs out current logged in user session</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task LogoutUserAsync(System.Threading.CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "user/logout");
    
            using (var client_ = new System.Net.Http.HttpClient())
            {
                var request_ = new System.Net.Http.HttpRequestMessage();
                PrepareRequest(client_, ref url_);
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
                ProcessResponse(client_, response_);
    
                var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
                var status_ = ((int)response_.StatusCode).ToString();
    
            }
        }
    
        /// <summary>Get user by user name</summary>
        /// <param name="username">The name that needs to be fetched. Use user1 for testing.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<User> GetUserByNameAsync(string username)
        {
            return GetUserByNameAsync(username, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get user by user name</summary>
        /// <param name="username">The name that needs to be fetched. Use user1 for testing.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<User> GetUserByNameAsync(string username, System.Threading.CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "user/{username}");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
            url_ = url_.Replace("{username}", System.Uri.EscapeDataString(username.ToString()));
    
            using (var client_ = new System.Net.Http.HttpClient())
            {
                var request_ = new System.Net.Http.HttpRequestMessage();
                PrepareRequest(client_, ref url_);
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
                ProcessResponse(client_, response_);
    
                var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
                var status_ = ((int)response_.StatusCode).ToString();
    
                if (status_ == "200") 
                {
                    var result_ = default(User); 
                    try
                    {
                        if (responseData_.Length > 0)
                            result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<User>(System.Text.Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                        return result_; 
                    } 
                    catch (System.Exception exception) 
                    {
                        throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                    }
                }
                else
                if (status_ == "400") 
                {
                    throw new SwaggerException("Invalid username supplied", status_, responseData_, null);
                }
                else
                if (status_ == "404") 
                {
                    throw new SwaggerException("User not found", status_, responseData_, null);
                }
                else
                if (status_ != "200" && status_ != "204")
                    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
            
                return default(User);
            }
        }
    
        /// <summary>Updated user</summary>
        /// <param name="username">name that need to be updated</param>
        /// <param name="body">Updated user object</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UpdateUserAsync(string username, User body)
        {
            return UpdateUserAsync(username, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Updated user</summary>
        /// <param name="username">name that need to be updated</param>
        /// <param name="body">Updated user object</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UpdateUserAsync(string username, User body, System.Threading.CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "user/{username}");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
            url_ = url_.Replace("{username}", System.Uri.EscapeDataString(username.ToString()));
    
            using (var client_ = new System.Net.Http.HttpClient())
            {
                var request_ = new System.Net.Http.HttpRequestMessage();
                PrepareRequest(client_, ref url_);
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("PUT");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
                ProcessResponse(client_, response_);
    
                var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
                var status_ = ((int)response_.StatusCode).ToString();
    
                if (status_ == "400") 
                {
                    throw new SwaggerException("Invalid user supplied", status_, responseData_, null);
                }
                else
                if (status_ == "404") 
                {
                    throw new SwaggerException("User not found", status_, responseData_, null);
                }
                else
                if (status_ != "200" && status_ != "204")
                    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
            }
        }
    
        /// <summary>Delete user</summary>
        /// <param name="username">The name that needs to be deleted</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteUserAsync(string username)
        {
            return DeleteUserAsync(username, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Delete user</summary>
        /// <param name="username">The name that needs to be deleted</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteUserAsync(string username, System.Threading.CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "user/{username}");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
            url_ = url_.Replace("{username}", System.Uri.EscapeDataString(username.ToString()));
    
            using (var client_ = new System.Net.Http.HttpClient())
            {
                var request_ = new System.Net.Http.HttpRequestMessage();
                PrepareRequest(client_, ref url_);
                request_.Method = new System.Net.Http.HttpMethod("DELETE");
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
                ProcessResponse(client_, response_);
    
                var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
                var status_ = ((int)response_.StatusCode).ToString();
    
                if (status_ == "400") 
                {
                    throw new SwaggerException("Invalid username supplied", status_, responseData_, null);
                }
                else
                if (status_ == "404") 
                {
                    throw new SwaggerException("User not found", status_, responseData_, null);
                }
                else
                if (status_ != "200" && status_ != "204")
                    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
            }
        }
    
    }
    
    

    [Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "7.2.6206.27034")]
    public partial class Order : System.ComponentModel.INotifyPropertyChanged
    { 
        private int? _id; 
        private int? _petId; 
        private int? _quantity; 
        private System.DateTime? _shipDate; 
        private OrderStatus? _status; 
        private bool? _complete = false;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        [Newtonsoft.Json.JsonProperty("petId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PetId
        {
            get { return _petId; }
            set 
            {
                if (_petId != value)
                {
                    _petId = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        [Newtonsoft.Json.JsonProperty("shipDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ShipDate
        {
            get { return _shipDate; }
            set 
            {
                if (_shipDate != value)
                {
                    _shipDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        /// <summary>Order Status</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        [Newtonsoft.Json.JsonProperty("complete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Complete
        {
            get { return _complete; }
            set 
            {
                if (_complete != value)
                {
                    _complete = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Order FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Order>(data);
        }
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "7.2.6206.27034")]
    public partial class Category : System.ComponentModel.INotifyPropertyChanged
    { 
        private int? _id; 
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Category FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Category>(data);
        }
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "7.2.6206.27034")]
    public partial class User : System.ComponentModel.INotifyPropertyChanged
    { 
        private int? _id; 
        private string _username; 
        private string _firstName; 
        private string _lastName; 
        private string _email; 
        private string _password; 
        private string _phone; 
        private int? _userStatus;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set 
            {
                if (_username != value)
                {
                    _username = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName
        {
            get { return _firstName; }
            set 
            {
                if (_firstName != value)
                {
                    _firstName = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName
        {
            get { return _lastName; }
            set 
            {
                if (_lastName != value)
                {
                    _lastName = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password
        {
            get { return _password; }
            set 
            {
                if (_password != value)
                {
                    _password = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone
        {
            get { return _phone; }
            set 
            {
                if (_phone != value)
                {
                    _phone = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        /// <summary>User Status</summary>
        [Newtonsoft.Json.JsonProperty("userStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UserStatus
        {
            get { return _userStatus; }
            set 
            {
                if (_userStatus != value)
                {
                    _userStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User>(data);
        }
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "7.2.6206.27034")]
    public partial class Tag : System.ComponentModel.INotifyPropertyChanged
    { 
        private int? _id; 
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tag FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tag>(data);
        }
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "7.2.6206.27034")]
    public partial class Pet : System.ComponentModel.INotifyPropertyChanged
    { 
        private int? _id; 
        private Category _category; 
        private string _name; 
        private System.Collections.ObjectModel.ObservableCollection<string> _photoUrls = new System.Collections.ObjectModel.ObservableCollection<string>(); 
        private System.Collections.ObjectModel.ObservableCollection<Tag> _tags; 
        private PetStatus? _status;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Category Category
        {
            get { return _category; }
            set 
            {
                if (_category != value)
                {
                    _category = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        [Newtonsoft.Json.JsonProperty("photoUrls", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<string> PhotoUrls
        {
            get { return _photoUrls; }
            set 
            {
                if (_photoUrls != value)
                {
                    _photoUrls = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Tag> Tags
        {
            get { return _tags; }
            set 
            {
                if (_tags != value)
                {
                    _tags = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        /// <summary>pet status in the store</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PetStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Pet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Pet>(data);
        }
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "7.2.6206.27034")]
    public partial class ApiResponse : System.ComponentModel.INotifyPropertyChanged
    { 
        private int? _code; 
        private string _type; 
        private string _message;
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code
        {
            get { return _code; }
            set 
            {
                if (_code != value)
                {
                    _code = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ApiResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApiResponse>(data);
        }
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "7.2.6206.27034")]
    public enum Anonymous
    {
        [System.Runtime.Serialization.EnumMember(Value = "available")]
        Available = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "pending")]
        Pending = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "sold")]
        Sold = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "7.2.6206.27034")]
    public enum OrderStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "placed")]
        Placed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "approved")]
        Approved = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "delivered")]
        Delivered = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "7.2.6206.27034")]
    public enum PetStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "available")]
        Available = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "pending")]
        Pending = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "sold")]
        Sold = 2,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "8.4.6213.42291")]
    public class FileParameter
    {
        public FileParameter(System.IO.Stream data) 
            : this (data, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
        {
            Data = data;
            FileName = fileName;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "8.4.6213.42291")]
    public class SwaggerException : System.Exception
    {
        public string StatusCode { get; private set; }

        public byte[] ResponseData { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            ResponseData = responseData;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: n{0}n{1}", System.Text.Encoding.UTF8.GetString(ResponseData, 0, ResponseData.Length), base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "8.4.6213.42291")]
    public class SwaggerException<TResponse> : SwaggerException
    {
        public TResponse Response { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, TResponse response, System.Exception innerException) 
            : base(message, statusCode, responseData, innerException)
        {
            Response = response;
        }
    }

}