//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v7.5.6171.32150 (NJsonSchema v5.19.6171.28316) (http://NSwag.org)
// </auto-generated>
//----------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;

namespace NSwag.Demo.Client
{
    #pragma warning disable // Disable all warnings

    [GeneratedCode("NSwag", "7.5.6171.32150")]
    public partial interface IDataService
    {
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        Task<string> XyzAsync(string data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        Task<string> XyzAsync(string data, CancellationToken cancellationToken);
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        [Obsolete]
        Task<ObservableCollection<Person>> GetAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        [Obsolete]
        Task<ObservableCollection<Person>> GetAllAsync(CancellationToken cancellationToken);
    
        /// <summary>Creates a new person.</summary>
        /// <param name="value">The person.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        Task PostAsync(Person value);
    
        /// <summary>Creates a new person.</summary>
        /// <param name="value">The person.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        Task PostAsync(Person value, CancellationToken cancellationToken);
    
        /// <summary>Updates the existing person.</summary>
        /// <param name="id">The ID.</param>
        /// <param name="value">The person.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        Task PutAsync(int id, Person value);
    
        /// <summary>Updates the existing person.</summary>
        /// <param name="id">The ID.</param>
        /// <param name="value">The person.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        Task PutAsync(int id, Person value, CancellationToken cancellationToken);
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        Task DeleteAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        Task DeleteAsync(int id, CancellationToken cancellationToken);
    
        /// <summary>Gets a person.</summary>
        /// <param name="id">The ID of 
        /// the person.</param>
        /// <returns>The person.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        Task<Person> GetAsync(int id);
    
        /// <summary>Gets a person.</summary>
        /// <param name="id">The ID of 
        /// the person.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>The person.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        Task<Person> GetAsync(int id, CancellationToken cancellationToken);
    
        /// <summary>Calculates the sum of a, b and c.</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        Task<int> CalculateAsync(int a, int b, int c);
    
        /// <summary>Calculates the sum of a, b and c.</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        Task<int> CalculateAsync(int a, int b, int c, CancellationToken cancellationToken);
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        Task<DateTime> AddHourAsync(DateTime time);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        Task<DateTime> AddHourAsync(DateTime time, CancellationToken cancellationToken);
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        Task<int> TestAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        Task<int> TestAsync(CancellationToken cancellationToken);
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        Task<Car> LoadComplexObjectAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        Task<Car> LoadComplexObjectAsync(CancellationToken cancellationToken);
    
    }
    
    [GeneratedCode("NSwag", "7.5.6171.32150")]
    public partial class DataService : IDataService
    {
        private string _baseUrl = "";
        
        public DataService(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<string> XyzAsync(string data)
        {
            return XyzAsync(data, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<string> XyzAsync(string data, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Person/xyz/{data}");
    
            if (data == null)
                throw new ArgumentNullException("data");
            url_ = url_.Replace("{data}", Uri.EscapeDataString(data.ToString()));
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(string); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<string>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length), new JsonConverter[] { new JsonExceptionConverter() });                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        [Obsolete]
        public Task<ObservableCollection<Person>> GetAllAsync()
        {
            return GetAllAsync(CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        [Obsolete]
        public async Task<ObservableCollection<Person>> GetAllAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Person");
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(ObservableCollection<Person>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<ObservableCollection<Person>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length), new JsonConverter[] { new JsonExceptionConverter() });                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Creates a new person.</summary>
        /// <param name="value">The person.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task PostAsync(Person value)
        {
            return PostAsync(value, CancellationToken.None);
        }
    
        /// <summary>Creates a new person.</summary>
        /// <param name="value">The person.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task PostAsync(Person value, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Person");
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(value, new JsonConverter[] { new JsonExceptionConverter() }));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "204") 
            {
                return;     
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Updates the existing person.</summary>
        /// <param name="id">The ID.</param>
        /// <param name="value">The person.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task PutAsync(int id, Person value)
        {
            return PutAsync(id, value, CancellationToken.None);
        }
    
        /// <summary>Updates the existing person.</summary>
        /// <param name="id">The ID.</param>
        /// <param name="value">The person.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task PutAsync(int id, Person value, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Person");
    
            if (id == null)
                throw new ArgumentNullException("id");
            else
                url_ += string.Format("id={0}&", Uri.EscapeDataString(id.ToString()));
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(value, new JsonConverter[] { new JsonExceptionConverter() }));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "204") 
            {
                return;     
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task DeleteAsync(int id)
        {
            return DeleteAsync(id, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task DeleteAsync(int id, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Person");
    
            if (id == null)
                throw new ArgumentNullException("id");
            else
                url_ += string.Format("id={0}&", Uri.EscapeDataString(id.ToString()));
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "204") 
            {
                return;     
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Gets a person.</summary>
        /// <param name="id">The ID of 
        /// the person.</param>
        /// <returns>The person.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Person> GetAsync(int id)
        {
            return GetAsync(id, CancellationToken.None);
        }
    
        /// <summary>Gets a person.</summary>
        /// <param name="id">The ID of 
        /// the person.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>The person.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Person> GetAsync(int id, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Persons/Get/{id}");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{id}", Uri.EscapeDataString(id.ToString()));
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(Person); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Person>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length), new JsonConverter[] { new JsonExceptionConverter() });                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ == "500") 
            {
                var result_ = default(PersonNotFoundException); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<PersonNotFoundException>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length), new JsonConverter[] { new JsonExceptionConverter() });                                
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
                if (result_ == null)
                    result_ = new PersonNotFoundException();
                result_.Data.Add("HttpStatus", status_);
                result_.Data.Add("ResponseData", Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                throw new SwaggerException<PersonNotFoundException>("A server side error occurred.", status_, responseData_, result_, result_);
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Calculates the sum of a, b and c.</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<int> CalculateAsync(int a, int b, int c)
        {
            return CalculateAsync(a, b, c, CancellationToken.None);
        }
    
        /// <summary>Calculates the sum of a, b and c.</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<int> CalculateAsync(int a, int b, int c, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Person/Calculate/{a}/{b}");
    
            if (a == null)
                throw new ArgumentNullException("a");
            url_ = url_.Replace("{a}", Uri.EscapeDataString(a.ToString()));
    
            if (b == null)
                throw new ArgumentNullException("b");
            url_ = url_.Replace("{b}", Uri.EscapeDataString(b.ToString()));
    
            if (c == null)
                throw new ArgumentNullException("c");
            else
                url_ += string.Format("c={0}&", Uri.EscapeDataString(c.ToString()));
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(int); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<int>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length), new JsonConverter[] { new JsonExceptionConverter() });                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<DateTime> AddHourAsync(DateTime time)
        {
            return AddHourAsync(time, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<DateTime> AddHourAsync(DateTime time, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Persons/AddHour");
    
            if (time == null)
                throw new ArgumentNullException("time");
            else
                url_ += string.Format("time={0}&", Uri.EscapeDataString(time.ToString("s", CultureInfo.InvariantCulture)));
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(DateTime); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<DateTime>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length), new JsonConverter[] { new JsonExceptionConverter() });                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<int> TestAsync()
        {
            return TestAsync(CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<int> TestAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Persons/TestAsync");
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(int); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<int>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length), new JsonConverter[] { new JsonExceptionConverter() });                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Car> LoadComplexObjectAsync()
        {
            return LoadComplexObjectAsync(CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Car> LoadComplexObjectAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Persons/LoadComplexObject2");
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(Car); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Car>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length), new JsonConverter[] { new JsonExceptionConverter() });                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    

    /// <summary>The DTO class 
    /// for a person.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "5.19.6171.28316")]
    public partial class Person : INotifyPropertyChanged
    { 
        private string _firstName = "Rico"; 
        private string _lastName; 
        private DateTime _birthday; 
        private decimal _height; 
        private ObservableCollection<Car> _cars; 
        private ObjectType _type;
    
        /// <summary>Gets or sets the first name.</summary>
        [JsonProperty("firstName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FirstName
        {
            get { return _firstName; }
            set 
            {
                if (_firstName != value)
                {
                    _firstName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("LastName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LastName
        {
            get { return _lastName; }
            set 
            {
                if (_lastName != value)
                {
                    _lastName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Birthday", Required = Required.Always)]
        [Required]
        public DateTime Birthday
        {
            get { return _birthday; }
            set 
            {
                if (_birthday != value)
                {
                    _birthday = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets 
        /// the height in cm.</summary>
        [JsonProperty("Height", Required = Required.Always)]
        public decimal Height
        {
            get { return _height; }
            set 
            {
                if (_height != value)
                {
                    _height = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Cars", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Car> Cars
        {
            get { return _cars; }
            set 
            {
                if (_cars != value)
                {
                    _cars = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Type", Required = Required.Always)]
        [Required]
        [JsonConverter(typeof(StringEnumConverter))]
        public ObjectType Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Person FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Person>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "5.19.6171.28316")]
    public partial class Car : INotifyPropertyChanged
    { 
        private string _name; 
        private Person _driver = new Person(); 
        private ObjectType _type;
    
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Driver", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Person Driver
        {
            get { return _driver; }
            set 
            {
                if (_driver != value)
                {
                    _driver = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Type", Required = Required.Always)]
        [Required]
        [JsonConverter(typeof(StringEnumConverter))]
        public ObjectType Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Car FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Car>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Foo
    /// bar</summary>
    [GeneratedCode("NJsonSchema", "5.19.6171.28316")]
    public enum ObjectType
    {
        [EnumMember(Value = "Foo")]
        Foo = 0,
    
        [EnumMember(Value = "Bar")]
        Bar = 1,
    
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "5.19.6171.28316")]
    public partial class PersonNotFoundException : Exception, INotifyPropertyChanged
    { 
        private int _personId;
    
        [JsonProperty("PersonId", Required = Required.Always)]
        public int PersonId
        {
            get { return _personId; }
            set 
            {
                if (_personId != value)
                {
                    _personId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static PersonNotFoundException FromJson(string data)
        {
            return JsonConvert.DeserializeObject<PersonNotFoundException>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [GeneratedCode("NSwag", "7.5.6171.32150")]
    public class SwaggerException : Exception
    {
        public string StatusCode { get; private set; }

        public byte[] ResponseData { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            ResponseData = responseData;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: n{0}n{1}", Encoding.UTF8.GetString(ResponseData, 0, ResponseData.Length), base.ToString());
        }
    }

    [GeneratedCode("NSwag", "7.5.6171.32150")]
    public class SwaggerException<TResponse> : SwaggerException
    {
        public TResponse Response { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, TResponse response, Exception innerException) 
            : base(message, statusCode, responseData, innerException)
        {
            Response = response;
        }
    }

    [GeneratedCode("NSwag", "7.5.6171.32150")]
    internal class JsonExceptionConverter : JsonConverter
    {
        private readonly DefaultContractResolver _defaultContractResolver = new DefaultContractResolver();
        private readonly IDictionary<string, Assembly> _searchedNamespaces;
        private readonly bool _hideStackTrace = false;
    
        public JsonExceptionConverter()
        {
            _searchedNamespaces = new Dictionary<string, Assembly> { { typeof(PersonNotFoundException).Namespace, typeof(PersonNotFoundException).GetTypeInfo().Assembly } };
        }
    
        public override bool CanWrite => true;
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            var exception = value as Exception;
            if (exception != null)
            {
                var resolver = serializer.ContractResolver as DefaultContractResolver ?? _defaultContractResolver;
    
                var jObject = new JObject();
                jObject.Add(resolver.GetResolvedPropertyName("discriminator"), exception.GetType().Name);
                jObject.Add(resolver.GetResolvedPropertyName("Message"), exception.Message);
                jObject.Add(resolver.GetResolvedPropertyName("StackTrace"), _hideStackTrace ? "HIDDEN" : exception.StackTrace);
                jObject.Add(resolver.GetResolvedPropertyName("Source"), exception.Source);
                jObject.Add(resolver.GetResolvedPropertyName("InnerException"),
                    exception.InnerException != null ? JToken.FromObject(exception.InnerException, serializer) : null);
    
                foreach (var property in GetExceptionProperties(value.GetType()))
                {
                    var propertyValue = property.Key.GetValue(exception);
                    if (propertyValue != null)
                    {
                        jObject.AddFirst(new JProperty(resolver.GetResolvedPropertyName(property.Value),
                            JToken.FromObject(propertyValue, serializer)));
                    }
                }
    
                value = jObject;
            }
    
            serializer.Serialize(writer, value);
        }
    
        public override bool CanConvert(Type objectType)
        {
            return typeof(Exception).GetTypeInfo().IsAssignableFrom(objectType.GetTypeInfo());
        }
    
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<JObject>(reader);
            if (jObject == null)
                return null;
    
            var newSerializer = new JsonSerializer();
            newSerializer.ContractResolver = (IContractResolver)Activator.CreateInstance(serializer.ContractResolver.GetType());
    
            GetField(typeof(DefaultContractResolver), "_sharedCache").SetValue(newSerializer.ContractResolver, false);
    
            dynamic resolver = newSerializer.ContractResolver;
            if (newSerializer.ContractResolver.GetType().GetRuntimeProperty("IgnoreSerializableAttribute") != null)
                resolver.IgnoreSerializableAttribute = true;
            if (newSerializer.ContractResolver.GetType().GetRuntimeProperty("IgnoreSerializableInterface") != null)
                resolver.IgnoreSerializableInterface = true;
    
            JToken token;
            if (jObject.TryGetValue("discriminator", StringComparison.OrdinalIgnoreCase, out token))
            {
                var discriminator = token.Value<string>();
                if (objectType.Name.Equals(discriminator) == false)
                {
                    var exceptionType = Type.GetType("System." + discriminator, false);
                    if (exceptionType != null)
                        objectType = exceptionType;
                    else
                    {
                        foreach (var pair in _searchedNamespaces)
                        {
                            exceptionType = pair.Value.GetType(pair.Key + "." + discriminator);
                            if (exceptionType != null)
                            {
                                objectType = exceptionType;
                                break;
                            }
                        }
    
                    }
                }
            }
    
            var value = jObject.ToObject(objectType, newSerializer);
            foreach (var property in GetExceptionProperties(value.GetType()))
            {
                var jValue = jObject.GetValue(resolver.GetResolvedPropertyName(property.Value));
                var propertyValue = (object)jValue?.ToObject(property.Key.PropertyType);
                if (property.Key.SetMethod != null)
                    property.Key.SetValue(value, propertyValue);
                else
                {
                    var field = GetField(objectType, "m_" + property.Value.Substring(0, 1).ToLowerInvariant() + property.Value.Substring(1));
                    if (field != null)
                        field.SetValue(value, propertyValue);
                }
            }
    
            SetExceptionFieldValue(jObject, "Message", value, "_message", resolver, newSerializer);
            SetExceptionFieldValue(jObject, "StackTrace", value, "_stackTraceString", resolver, newSerializer);
            SetExceptionFieldValue(jObject, "Source", value, "_source", resolver, newSerializer);
            SetExceptionFieldValue(jObject, "InnerException", value, "_innerException", resolver, serializer);
    
            return value;
        }
    
        private FieldInfo GetField(Type type, string fieldName)
        {
            var field = type.GetTypeInfo().GetDeclaredField(fieldName);
            if (field == null && type.GetTypeInfo().BaseType != null)
                return GetField(type.GetTypeInfo().BaseType, fieldName);
            return field;
        }
    
        private IDictionary<PropertyInfo, string> GetExceptionProperties(Type exceptionType)
        {
            var result = new Dictionary<PropertyInfo, string>();
            foreach (var property in exceptionType.GetRuntimeProperties().Where(p => p.GetMethod?.IsPublic == true))
            {
                var attribute = property.GetCustomAttribute<JsonPropertyAttribute>();
                var propertyName = attribute != null ? attribute.PropertyName : property.Name;
    
                if (!new[] { "Message", "StackTrace", "Source", "InnerException", "Data", "TargetSite", "HelpLink", "HResult" }.Contains(propertyName))
                    result[property] = propertyName;
            }
            return result;
        }
    
        private void SetExceptionFieldValue(JObject jObject, string propertyName, object value, string fieldName, IContractResolver resolver, JsonSerializer serializer)
        {
            var field = typeof(Exception).GetTypeInfo().GetDeclaredField(fieldName);
            var jsonPropertyName = resolver is DefaultContractResolver ? ((DefaultContractResolver)resolver).GetResolvedPropertyName(propertyName) : propertyName;
            if (jObject[jsonPropertyName] != null)
            {
                var fieldValue = jObject[jsonPropertyName].ToObject(field.FieldType, serializer);
                field.SetValue(value, fieldValue);
            }
        }
    }
}