<#@ template visibility="internal" #>
<#@ import namespace="NJsonSchema" #>
<#@ import namespace="CodeGeneration.TypeScript" #>

<#if(Model.HasOperations){#>
<#if(Model.GenerateClientInterfaces){#>
export interface I<#=Model.Class#> {
<#foreach(var operation in Model.Operations){#>
<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescriptionOrIsOptional){#>     * @<#=parameter.VariableName#><#if(parameter.IsOptional){#> (optional)<#}#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>    <#=operation.MethodAccessModifier#><#=operation.ActualOperationName#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#><#if(Model.GenerateOptionalParameters && parameter.IsOptional){#>?<#}#>: <#=parameter.Type#><#=parameter.TypePostfix#><#if(!parameter.IsLast){#>, <#}#><#}#>): <#=Model.PromiseType#><<#=operation.ResultType#>>;
<#}#>}
<#}#>

export class <#=Model.Class#> <#if(Model.HasClientBaseClass){#>extends <#=Model.ClientBaseClass#> <#}#><#if(Model.GenerateClientInterfaces){#>implements I<#=Model.Class#> <#}#>{
    baseUrl: string; 
    beforeSend: any = undefined; 
    protected jsonParseReviver: <#if(Model.SupportsStrictNullChecks){#>((key: string, value: any) => any) | undefined<#}else{#>(key: string, value: any) => any<#}#> = undefined;

<#if(!Model.HasExtendedConstructor){#>
    constructor(<#if(Model.HasConfigurationClass){#>configuration: <#=Model.ConfigurationClass#>, <#}#>baseUrl?: string) {
<#if(Model.HasClientBaseClass){#>
        super(<#if(Model.HasConfigurationClass){#>configuration<#}#>);
<#}#>
        this.baseUrl = baseUrl ? baseUrl : "<#=Model.BaseUrl#>"; 
    }
<#}#>
<#if(Model.HasExtensionCode){#>
    <#=Model.ExtensionCode#>
    
<#}#>
<#foreach(var operation in Model.Operations){#>

<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescriptionOrIsOptional){#>     * @<#=parameter.VariableName#><#if(parameter.IsOptional){#> (optional)<#}#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>
    <#=operation.MethodAccessModifier#><#=operation.ActualOperationName#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#><#if(Model.GenerateOptionalParameters && parameter.IsOptional){#>?<#}#>: <#=parameter.Type#><#=parameter.TypePostfix#><#if(!parameter.IsLast){#>, <#}#><#}#>) {
        return <#=Model.PromiseConstructor#><<#=operation.ResultType#>>((resolve, reject) => {
            this.<#=operation.ActualOperationName#>WithCallbacks(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#>, <#}#>(result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private <#=operation.ActualOperationName#>WithCallbacks(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#>: <#=parameter.Type#><#=parameter.TypePostfix#>, <#}#>onSuccess?: (result: <#=operation.ResultType#>) => void, onFail?: (exception: <#=operation.ExceptionType#>, reason: string) => void) {
        <#=TypeScriptTemplatePartGenerator.RenderRequestUrlCode(operation, 2)#>

<#  if(operation.HasBody){#>
        <#=TypeScriptTemplatePartGenerator.RenderRequestBodyCode(operation, 2)#>

<#  }#>
        jQuery.ajax(<#if(Model.UseTransformOptionsMethod){#>this.transformOptions(<#}#>{
            url: url_,
            beforeSend: this.beforeSend,
            type: "<#=operation.HttpMethodLower#>",
<#  if(operation.HasBody){#>
            data: content_,
<#  }#>
<#  if(operation.HasFormParameters){#>
            mimeType: "multipart/form-data",
            contentType: false,
<#  }else{#>
            dataType: "text",
<#  }#>
            headers: {
<#foreach(var parameter in operation.HeaderParameters){#>
                "<#=parameter.Name#>": <#=parameter.VariableName#>, 
<#}#>
                "Content-Type": "<#=operation.Consumes#>",
<#if(operation.HasResultType && !operation.HasAcceptHeaderParameterParameter){#>
                "Accept": "<#=operation.Produces#>"
<#}#>
            }
        }<#if(Model.UseTransformOptionsMethod){#>)<#}#>).done((_data, _textStatus, xhr) => {
            this.process<#=operation.ActualOperationNameUpper#>WithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.process<#=operation.ActualOperationNameUpper#>WithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private process<#=operation.ActualOperationNameUpper#>WithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
<#if(Model.UseTransformResultMethod){#>
            let result = this.transformResult(_url, xhr, (xhr) => this.process<#=operation.ActualOperationNameUpper#>(xhr));
<#}else{#>
            let result = this.process<#=operation.ActualOperationNameUpper#>(xhr);
<#}#>
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected process<#=operation.ActualOperationNameUpper#>(xhr: any): <#=operation.ResultType#><#if(Model.SupportsStrictNullChecks){#> | null<#}#> {
        const status = xhr.status; 

        <#=TypeScriptTemplatePartGenerator.RenderProcessResponseCode(operation, 2)#>
    }
<#}#>
}
<#}#>