<#@ template visibility="internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="NJsonSchema.CodeGeneration" #>
<#if(Model.HasOperations){#>
<#if(Model.GenerateClientInterfaces){#>
public partial interface I<#=Model.Class#>
{
<#foreach(var operation in Model.Operations){#>
<#  if(operation.HasSummary){#>    /// <summary><#=operation.Summary#></summary>
<#  }foreach (var parameter in operation.Parameters){#>
<#      if(parameter.HasDescription){#>    /// <param name="<#=parameter.VariableNameLower#>"><#=parameter.Description#></param>
<#  }}if(operation.HasResultDescription){#>    /// <returns><#=operation.ResultDescription#></returns>
<#  }#>    /// <exception cref="<#=Model.Class#>.SwaggerException">A server side error occurred.</exception>
<#  if(operation.IsDeprecated){#>    [Obsolete]
<#  }#>    <#=operation.ResultType#> <#=operation.OperationNameUpper#>Async(<#foreach(var parameter in operation.Parameters){#><#=parameter.Type#> <#=parameter.VariableNameLower#><#if(!parameter.IsLast){#>, <#}}#>);

<#  if(operation.HasSummary){#>    /// <summary><#=operation.Summary#></summary>
<#  }foreach (var parameter in operation.Parameters){#>
<#      if(parameter.HasDescription){#>    /// <param name="<#=parameter.VariableNameLower#>"><#=parameter.Description#></param>
<#  }}#>    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
<#  if(operation.HasResultDescription){#>    /// <returns><#=operation.ResultDescription#></returns>
<#  }#>    /// <exception cref="<#=Model.Class#>.SwaggerException">A server side error occurred.</exception>
<#  if(operation.IsDeprecated){#>    [Obsolete]
<#  }#>    <#=operation.ResultType#> <#=operation.OperationNameUpper#>Async(<#foreach(var parameter in operation.Parameters){#><#=parameter.Type#> <#=parameter.VariableNameLower#>, <#}#>CancellationToken cancellationToken);

<#}#>
}
<#}#>

public partial class <#=Model.Class#> <#if(Model.HasBaseType){#>: <#}#><#if(Model.HasBaseClass){#><#=Model.BaseClass#><#if(Model.GenerateClientInterfaces){#>, <#}#><#}#><#if(Model.GenerateClientInterfaces){#>I<#=Model.Class#><#}#>
{
    public <#=Model.Class#>() : this("<#=Model.BaseUrl#>") { }

    public <#=Model.Class#>(string baseUrl)
    {
        BaseUrl = baseUrl; 
    }

    partial void PrepareRequest(HttpClient request, ref string url);

    partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

    public string BaseUrl { get; set; }

<#foreach(var operation in Model.Operations){#>
<#  if(operation.HasSummary){#>    /// <summary><#=operation.Summary#></summary>
<#  }foreach (var parameter in operation.Parameters){#>
<#      if(parameter.HasDescription){#>    /// <param name="<#=parameter.VariableNameLower#>"><#=parameter.Description#></param>
<#  }}if(operation.HasResultDescription){#>    /// <returns><#=operation.ResultDescription#></returns>
<#  }#>    /// <exception cref="<#=Model.Class#>.SwaggerException">A server side error occurred.</exception>
<#  if(operation.IsDeprecated){#>    [Obsolete]
<#  }#>    public <#=operation.ResultType#> <#=operation.OperationNameUpper#>Async(<#foreach(var parameter in operation.Parameters){#><#=parameter.Type#> <#=parameter.VariableNameLower#><#if(!parameter.IsLast){#>, <#}}#>)
    {
        return <#=operation.OperationNameUpper#>Async(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableNameLower#>, <#}#>CancellationToken.None);
    }

<#  if(operation.HasSummary){#>    /// <summary><#=operation.Summary#></summary>
<#  }foreach (var parameter in operation.Parameters){#>
<#      if(parameter.HasDescription){#>    /// <param name="<#=parameter.VariableNameLower#>"><#=parameter.Description#></param>
<#  }}#>    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
<#  if(operation.HasResultDescription){#>    /// <returns><#=operation.ResultDescription#></returns>
<#  }#>    /// <exception cref="<#=Model.Class#>.SwaggerException">A server side error occurred.</exception>
<#  if(operation.IsDeprecated){#>    [Obsolete]
<#  }#>    public async <#=operation.ResultType#> <#=operation.OperationNameUpper#>Async(<#foreach(var parameter in operation.Parameters){#><#=parameter.Type#> <#=parameter.VariableNameLower#>, <#}#>CancellationToken cancellationToken)
    {
        var url_ = string.Format("{0}/{1}?", BaseUrl, "<#=operation.Path#>");

<#foreach(var parameter in operation.PathParameters){#>
        if (<#=parameter.VariableNameLower#> == null)
            throw new ArgumentNullException("<#=parameter.VariableNameLower#>");

        url_ = url_.Replace("{<#=parameter.Name#>}", Uri.EscapeUriString(<#=parameter.VariableNameLower#>.ToString()));
<#}#>

<#foreach(var parameter in operation.QueryParameters){#>
<#  if(parameter.IsOptional){#>
        if (<#=parameter.VariableNameLower#> != null)
<#  }else{#>
        if (<#=parameter.VariableNameLower#> == null)
            throw new ArgumentNullException("<#=parameter.VariableNameLower#>");
        else
<#  }#>
<#  if(parameter.IsDateArray){#>
            foreach(var item_ in <#=parameter.VariableNameLower#>) { url_ += string.Format("<#=parameter.Name#>={0}&", Uri.EscapeUriString(item_.ToString("s", CultureInfo.InvariantCulture))); }
<#  }else if(parameter.IsDate){#>
            url_ += string.Format("<#=parameter.Name#>={0}&", Uri.EscapeUriString(<#=parameter.VariableNameLower#>.ToString("s", CultureInfo.InvariantCulture)));
<#  }else if(parameter.IsArray){#>
            foreach(var item_ in <#=parameter.VariableNameLower#>) { url_ += string.Format("<#=parameter.Name#>={0}&", Uri.EscapeUriString(item_.ToString())); }
<#  }else{#>
            url_ += string.Format("<#=parameter.Name#>={0}&", Uri.EscapeUriString(<#=parameter.VariableNameLower#>.ToString()));
<#  }
}#>
<#      if(Model.UseHttpClientCreationMethod){#>
        var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);<#}else{#>        var client_ = new HttpClient();
<#      }#>
        PrepareRequest(client_, ref url_);

<#foreach(var parameter in operation.HeaderParameters){#>
        client_.DefaultRequestHeaders.TryAddWithoutValidation("<#=parameter.Name#>", <#=parameter.VariableNameLower#>);
<#}#>

<#if(operation.HasContent){#>
        var content_ = new StringContent(JsonConvert.SerializeObject(<#=operation.ContentParameter.VariableNameLower#>));
        content_.Headers.ContentType.MediaType = "application/json";

        var response_ = await client_.<#=operation.HttpMethodUpper#>Async(url_, content_, cancellationToken).ConfigureAwait(false);
        ProcessResponse(client_, response_);
<#}else{#>
<#  if(operation.IsGetOrDelete){#>
        var response_ = await client_.<#=operation.HttpMethodUpper#>Async(url_, cancellationToken).ConfigureAwait(false);
<#  }else{#>
<#  if(operation.HasFormParameters){#>
        var content_ = new MultipartFormDataContent();
<#foreach(var parameter in operation.FormParameters){#>
<#  if(parameter.IsOptional){#>
        if (<#=parameter.VariableNameLower#> != null)
<#  }else{#>
        if (<#=parameter.VariableNameLower#> == null)
            throw new ArgumentNullException("<#=parameter.VariableNameLower#>");
        else
<#  }#>
            content_.Add(new StringContent(<#=parameter.VariableNameLower#>.ToString()), "<#=parameter.Name#>");
<#}#>
<#  }else{#>
        var content_ = new StringContent(string.Empty);
<#  }#>
        var response_ = await client_.<#=operation.HttpMethodUpper#>Async(url_, content_, cancellationToken).ConfigureAwait(false);
<#  }#>
        ProcessResponse(client_, response_);
<#}#>

        var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
        var status_ = ((int)response_.StatusCode).ToString();

<#foreach(var response in operation.Responses){#>
        if (status_ == "<#=response.StatusCode#>") 
        {
<#if(response.HasType){#>
<#  if(response.IsFile){#>
<#      if(response.IsSuccess){#>
            return responseData_; 
<#      }else{#>
            throw new SwaggerException<byte[]>("A server side error occurred.", response_.StatusCode, responseData_, responseData_, null);
<#      }#>
<#  }else{#>
            var result_ = default(<#=response.Type#>); 
            try
            {
                if (responseData_.Length > 0)
                    result_ = JsonConvert.DeserializeObject<<#=response.Type#>>(Encoding.UTF8.GetString(responseData_));                                
<#      if(response.IsSuccess){#>
                return result_; 
            } 
            catch (Exception exception) 
            {
                throw new SwaggerException("Could not deserialize the response body.", response_.StatusCode, responseData_, exception);
            }
<#      }else{#>
            } 
            catch (Exception exception) 
            {
                throw new SwaggerException("Could not deserialize the response body.", response_.StatusCode, responseData_, exception);
            }

            throw new SwaggerException<<#=response.Type#>>("A server side error occurred.", response_.StatusCode, responseData_, result_, null);
<#      }#>
<#  }#>
<#}else{#>
<#  if(operation.HasResultType){#>
            return default(<#=operation.ResultType#>);
<#  }else{#>
            return;     
<#  }#> 
<#}#>
        }
        else<#}#>

        {
<#if(operation.HasDefaultResponse){#>
            var result_ = default(<#=operation.DefaultResponse.Type#>); 
            try
            {
                if (responseData_.Length > 0)
                    result_ = JsonConvert.DeserializeObject<<#=operation.DefaultResponse.Type#>>(Encoding.UTF8.GetString(responseData_));

<#  if(operation.HasOnlyDefaultResponse){#>
                if (status_.Length == 3 && status_.StartsWith("2"))
                    return result_;
<#  }#>
            } 
            catch (Exception exception_) 
            {
                throw new SwaggerException("Could not deserialize the response body.", response_.StatusCode, responseData_, exception_);
            }

            throw new SwaggerException<<#=operation.DefaultResponse.Type#>>("A server side error occurred.", response_.StatusCode, responseData_, result_, null);
<#}#>
        }

        throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", response_.StatusCode, responseData_, null);
    }

<#}#>

    public class SwaggerException : Exception
    {
        public HttpStatusCode StatusCode { get; private set; }

        public byte[] ResponseData { get; private set; }

        public SwaggerException(string message, HttpStatusCode statusCode, byte[] responseData, Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            ResponseData = responseData;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: n{0}n{1}", Encoding.UTF8.GetString(ResponseData), base.ToString());
        }
    }

    public class SwaggerException<TResponse> : SwaggerException
    {
        public TResponse Response { get; private set; }

        public SwaggerException(string message, HttpStatusCode statusCode, byte[] responseData, TResponse response, Exception innerException) 
            : base(message, statusCode, responseData, innerException)
        {
            Response = response;
        }
    }
}
<#}#>

