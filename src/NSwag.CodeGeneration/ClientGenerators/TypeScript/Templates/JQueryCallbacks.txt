<if(hasOperations)>
<if(generateClientInterfaces)>
export interface I<class> {
<operations:{operation | 
<if(operation.HasDocumentation)>    /**
<if(operation.HasSummary)>     * <operation.Summary><endif>
<operation.Parameters:{parameter | 
<if(parameter.HasDescriptionOrIsOptional)>     * @<parameter.VariableNameLower><if(parameter.IsOptional)> (optional)<endif> <parameter.Description><endif>}>
<if(operation.HasResultDescription)>     * @return <operation.ResultDescription><endif>
     */
<endif>    <operation.OperationNameLower>(<operation.Parameters:{parameter | <parameter.VariableNameLower>: <parameter.Type>, }>onSuccess?: (result: <operation.ResultType>) => void, onFail?: (exception: <operation.ExceptionType>, reason: string) => void): void;
}>}
<endif>

export class <class> <if(generateClientInterfaces)>implements I<class> <endif>{
    baseUrl: string = undefined; 
    beforeSend: any = undefined; 

    constructor(baseUrl?: string) {
        this.baseUrl = baseUrl !== undefined ? baseUrl : "<baseUrl>"; 
    }
<operations:{operation | 

<if(operation.HasDocumentation)>    /**
<if(operation.HasSummary)>     * <operation.Summary><endif>
<operation.Parameters:{parameter | 
<if(parameter.HasDescriptionOrIsOptional)>     * @<parameter.VariableNameLower><if(parameter.IsOptional)> (optional)<endif> <parameter.Description><endif>}>
<if(operation.HasResultDescription)>     * @return <operation.ResultDescription><endif>
     */
<endif>    <operation.OperationNameLower>(<operation.Parameters:{parameter | <parameter.VariableNameLower>: <parameter.Type>, }>onSuccess?: (result: <operation.ResultType>) => void, onFail?: (exception: <operation.ExceptionType>, reason: string) => void) {
        var url = this.baseUrl + "/<operation.Path>?"; 

<operation.PathParameters:{parameter | 
    <if(parameter.IsDate)>
        url = url.replace("{<parameter.Name>\}", "" + <parameter.VariableNameLower>.toJSON()); 
    <else>
        url = url.replace("{<parameter.Name>\}", "" + <parameter.VariableNameLower>); 
    <endif>
}>

<operation.QueryParameters:{parameter | 
        if (<parameter.VariableNameLower> !== undefined && <parameter.VariableNameLower> !== null)
    <if(parameter.IsDate)>
    <if(parameter.IsArray)>
            <parameter.VariableNameLower>.forEach(item => { url += "<parameter.Name>=" + encodeURIComponent("" + item.toJSON()) + "&"; \});
    <else>
            url += "<parameter.Name>=" + encodeURIComponent("" + <parameter.VariableNameLower>.toJSON()) + "&"; 
    <endif>
    <else>
    <if(parameter.IsArray)>
            <parameter.VariableNameLower>.forEach(item => { url += "<parameter.Name>=" + encodeURIComponent("" + item) + "&"; \});
    <else>
            url += "<parameter.Name>=" + encodeURIComponent("" + <parameter.VariableNameLower>) + "&"; 
    <endif>
    <endif>
}>

<if(operation.HasContent)>
        var content = JSON.stringify(<operation.ContentParameter.VariableNameLower>);
<else>
        var content = "";
<endif>

        $.ajax({
            url: url,
            beforeSend: this.beforeSend,
            type: "<operation.HttpMethodLower>",
            data: content,
            dataType: "text",
            headers: {
<operation.HeaderParameters:{parameter | 
                "<parameter.Name>": <parameter.VariableNameLower>, 
}>                "Content-Type": "application/json; charset=UTF-8"
            \}
        \}).done((data, textStatus, xhr) => {
            this.process<operation.OperationNameUpper>(xhr, onSuccess, onFail);
        \}).fail((xhr) => {
            this.process<operation.OperationNameUpper>(xhr, onSuccess, onFail);
        \});
    \}

    private process<operation.OperationNameUpper>(xhr: any, onSuccess?: any, onFail?: any) {
        var data = xhr.responseText; 
        var status = xhr.status.toString(); 

<operation.Responses:{response | 
        if (status === "<response.StatusCode>") {
            var result<response.StatusCode>: <response.Type> = null; 
            if (data !== undefined && data !== null && data !== "") {
                try {
    <if(response.TypeIsDate)>
                    result<response.StatusCode> = new Date(data);
    <else>
                    result<response.StatusCode> = data === "" ? null : \<<response.Type>>jQuery.parseJSON(data);
    <endif>
                \} catch(e) { 
                    if (onFail !== undefined)
                        onFail(null, "error_parsing", e);
                    return;
                \}
            \}

    <if(response.IsSuccess)>
            if (onSuccess !== undefined)
                onSuccess(result<response.StatusCode>);
    <else>
            if (onFail !== undefined)
                onFail(result<response.StatusCode>, "error_exception");
    <endif>
            return;
        \}
        else}>
        {
<if(operation.HasDefaultResponse)>
            var result: <operation.DefaultResponse.Type> = null; 
            if (data !== undefined && data !== null && data !== "") {
                try { 
    <if(operation.DefaultResponse.TypeIsDate)>
                    result = new Date(data);
    <else>
                    result = \<<operation.DefaultResponse.Type>>jQuery.parseJSON(data);
    <endif>
                \} catch(e) { 
                    if (onFail !== undefined)
                        onFail(null, "error_parsing", e);
                    return;
                \}
            \}

<if(operation.HasOnlyDefaultResponse)>
            if (status.length === 3 && status.indexOf("2") === 0) {
                if (onSuccess !== undefined)
                    onSuccess(result);
            \} else {
                if (onFail !== undefined)
                    onFail(result, "error_exception");
            \}
<else>
            if (onFail !== undefined)
                onFail(result, "error_exception");
<endif>
<else>
            if (onFail !== undefined)
                onFail(null, "error_no_callback_for_the_received_http_status");
<endif>
        \}
    \}
}>}
<endif>