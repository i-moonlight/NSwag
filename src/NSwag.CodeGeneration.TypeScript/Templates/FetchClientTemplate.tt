<#@ template visibility="internal" #>
<#@ import namespace="NJsonSchema" #>
<#@ import namespace="CodeGeneration.TypeScript" #>

<#if(Model.HasOperations){#>
<#if(Model.GenerateClientInterfaces){#>
export interface I<#=Model.Class#> {
<#foreach(var operation in Model.Operations){#>
<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescription){#>     * @<#=parameter.VariableName#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>    <#=operation.OperationNameLower#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#>: <#=parameter.Type#><#if(!parameter.IsLast){#>, <#}#><#}#>): Promise<<#=operation.ResultType#>>;
<#}#>}
<#}#>

<#if(Model.UseAureliaHttpInjection){#>
@inject(String, HttpClient)
<#}#>
export class <#=Model.Class#> <#if(Model.HasClientBaseClass){#>extends <#=Model.ClientBaseClass#> <#}#><#if(Model.GenerateClientInterfaces){#>implements I<#=Model.Class#> <#}#>{
    private baseUrl: string; 
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    protected jsonParseReviver: <#if(Model.SupportsStrictNullChecks){#>((key: string, value: any) => any) | undefined<#}else{#>(key: string, value: any) => any<#}#> = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
<#if(Model.HasClientBaseClass){#>
        super();
<#}#>
        this.baseUrl = baseUrl ? baseUrl : "";
        this.http = http ? http : window;
    }
<#if(Model.HasExtensionClass && !Model.HasClientBaseClass){#>
<#  if(Model.UseTransformOptionsMethod){#>

    protected transformOptions(options: RequestInit) {
        return Promise.resolve(options); 
    }
<#  }#>
<#  if(Model.UseTransformResultMethod){#>

    protected transformResult(url: string, response: Response, processor: (response: Response) => any) {
        return processor(response);
    }
<#  }#>
<#}#>
<#foreach(var operation in Model.Operations){#>

<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescription){#>     * @<#=parameter.VariableName#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>    <#=operation.OperationNameLower#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#>: <#=parameter.Type#><#if(!parameter.IsLast){#>, <#}#><#}#>): Promise<<#=operation.ResultType#>> {
        <#=TypeScriptTemplatePartGenerator.RenderRequestUrlCode(operation, 2)#>

<#if(!operation.IsGetOrHead){#>
        <#=TypeScriptTemplatePartGenerator.RenderRequestBodyCode(operation, 2)#>
<#}#>

        let options_ = <RequestInit>{
<#if(!operation.IsGetOrHead){#>
            body: content_,
<#}#>
            method: "<#=operation.HttpMethodUpper.ToUpperInvariant()#>",
            headers: {
<#foreach(var parameter in operation.HeaderParameters){#>
                "<#=parameter.Name#>": <#=parameter.VariableName#>, 
<#}#>
<#if(!operation.HasFormParameters){#>
                "Content-Type": "<#=operation.Consumes#>; charset=UTF-8", 
<#}#>
                "Accept": "<#=operation.Produces#>; charset=UTF-8"
            }
        };

<#if(Model.UseTransformOptionsMethod){#>
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((response: Response) => {
<#}else{#>
        return this.http.fetch(url_, options_).then((response: Response) => {
<#}#>
<#if(Model.UseTransformResultMethod){#>
            return this.transformResult(url_, response, (response: Response) => this.process<#=operation.OperationNameUpper#>(response));
<#}else{#>
            return this.process<#=operation.OperationNameUpper#>(response);
<#}#>
        });
    }

    protected process<#=operation.OperationNameUpper#>(response: Response): Promise<<#=operation.ResultType#>> {
        return response.text().then((responseText) => {
            const status = response.status; 

            <#=TypeScriptTemplatePartGenerator.RenderProcessResponseCode(operation, 3)#>
        });
    }
<#}#>

    <#=TypeScriptTemplatePartGenerator.RenderClientMethodsCode(Model, 1)#>
}
<#}#>