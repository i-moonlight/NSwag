//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.11.0.0 (NJsonSchema v9.9.10.0 (Newtonsoft.Json v9.0.0.0)) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


export class GeoPoint {
    latitude = ko.observable<number>();
    longitude = ko.observable<number>();

    init(data?: any) {
        if (data !== undefined) {
            var latitude_: any; 
            latitude_ = data["Latitude"];
            this.latitude(latitude_);

            var longitude_: any; 
            longitude_ = data["Longitude"];
            this.longitude(longitude_);

        }
    }

    static fromJS(data: any): GeoPoint {
        let result = new GeoPoint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        let latitude_: any = this.latitude(); 
        data["Latitude"] = latitude_;

        let longitude_: any = this.longitude(); 
        data["Longitude"] = longitude_;

        return data; 
    }
}

export class GenericRequestOfAddressAndPerson {
    item1 = ko.observable<Address | undefined>();
    item2 = ko.observable<Person | undefined>();

    init(data?: any) {
        if (data !== undefined) {
            var item1_: any; 
            item1_ = data["Item1"] ? Address.fromJS(data["Item1"]) : <any>undefined;
            this.item1(item1_);

            var item2_: any; 
            item2_ = data["Item2"] ? Person.fromJS(data["Item2"]) : <any>undefined;
            this.item2(item2_);

        }
    }

    static fromJS(data: any): GenericRequestOfAddressAndPerson {
        let result = new GenericRequestOfAddressAndPerson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        let item1_: any = this.item1(); 
        data["Item1"] = item1_ ? item1_.toJSON() : <any>undefined;

        let item2_: any = this.item2(); 
        data["Item2"] = item2_ ? item2_.toJSON() : <any>undefined;

        return data; 
    }
}

export class Address {
    isPrimary = ko.observable<boolean>();
    city = ko.observable<string | undefined>();

    init(data?: any) {
        if (data !== undefined) {
            var isPrimary_: any; 
            isPrimary_ = data["IsPrimary"];
            this.isPrimary(isPrimary_);

            var city_: any; 
            city_ = data["City"];
            this.city(city_);

        }
    }

    static fromJS(data: any): Address {
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        let isPrimary_: any = this.isPrimary(); 
        data["IsPrimary"] = isPrimary_;

        let city_: any = this.city(); 
        data["City"] = city_;

        return data; 
    }
}

export class Person {
    id = ko.observable<string>();
    /** Gets or sets the first name. */
    firstName = ko.observable<string>();
    /** Gets or sets the last name. */
    lastName = ko.observable<string>();
    gender = ko.observable<Gender>();
    dateOfBirth = ko.observable<Date>();
    weight = ko.observable<number>();
    height = ko.observable<number>();
    age = ko.observable<number>();
    averageSleepTime = ko.observable<string>();
    address = ko.observable<Address>(new Address());
    children = ko.observableArray<Person>([]);
    skills = ko.observable<{ [key: string] : SkillLevel; } | undefined>();

    protected _discriminator: string;

    constructor() {
        this._discriminator = "Person";
    }

    init(data?: any) {
        if (data !== undefined) {
            var id_: any; 
            id_ = data["Id"];
            this.id(id_);

            var firstName_: any; 
            firstName_ = data["FirstName"];
            this.firstName(firstName_);

            var lastName_: any; 
            lastName_ = data["LastName"];
            this.lastName(lastName_);

            var gender_: any; 
            gender_ = data["Gender"];
            this.gender(gender_);

            var dateOfBirth_: any; 
            dateOfBirth_ = data["DateOfBirth"] ? new Date(data["DateOfBirth"].toString()) : <any>undefined;
            this.dateOfBirth(dateOfBirth_);

            var weight_: any; 
            weight_ = data["Weight"];
            this.weight(weight_);

            var height_: any; 
            height_ = data["Height"];
            this.height(height_);

            var age_: any; 
            age_ = data["Age"];
            this.age(age_);

            var averageSleepTime_: any; 
            averageSleepTime_ = data["AverageSleepTime"];
            this.averageSleepTime(averageSleepTime_);

            var address_: any; 
            address_ = data["Address"] ? Address.fromJS(data["Address"]) : new Address();
            this.address(address_);

            var children_: any; 
            if (data["Children"] && data["Children"].constructor === Array) {
                children_ = [];
                for (let item of data["Children"])
                    children_.push(Person.fromJS(item));
            }
            this.children(children_);

            var skills_: any; 
            if (data["Skills"]) {
                skills_ = {};
                for (let key in data["Skills"]) {
                    if (data["Skills"].hasOwnProperty(key))
                        skills_[key] = data["Skills"][key];
                }
            }
            this.skills(skills_);

        }
    }

    static fromJS(data: any): Person {
        if (data["discriminator"] === "Teacher") {
            let result = new Teacher();
            result.init(data);
            return result;
        }
        let result = new Person();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator; 
        let id_: any = this.id(); 
        data["Id"] = id_;

        let firstName_: any = this.firstName(); 
        data["FirstName"] = firstName_;

        let lastName_: any = this.lastName(); 
        data["LastName"] = lastName_;

        let gender_: any = this.gender(); 
        data["Gender"] = gender_;

        let dateOfBirth_: any = this.dateOfBirth(); 
        data["DateOfBirth"] = dateOfBirth_ ? dateOfBirth_.toISOString() : <any>undefined;

        let weight_: any = this.weight(); 
        data["Weight"] = weight_;

        let height_: any = this.height(); 
        data["Height"] = height_;

        let age_: any = this.age(); 
        data["Age"] = age_;

        let averageSleepTime_: any = this.averageSleepTime(); 
        data["AverageSleepTime"] = averageSleepTime_;

        let address_: any = this.address(); 
        data["Address"] = address_ ? address_.toJSON() : <any>undefined;

        let children_: any = this.children(); 
        if (children_ && children_.constructor === Array) {
            data["Children"] = [];
            for (let item of children_)
                data["Children"].push(item.toJSON());
        }

        let skills_: any = this.skills(); 
        if (skills_) {
            data["Skills"] = {};
            for (let key in skills_) {
                if (skills_.hasOwnProperty(key))
                    data["Skills"][key] = skills_[key];
            }
        }

        return data; 
    }
}

export enum Gender {
    Male = <any>"Male", 
    Female = <any>"Female", 
}

export enum SkillLevel {
    Low = 0, 
    Medium = 1, 
    Height = 2, 
}

export class Teacher extends Person {
    course = ko.observable<string | undefined>();
    skillLevel = ko.observable<SkillLevel>(SkillLevel.Medium);

    constructor() {
        super();
        this._discriminator = "Teacher";
    }

    init(data?: any) {
        super.init(data);
        if (data !== undefined) {
            var course_: any; 
            course_ = data["Course"];
            this.course(course_);

            var skillLevel_: any; 
            skillLevel_ = data["SkillLevel"];
            this.skillLevel(skillLevel_);

        }
    }

    static fromJS(data: any): Teacher {
        let result = new Teacher();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        let course_: any = this.course(); 
        data["Course"] = course_;

        let skillLevel_: any = this.skillLevel(); 
        data["SkillLevel"] = skillLevel_;

        super.toJSON(data);
        return data; 
    }
}

export class Exception {
    message = ko.observable<string | undefined>();
    innerException = ko.observable<Exception | undefined>();
    stackTrace = ko.observable<string | undefined>();
    source = ko.observable<string | undefined>();

    init(data?: any) {
        if (data !== undefined) {
            var message_: any; 
            message_ = data["Message"];
            this.message(message_);

            var innerException_: any; 
            innerException_ = data["InnerException"] ? Exception.fromJS(data["InnerException"]) : <any>undefined;
            this.innerException(innerException_);

            var stackTrace_: any; 
            stackTrace_ = data["StackTrace"];
            this.stackTrace(stackTrace_);

            var source_: any; 
            source_ = data["Source"];
            this.source(source_);

        }
    }

    static fromJS(data: any): Exception {
        let result = new Exception();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        let message_: any = this.message(); 
        data["Message"] = message_;

        let innerException_: any = this.innerException(); 
        data["InnerException"] = innerException_ ? innerException_.toJSON() : <any>undefined;

        let stackTrace_: any = this.stackTrace(); 
        data["StackTrace"] = stackTrace_;

        let source_: any = this.source(); 
        data["Source"] = source_;

        return data; 
    }
}

export class PersonNotFoundException extends Exception {
    id = ko.observable<string>();

    init(data?: any) {
        super.init(data);
        if (data !== undefined) {
            var id_: any; 
            id_ = data["id"];
            this.id(id_);

        }
    }

    static fromJS(data: any): PersonNotFoundException {
        let result = new PersonNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        let id_: any = this.id(); 
        data["id"] = id_;

        super.toJSON(data);
        return data; 
    }
}

