<if(hasOperations)>
<if(generateClientInterfaces)>
public partial interface I<class>
{
<operations:{operation | 
<if(operation.HasSummary)>    /// \<summary><operation.Summary>\</summary><endif>
<operation.Parameters:{parameter | 
<if(parameter.HasDescription)>    /// \<param name="<parameter.Name>"><parameter.Description>\</param><endif>}>
<if(operation.HasResultDescription)>    /// \<returns><operation.ResultDescription>\</returns><endif>
    /// \<exception cref="<class>.SwaggerException">A server side error occurred.\</exception>
    <operation.resultType> <operation.OperationNameUpper>Async(<operation.Parameters:{parameter | <parameter.Type> <parameter.Name><if(!parameter.isLast)>,<endif> }>);

}>
}<endif>

public partial class <class> <if(hasBaseType)>: <endif><if(hasClientBaseClass)><clientBaseClass><if(generateClientInterfaces)>, <endif><endif><if(generateClientInterfaces)>I<class><endif>
{
    public <class>() : this("<baseUrl>") { }

    public <class>(string baseUrl)
    {
        BaseUrl = baseUrl; 
    }

    partial void PrepareRequest(HttpClient request);

    partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

    public string BaseUrl { get; set; }
        
<operations:{operation | 
<if(operation.HasSummary)>    /// \<summary><operation.Summary>\</summary><endif>
<operation.Parameters:{parameter | 
<if(parameter.HasDescription)>    /// \<param name="<parameter.Name>"><parameter.Description>\</param><endif>}>
<if(operation.HasResultDescription)>    /// \<returns><operation.ResultDescription>\</returns><endif>
    /// \<exception cref="SwaggerException">A server side error occurred.\</exception>
    public async <operation.resultType> <operation.OperationNameUpper>Async(<operation.Parameters:{parameter | <parameter.Type> <parameter.Name><if(!parameter.isLast)>,<endif> }>)
    {
        var url = string.Format("{0\}/{1\}?", BaseUrl, "<operation.Path>");

<operation.PlaceholderParameters:{parameter | 
        url = url.Replace("{<parameter.Name>\}", <parameter.Name>.ToString());
}>

<operation.QueryParameters:{parameter | 
        url += string.Format("<parameter.Name>={0\}&", Uri.EscapeUriString(<parameter.Name>.ToString()));
}>
        
        <if(useHttpClientCreationMethod)>var client = await CreateHttpClientAsync();<else>var client = new HttpClient();<endif>
        PrepareRequest(client);

<if(operation.HasContent)>
        var content = new StringContent(JsonConvert.SerializeObject(<operation.ContentParameter.Name>));

        var response = await client.<operation.HttpMethodUpper>Async(url, content);
        ProcessResponse(client, response);
<else>
    <if(operation.IsGetOrDelete)>
        var response = await client.<operation.HttpMethodUpper>Async(url);
    <else>
        var response = await client.<operation.HttpMethodUpper>Async(url, new StringContent(""));
    <endif>
        ProcessResponse(client, response);
<endif>

        var responseData = await response.Content.ReadAsStringAsync(); 
        var status = ((int)response.StatusCode).ToString();
<operation.Responses:{response | 
        if (status == "<response.StatusCode>") 
        {
<if(response.IsSuccess)>
            try
            {
                return JsonConvert.DeserializeObject\<<response.Type>>(responseData);		
            \} 
            catch (Exception exception) 
            {
                throw new SwaggerException("Could not deserialize the response body.", response.StatusCode, exception);
            \}
<else>
            try
            {
                var exception = JsonConvert.DeserializeObject\<<response.Type>>(responseData);
                throw new SwaggerException\<<response.Type>>("A server side error occurred.", response.StatusCode, exception, null);
            \} 
            catch (Exception exception) 
            {
                throw new SwaggerException("Could not deserialize the exception body.", response.StatusCode, exception);
            \}
<endif>
        \}
        else}>
        {
<if(operation.HasDefaultResponse)>
    <if(operation.DefaultResponse.IsSuccess)>
            try
            {
                return JsonConvert.DeserializeObject\<<operation.DefaultResponse.Type>>(responseData);		
            \} 
            catch (Exception exception) 
            {
                throw new SwaggerException("Could not deserialize the response body.", response.StatusCode, exception);
            \}
    <else>
            try
            {
                var exception = JsonConvert.DeserializeObject\<<operation.DefaultResponse.Type>>(responseData);
                throw new SwaggerException\<<operation.DefaultResponse.Type>>("A server side error occurred.", response.StatusCode, exception, null);
            \} 
            catch (Exception exception) 
            {
                throw new SwaggerException("Could not deserialize the exception body.", response.StatusCode, exception);
            \}
    <endif>
<endif>
        \}

        throw new SwaggerException("The response was not expected.", response.StatusCode, null);
    \}

}>

    public class SwaggerException : Exception
    {
        public HttpStatusCode StatusCode { get; private set; \}

        public SwaggerException(string message, HttpStatusCode statusCode, Exception innerException) : base(message, innerException)
        {
            StatusCode = statusCode;
        \}
    \}

    public class SwaggerException\<TResponse> : SwaggerException
    {
        public TResponse Response { get; private set; \}

        public SwaggerException(string message, HttpStatusCode statusCode, TResponse response, Exception innerException) : base(message, statusCode, innerException)
        {
            Response = response;
        \}
    \}
}
<endif>

