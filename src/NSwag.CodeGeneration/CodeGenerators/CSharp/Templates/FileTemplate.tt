<#@ template visibility="internal" #>
<#@ import namespace="NJsonSchema" #>
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v<#=SwaggerDocument.ToolchainVersion#> (NJsonSchema v<#=JsonSchema4.ToolchainVersion#>) (http://NSwag.org)
// </auto-generated>
//----------------------

<#foreach(var usage in Model.NamespaceUsages){#>using <#=usage#>;
<#}#>

namespace <#=Model.Namespace#>
{
    #pragma warning disable // Disable all warnings

    <#=ConversionUtilities.Tab(Model.Clients, 1)#>

<#if(Model.GenerateContracts){#>
    <#=ConversionUtilities.Tab(Model.Classes, 1)#>

<#  if(Model.RequiresFileParameterType){#>
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "<#=SwaggerDocument.ToolchainVersion#>")]
    public class FileParameter
    {
        public FileParameter(System.IO.Stream data) 
            : this (data, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
        {
            Data = data;
            FileName = fileName;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }
    }
    <#}#>

<#if (Model.GenerateExceptionClasses){#>
<#  foreach (var exceptionClassName in Model.ExceptionClassNames){#>
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "<#=SwaggerDocument.ToolchainVersion#>")]
    public class <#=exceptionClassName#> : System.Exception
    {
        public string StatusCode { get; private set; }

        public byte[] ResponseData { get; private set; }

        public <#=exceptionClassName#>(string message, string statusCode, byte[] responseData, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            ResponseData = responseData;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: n{0}n{1}", System.Text.Encoding.UTF8.GetString(ResponseData, 0, ResponseData.Length), base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "<#=SwaggerDocument.ToolchainVersion#>")]
    public class <#=exceptionClassName#><TResponse> : <#=exceptionClassName#>
    {
        public TResponse Response { get; private set; }

        public <#=exceptionClassName#>(string message, string statusCode, byte[] responseData, TResponse response, System.Exception innerException) 
            : base(message, statusCode, responseData, innerException)
        {
            Response = response;
        }
    }

<#  }#>
<#}#>
<#}#>
<#if(Model.GenerateImplementation){#>
<#  if(Model.RequiresJsonExceptionConverter){#>
    <#=Model.JsonExceptionConverterCode#>
<#  }#>
<#}#>
}