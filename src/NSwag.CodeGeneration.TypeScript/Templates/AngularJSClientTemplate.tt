<#@ template visibility="internal" #>
<#@ import namespace="NJsonSchema" #>
<#@ import namespace="CodeGeneration.TypeScript" #>

<#if(Model.HasOperations){#>
<#if(Model.GenerateClientInterfaces){#>
export interface I<#=Model.Class#> {
<#foreach(var operation in Model.Operations){#>
<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescription){#>     * @<#=parameter.VariableName#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>    <#=operation.MethodAccessModifier#><#=operation.ActualOperationName#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#><#if(Model.GenerateOptionalParameters && parameter.IsOptional){#>?<#}#>: <#=parameter.Type#><#=parameter.TypePostfix#><#if(!parameter.IsLast){#>, <#}#><#}#>): ng.IPromise<<#=operation.ResultType#>>;
<#}#>}
<#}#>

export class <#=Model.Class#> <#if(Model.HasBaseClass){#>extends <#=Model.BaseClass#> <#}#><#if(Model.GenerateClientInterfaces){#>implements I<#=Model.Class#> <#}#>{
    private baseUrl: string<#if(Model.SupportsStrictNullChecks){#> | undefined<#}#> = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: <#if(Model.SupportsStrictNullChecks){#>((key: string, value: any) => any) | undefined<#}else{#>(key: string, value: any) => any<#}#> = undefined;

<#if(!Model.HasExtendedConstructor){#>
    constructor(<#if(Model.HasConfigurationClass){#>configuration: <#=Model.ConfigurationClass#>, <#}#>$http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
<#if(Model.HasBaseClass){#>
        super(<#if(Model.HasConfigurationClass){#>configuration<#}#>);
<#}#>
        this.http = $http;
        this.q = $q;
<#if(Model.UseGetBaseUrlMethod){#>
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("<#=Model.BaseUrl#>");
<#}else{#>
        this.baseUrl = baseUrl ? baseUrl : "<#=Model.BaseUrl#>";
<#}#>
    }
<#}#>
<#if(Model.HasExtensionCode){#>
    <#=Model.ExtensionCode#>
    
<#}#>
<#foreach(var operation in Model.Operations){#>

<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescription){#>     * @<#=parameter.VariableName#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>
    <#=operation.MethodAccessModifier#><#=operation.ActualOperationName#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#><#if(Model.GenerateOptionalParameters && parameter.IsOptional){#>?<#}#>: <#=parameter.Type#><#=parameter.TypePostfix#><#if(!parameter.IsLast){#>, <#}#><#}#>): ng.IPromise<<#=operation.ResultType#>> {
        <#=TypeScriptTemplatePartGenerator.RenderRequestUrlCode(operation, 2)#>

<#if(operation.HasBody){#>
        <#=TypeScriptTemplatePartGenerator.RenderRequestBodyCode(operation, 2)#>
<#}#>

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "<#=operation.HttpMethodUpper.ToUpperInvariant()#>",
<#if(operation.IsFile){#>
            responseType: "arraybuffer",
<#}#>
<#if(operation.HasBody){#>
            data: content_,
<#}#>
            transformResponse: [], 
            headers: {
<#foreach(var parameter in operation.HeaderParameters){#>
                "<#=parameter.Name#>": <#=parameter.VariableName#>, 
<#}#>
<#if(!operation.HasFormParameters){#>
                "Content-Type": "<#=operation.Consumes#>", 
<#}#>
<#if(operation.HasResultType && !operation.HasAcceptHeaderParameterParameter){#>
                "Accept": "<#=operation.Produces#>"
<#}#>
            }
        };

<#if(Model.UseTransformOptionsMethod){#>
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http(transformedOptions_);
        }).then((_response) => {
<#}else{#>
        return this.http(options_).then((_response) => {
<#}#>
<#if(Model.UseTransformResultMethod){#>
            return this.transformResult(url_, _response, (_response) => this.process<#=operation.ActualOperationNameUpper#>(_response));
<#}else{#>
            return this.process<#=operation.ActualOperationNameUpper#>(_response);
<#}#>
        }, (_response) => {
            if (_response.status)
<#if(Model.UseTransformResultMethod){#>
                return this.transformResult(url_, _response, (_response) => this.process<#=operation.ActualOperationNameUpper#>(_response));
<#}else{#>
                return this.process<#=operation.ActualOperationNameUpper#>(_response);
<#}#>
            throw _response;
        });
    }

    protected process<#=operation.ActualOperationNameUpper#>(response: any): ng.IPromise<<#=operation.ResultType#>> {
        const status = response.status; 

        <#=TypeScriptTemplatePartGenerator.RenderProcessResponseCode(operation, 2)#>
    }
<#}#>
}
<#}#>