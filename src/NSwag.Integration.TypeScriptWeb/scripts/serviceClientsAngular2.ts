/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.12.6294.32106 (NJsonSchema v8.15.6294.32079) (http://NSwag.org)
// </auto-generated>
//----------------------

import 'rxjs/Rx'; 
import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, OpaqueToken } from '@angular/core';
import { Http, Headers, ResponseContentType, Response, RequestOptionsArgs } from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

export class MyBaseClass {
    protected transformOptions(options: any) {
        return options;
    }

    protected transformResult(_: string, response: any, processor: (response: any) => any) {
        return processor(response);
    }
}

@Injectable()
export class GeoClient extends MyBaseClass {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:13452";
    }

    fromBodyTest(location: GeoPoint): Observable<void> {
        let url_ = this.baseUrl + "/api/Geo/FromBodyTest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(location ? location.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processFromBodyTest(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processFromBodyTest(response)));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processFromBodyTest(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        let mappings: { source: any, target: any }[] = [];
        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    fromUriTest(latitude: number, longitude: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Geo/FromUriTest?";
        if (latitude === null)
            throw new Error("The parameter 'latitude' cannot be null.");
        else if (latitude !== undefined)
            url_ += "Latitude=" + encodeURIComponent("" + latitude) + "&"; 
        if (longitude === null)
            throw new Error("The parameter 'longitude' cannot be null.");
        else if (longitude !== undefined)
            url_ += "Longitude=" + encodeURIComponent("" + longitude) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processFromUriTest(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processFromUriTest(response)));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processFromUriTest(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        let mappings: { source: any, target: any }[] = [];
        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    addPolygon(points: GeoPoint[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Geo/AddPolygon";
        url_ = url_.replace(/[?&]$/, "");

        let contentData_: any = [];
        if (points) {
            for (let item of points)
                contentData_.push(item.toJSON());
        }
        const content_ = JSON.stringify(points ? contentData_ : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processAddPolygon(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processAddPolygon(response)));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processAddPolygon(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        let mappings: { source: any, target: any }[] = [];
        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    filter(currentStates: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Geo/Filter?";
        if (currentStates !== undefined)
            currentStates.forEach(item => { url_ += "currentStates=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processFilter(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processFilter(response)));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processFilter(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        let mappings: { source: any, target: any }[] = [];
        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    reverse(values: string[]): Observable<string[]> {
        let url_ = this.baseUrl + "/api/Geo/Reverse?";
        if (values !== undefined)
            values.forEach(item => { url_ += "values=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processReverse(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processReverse(response)));
                } catch (e) {
                    return <Observable<string[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<string[]>><any>Observable.throw(response);
        });
    }

    protected processReverse(response: Response): string[] {
        const responseText = response.text();
        const status = response.status; 

        let mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            let result200: string[] | null = null;
            let resultData200 = responseText === "" ? null : jp(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    refresh(): Observable<void> {
        let url_ = this.baseUrl + "/api/Geo/Refresh";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processRefresh(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processRefresh(response)));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processRefresh(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        let mappings: { source: any, target: any }[] = [];
        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    uploadFile(file: FileParameter): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Geo/UploadFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processUploadFile(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processUploadFile(response)));
                } catch (e) {
                    return <Observable<boolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<boolean>><any>Observable.throw(response);
        });
    }

    protected processUploadFile(response: Response): boolean {
        const responseText = response.text();
        const status = response.status; 

        let mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            let result200: boolean | null = null;
            let resultData200 = responseText === "" ? null : jp(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    uploadFiles(files: FileParameter[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Geo/UploadFiles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (files !== null)
            files.forEach(item_ => content_.append("files", item_.data, item_.fileName ? item_.fileName : "files") );
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processUploadFiles(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processUploadFiles(response)));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUploadFiles(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        let mappings: { source: any, target: any }[] = [];
        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    saveItems(request: GenericRequestOfAddressAndPerson): Observable<void> {
        let url_ = this.baseUrl + "/api/Geo/SaveItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request ? request.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSaveItems(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSaveItems(response)));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSaveItems(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        let mappings: { source: any, target: any }[] = [];
        if (status === 204) {
            return null;
        } else if (status === 450) {
            let result450: Exception | null = null;
            let resultData450 = responseText === "" ? null : jp(responseText, this.jsonParseReviver);
            result450 = resultData450 ? Exception.fromJS(resultData450, mappings) : null;
            this.throwException("A server error occurred.", status, responseText, result450);
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    getUploadedFile(id: number, override: boolean): Observable<Blob> {
        let url_ = this.baseUrl + "/api/Geo/GetUploadedFile/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (override === null)
            throw new Error("The parameter 'override' cannot be null.");
        else if (override !== undefined)
            url_ += "override=" + encodeURIComponent("" + override) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
			responseType: ResponseContentType.Blob,
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetUploadedFile(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetUploadedFile(response)));
                } catch (e) {
                    return <Observable<Blob>><any>Observable.throw(e);
                }
            } else
                return <Observable<Blob>><any>Observable.throw(response);
        });
    }

    protected processGetUploadedFile(response: Response): Blob {
        const responseText = response.text();
        const status = response.status; 

        let mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            let result200: Blob | null = null;
            result200 = response.blob();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class PersonsClient extends MyBaseClass {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:13452";
    }

    getAll(): Observable<Person[]> {
        let url_ = this.baseUrl + "/api/Persons";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetAll(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetAll(response)));
                } catch (e) {
                    return <Observable<Person[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<Person[]>><any>Observable.throw(response);
        });
    }

    protected processGetAll(response: Response): Person[] {
        const responseText = response.text();
        const status = response.status; 

        let mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            let result200: Person[] | null = null;
            let resultData200 = responseText === "" ? null : jp(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item, mappings));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    add(person: Person): Observable<void> {
        let url_ = this.baseUrl + "/api/Persons";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(person ? person.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processAdd(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processAdd(response)));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processAdd(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        let mappings: { source: any, target: any }[] = [];
        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    find(gender: Gender): Observable<Person[]> {
        let url_ = this.baseUrl + "/api/Persons/find/{gender}";
        if (gender === undefined || gender === null)
            throw new Error("The parameter 'gender' must be defined.");
        url_ = url_.replace("{gender}", encodeURIComponent("" + gender)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processFind(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processFind(response)));
                } catch (e) {
                    return <Observable<Person[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<Person[]>><any>Observable.throw(response);
        });
    }

    protected processFind(response: Response): Person[] {
        const responseText = response.text();
        const status = response.status; 

        let mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            let result200: Person[] | null = null;
            let resultData200 = responseText === "" ? null : jp(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item, mappings));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    findOptional(gender: Gender): Observable<Person[]> {
        let url_ = this.baseUrl + "/api/Persons/find2?";
        if (gender === undefined)
            throw new Error("The parameter 'gender' must be defined.");
        else
            url_ += "gender=" + encodeURIComponent("" + gender) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processFindOptional(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processFindOptional(response)));
                } catch (e) {
                    return <Observable<Person[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<Person[]>><any>Observable.throw(response);
        });
    }

    protected processFindOptional(response: Response): Person[] {
        const responseText = response.text();
        const status = response.status; 

        let mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            let result200: Person[] | null = null;
            let resultData200 = responseText === "" ? null : jp(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item, mappings));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    get(id: string): Observable<Person> {
        let url_ = this.baseUrl + "/api/Persons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGet(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGet(response)));
                } catch (e) {
                    return <Observable<Person>><any>Observable.throw(e);
                }
            } else
                return <Observable<Person>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): Person {
        const responseText = response.text();
        const status = response.status; 

        let mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            let result200: Person | null = null;
            let resultData200 = responseText === "" ? null : jp(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Person.fromJS(resultData200, mappings) : null;
            return result200;
        } else if (status === 500) {
            let result500: PersonNotFoundException | null = null;
            let resultData500 = responseText === "" ? null : jp(responseText, this.jsonParseReviver);
            result500 = resultData500 ? PersonNotFoundException.fromJS(resultData500, mappings) : null;
            this.throwException("A server error occurred.", status, responseText, result500);
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Persons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processDelete(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processDelete(response)));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        let mappings: { source: any, target: any }[] = [];
        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    throw(id: string): Observable<Person> {
        let url_ = this.baseUrl + "/api/Persons/Throw?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processThrow(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processThrow(response)));
                } catch (e) {
                    return <Observable<Person>><any>Observable.throw(e);
                }
            } else
                return <Observable<Person>><any>Observable.throw(response);
        });
    }

    protected processThrow(response: Response): Person {
        const responseText = response.text();
        const status = response.status; 

        let mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            let result200: Person | null = null;
            let resultData200 = responseText === "" ? null : jp(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Person.fromJS(resultData200, mappings) : null;
            return result200;
        } else if (status === 500) {
            let result500: PersonNotFoundException | null = null;
            let resultData500 = responseText === "" ? null : jp(responseText, this.jsonParseReviver);
            result500 = resultData500 ? PersonNotFoundException.fromJS(resultData500, mappings) : null;
            this.throwException("A server error occurred.", status, responseText, result500);
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * Gets the name of a person.
     * @id The person ID.
     * @return The person's name.
     */
    getName(id: string): Observable<string> {
        let url_ = this.baseUrl + "/api/Persons/{id}/Name";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetName(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetName(response)));
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response);
        });
    }

    protected processGetName(response: Response): string {
        const responseText = response.text();
        const status = response.status; 

        let mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            let result200: string | null = null;
            let resultData200 = responseText === "" ? null : jp(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        } else if (status === 500) {
            let result500: PersonNotFoundException | null = null;
            let resultData500 = responseText === "" ? null : jp(responseText, this.jsonParseReviver);
            result500 = resultData500 ? PersonNotFoundException.fromJS(resultData500, mappings) : null;
            this.throwException("A server error occurred.", status, responseText, result500);
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    addXml(person: string): Observable<string> {
        let url_ = this.baseUrl + "/api/Persons/AddXml";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = person;
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/xml; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.transformResult(url_, response, (response) => this.processAddXml(response));
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processAddXml(response)));
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response);
        });
    }

    protected processAddXml(response: Response): string {
        const responseText = response.text();
        const status = response.status; 

        let mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            let result200: string | null = null;
            let resultData200 = responseText === "" ? null : jp(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export class GeoPoint {
    latitude: number | undefined;
    longitude: number | undefined;

    init(data?: any, mappings?: any) {
        if (data !== undefined) {
            this.latitude = data["Latitude"];
            this.longitude = data["Longitude"];
        }
    }

    static fromJS(data: any, mappings?: any): GeoPoint {
        return ci<GeoPoint>(data, mappings, GeoPoint);
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
        data["Latitude"] = this.latitude;
        data["Longitude"] = this.longitude;
        return data; 
    }
}

export class GenericRequestOfAddressAndPerson {
    item1: Address | null | undefined;
    item2: Person | null | undefined;

    init(data?: any, mappings?: any) {
        if (data !== undefined) {
            this.item1 = data["Item1"] ? Address.fromJS(data["Item1"], mappings) : undefined;
            this.item2 = data["Item2"] ? Person.fromJS(data["Item2"], mappings) : undefined;
        }
    }

    static fromJS(data: any, mappings?: any): GenericRequestOfAddressAndPerson {
        return ci<GenericRequestOfAddressAndPerson>(data, mappings, GenericRequestOfAddressAndPerson);
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
        data["Item1"] = this.item1 ? this.item1.toJSON() : undefined;
        data["Item2"] = this.item2 ? this.item2.toJSON() : undefined;
        return data; 
    }
}

export class Address {
    isPrimary: boolean | undefined;
    city: string | null | undefined;

    init(data?: any, mappings?: any) {
        if (data !== undefined) {
            this.isPrimary = data["IsPrimary"];
            this.city = data["City"];
        }
    }

    static fromJS(data: any, mappings?: any): Address {
        return ci<Address>(data, mappings, Address);
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
        data["IsPrimary"] = this.isPrimary;
        data["City"] = this.city;
        return data; 
    }
}

export class Person {
    id: string | undefined;
    /** Gets or sets the first name. */
    firstName: string | undefined;
    /** Gets or sets the last name. */
    lastName: string | undefined;
    gender: Gender | undefined;
    dateOfBirth: Date | undefined;
    weight: number | undefined;
    height: number | undefined;
    age: number | undefined;
    averageSleepTime: string | undefined;
    address: Address | undefined = new Address();
    children: Person[] | undefined = [];
    skills: { [key: string] : SkillLevel; } | null | undefined;

    protected _discriminator: string;

    constructor() {
        this._discriminator = "Person";
    }

    init(data?: any, mappings?: any) {
        if (data !== undefined) {
            this.id = data["Id"];
            this.firstName = data["FirstName"];
            this.lastName = data["LastName"];
            this.gender = data["Gender"];
            this.dateOfBirth = data["DateOfBirth"] ? new Date(data["DateOfBirth"].toString()) : undefined;
            this.weight = data["Weight"];
            this.height = data["Height"];
            this.age = data["Age"];
            this.averageSleepTime = data["AverageSleepTime"];
            this.address = data["Address"] ? Address.fromJS(data["Address"], mappings) : new Address();
            if (data["Children"] && data["Children"].constructor === Array) {
                this.children = [];
                for (let item of data["Children"])
                    this.children.push(Person.fromJS(item, mappings));
            }
            if (data["Skills"]) {
                this.skills = {};
                for (let key in data["Skills"]) {
                    if (data["Skills"].hasOwnProperty(key))
                        this.skills[key] = data["Skills"][key];
                }
            }
        }
    }

    static fromJS(data: any, mappings?: any): Person {
        if (data["discriminator"] === "Teacher")
            return ci<Teacher>(data, mappings, Teacher);
        return ci<Person>(data, mappings, Person);
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
        data["discriminator"] = this._discriminator; 
        data["Id"] = this.id;
        data["FirstName"] = this.firstName;
        data["LastName"] = this.lastName;
        data["Gender"] = this.gender;
        data["DateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : undefined;
        data["Weight"] = this.weight;
        data["Height"] = this.height;
        data["Age"] = this.age;
        data["AverageSleepTime"] = this.averageSleepTime;
        data["Address"] = this.address ? this.address.toJSON() : undefined;
        if (this.children && this.children.constructor === Array) {
            data["Children"] = [];
            for (let item of this.children)
                data["Children"].push(item.toJSON());
        }
        if (this.skills) {
            data["Skills"] = {};
            for (let key in this.skills) {
                if (this.skills.hasOwnProperty(key))
                    data["Skills"][key] = this.skills[key];
            }
        }
        return data; 
    }
}

export enum Gender {
    Male = <any>"Male", 
    Female = <any>"Female", 
}

export enum SkillLevel {
    Low = 0, 
    Medium = 1, 
    Height = 2, 
}

export class Teacher extends Person {
    course: string | null | undefined;
    skillLevel: SkillLevel | undefined = SkillLevel.Medium;

    constructor() {
        super();
        this._discriminator = "Teacher";
    }

    init(data?: any, mappings?: any) {
        super.init(data);
        if (data !== undefined) {
            this.course = data["Course"];
            this.skillLevel = data["SkillLevel"];
        }
    }

    static fromJS(data: any, mappings?: any): Teacher {
        return ci<Teacher>(data, mappings, Teacher);
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
        data["Course"] = this.course;
        data["SkillLevel"] = this.skillLevel;
        super.toJSON(data);
        return data; 
    }
}

export class Exception {
    message: string | null | undefined;
    innerException: Exception | null | undefined;
    stackTrace: string | null | undefined;
    source: string | null | undefined;

    init(data?: any, mappings?: any) {
        if (data !== undefined) {
            this.message = data["Message"];
            this.innerException = data["InnerException"] ? Exception.fromJS(data["InnerException"], mappings) : undefined;
            this.stackTrace = data["StackTrace"];
            this.source = data["Source"];
        }
    }

    static fromJS(data: any, mappings?: any): Exception {
        return ci<Exception>(data, mappings, Exception);
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
        data["Message"] = this.message;
        data["InnerException"] = this.innerException ? this.innerException.toJSON() : undefined;
        data["StackTrace"] = this.stackTrace;
        data["Source"] = this.source;
        return data; 
    }
}

export class PersonNotFoundException extends Exception {
    id: string | undefined;

    init(data?: any, mappings?: any) {
        super.init(data);
        if (data !== undefined) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any, mappings?: any): PersonNotFoundException {
        return ci<PersonNotFoundException>(data, mappings, PersonNotFoundException);
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

export interface FileParameter
{
    data: any;
    fileName: string;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

function jp(json: any, reviver?: any) {
    json = JSON.parse(json, reviver);

    var byid: any = {};
    var refs: any = [];
    json = (function recurse(obj: any, prop?: any, parent?: any) {
        if (typeof obj !== 'object' || !obj)
            return obj;
        
        if ("$ref" in obj) {
            let ref = obj.$ref;
            if (ref in byid)
                return byid[ref];
            refs.push([parent, prop, ref]);
            return undefined;
        } else if ("$id" in obj) {
            let id = obj.$id;
            delete obj.$id;
            if ("$values" in obj)
                obj = obj.$values;
            byid[id] = obj;
        }
        
        if (Array.isArray(obj)) {
            obj = obj.map((v, i) => recurse(v, i, obj));
        } else {
            for (var p in obj) {
                if (obj.hasOwnProperty(p) && obj[p] && typeof obj[p] === 'object')
                    obj[p] = recurse(obj[p], p, obj);
            }
        }

        return obj;
    })(json);

    for (let i = 0; i < refs.length; i++) {
        const ref = refs[i];
        ref[0][ref[1]] = byid[ref[2]];
    }

    return json;
}

function ci<T>(data: any, mappings: any, type: any): T {
    if (!mappings)
        mappings = [];
    else {
        let mapping = mappings.filter((m: any) => m.source === data);
        if (mapping.length === 1)
            return <T>mapping[0].target;
    }

    let result: any = new type();
    mappings.push({ source: data, target: result });
    result.init(data, mappings);
    return result;
}