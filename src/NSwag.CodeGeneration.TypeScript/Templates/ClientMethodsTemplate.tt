<#@ template visibility="internal" #>
<#if(Model.IsAngular){#>
function throwException(message: string, status: number, response: string, result?: any): Observable<any> {
<#if(Model.WrapDtoExceptions){#>
    return Observable.throw(new SwaggerException(message, status, response, result));
<#}else{#>
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, null));
<#}#>
}

<#}else if(Model.IsAngularJS){#>
function throwException(q: ng.IQService, message: string, status: number, response: string, result?: any): ng.IPromise<any> {
<#if(Model.WrapDtoExceptions){#>
    return q.reject(new SwaggerException(message, status, response, result));
<#}else{#>
    if(result !== null && result !== undefined)
        return q.reject(result);
    else
        return q.reject(new SwaggerException(message, status, response, null));
<#}#>
}

<#}else{#>
function throwException(message: string, status: number, response: string, result?: any): any {
<#if(Model.WrapDtoExceptions){#>
    throw new SwaggerException(message, status, response, result);
<#}else{#>
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, null);
<#}#>
}

<#}#>
<#if(Model.IsAngular){#>
function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => { 
        let reader = new FileReader(); 
        reader.onload = function() { 
            observer.next(this.result);
            observer.complete();
        }
        reader.readAsText(blob); 
    });
}

<#}else if(Model.IsAngularJS){#>
function blobToText(blob: Blob, q: ng.IQService): ng.IPromise<string> {
    return new q((resolve) => { 
        let reader = new FileReader(); 
        reader.onload = function() { 
            resolve(this.result);
        }
        reader.readAsText(blob); 
    });
}

<#}#>