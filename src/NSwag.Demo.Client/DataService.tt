<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="$(SolutionDir)\NSwag.CodeGeneration\bin\Debug\NJsonSchema.dll" #>
<#@ assembly name="$(SolutionDir)\NSwag.CodeGeneration\bin\Debug\NJsonSchema.CodeGeneration.dll" #>
<#@ assembly name="$(SolutionDir)\NSwag.CodeGeneration\bin\Debug\NSwag.CodeGeneration.dll" #>
<#@ assembly name="$(SolutionDir)\NSwag.CodeGeneration\bin\Debug\NSwag.Core.dll" #>
<#@ import namespace="NSwag.CodeGeneration.ClientGenerators.CSharp" #>
<#@ import namespace="NSwag.CodeGeneration.SwaggerGenerators.WebApi" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ output extension=".cs" #>
<#
    // CONFIGURATION
    var assemblyPath = @"../../NSwag.Demo.Web/bin/NSwag.Demo.Web.dll";
    var controllerClass = "NSwag.Demo.Web.Controllers.PersonsController";
    var defaultUrlTemplate = "api/{controller}/{action}/{id}";
    // -------------

    var generator = new WebApiAssemblyToSwaggerGenerator(new WebApiAssemblyToSwaggerGeneratorSettings
    {
        AssemblyPath = Path.GetFullPath(Path.GetDirectoryName(Host.TemplateFile) + assemblyPath), 
        DefaultUrlTemplate = defaultUrlTemplate
    });
    var service = generator.GenerateForSingleController(controllerClass);

    // -------------

    var provider = new CSharpCodeProvider();
    var clientGenerator = new SwaggerToCSharpGenerator(service, new SwaggerToCSharpGeneratorSettings
    {
        ClassName = provider.CreateEscapedIdentifier(Path.GetFileNameWithoutExtension(Host.TemplateFile)), 
        Namespace = Host.ResolveParameterValue("directiveId", "namespaceDirectiveProcessor", "namespaceHint")
    });
    var code = clientGenerator.GenerateFile();
#>
<#= code #>