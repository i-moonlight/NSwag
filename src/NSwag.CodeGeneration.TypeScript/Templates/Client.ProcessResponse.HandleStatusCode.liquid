{% if operation.CanRequestBlobs and response.IsFile -%}
const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
{%     if IsAngular -%}
{%         if operation.WrapResponse -%}
return Observable.of(new {{ operation.ResponseClass }}(status, _headers, { fileName: fileName, data: <any>response.{% if UseAngularHttpClient %}body{% else %}blob(){% endif %}, status: status, headers: _headers }));
{%         else -%}
return Observable.of({ fileName: fileName, data: <any>response.{% if UseAngularHttpClient %}body{% else %}blob(){% endif %}, status: status, headers: _headers });
{%         endif -%}
{%     elseif IsAngularJS -%}
{%         if operation.WrapResponse -%}
return this.q.resolve(new {{ operation.ResponseClass }}(status, _headers, { fileName: fileName, status: status, data: new Blob([response]), headers: _headers }));
{%         else -%}
return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response]), headers: _headers });
{%         endif -%}
{%     else -%}
{%         if operation.WrapResponse -%}
return response.blob().then(blob => { return new {{ operation.ResponseClass }}(status, _headers, { fileName: fileName, data: blob, status: status, headers: _headers }); });
{%         else -%}
return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
{%         endif -%}
{%     endif -%}
{% else -%}
{% template Client.ProcessResponse.ReadBodyStart %}
{%     if response.HasType -%}
let result{{ response.StatusCode }}: any = null;
{%         if response.UseDtoClass or response.IsDate -%}
let resultData{{ response.StatusCode }} = _responseText === "" ? null : {% if operation.HandleReferences %}jsonParse{% else %}JSON.parse{% endif %}(_responseText, this.jsonParseReviver);
{{ response.DataConversionCode }}
{%         else -%}
result{{ response.StatusCode }} = _responseText === "" ? null : <{{ response.Type }}>{% if operation.HandleReferences %}jsonParse{% else %}JSON.parse{% endif %}(_responseText, this.jsonParseReviver);
{%         endif -%}
{%         if response.IsSuccess -%}
{%             if IsAngular -%}
{%                 if operation.WrapResponse -%}
return Observable.of(new {{ operation.ResponseClass }}(status, _headers, result{{ response.StatusCode }}));
{%                 else -%}
return Observable.of(result{{ response.StatusCode }});
{%                 endif -%}
{%             elseif IsAngularJS -%}
{%                 if operation.WrapResponse -%}
return this.q.resolve(new {{ operation.ResponseClass }}(status, _headers, result{{ response.StatusCode }}));
{%                 else -%}
return this.q.resolve(result{{ response.StatusCode }});
{%                 endif -%}
{%             else -%}
{%                 if operation.WrapResponse -%}
return new {{ operation.ResponseClass }}(status, _headers, result{{ response.StatusCode }});
{%                 else -%}
return result{{ response.StatusCode }};
{%                 endif -%}
{%             endif -%}
{%         else -%}
return throwException({% if IsAngularJS %}this.q, {% endif %}"A server error occurred.", status, _responseText, _headers, result{{ response.StatusCode }});
{%         endif -%}
{%     elseif response.IsSuccess -%}
{%         if IsAngular -%}
return Observable.of<{{ operation.ResultType }}>(<any>null);
{%         elseif IsAngularJS -%}
return this.q.resolve<{{ operation.ResultType }}>(<any>null);
{%         else -%}
return{% if operation.HasResultType %} null{% endif %};
{%         endif -%}
{%     else -%}
return throwException({% if IsAngularJS %}this.q, {% endif %}"A server error occurred.", status, _responseText, _headers);
{%     endif -%}
{% template Client.ProcessResponse.ReadBodyEnd %}
{% endif -%}
