//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.11.0.0 (NJsonSchema v9.9.10.0 (Newtonsoft.Json v9.0.0.0)) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


export class Order implements IOrder {
    id: number | undefined;
    petId: number | undefined;
    quantity: number | undefined;
    shipDate: Date | undefined;
    /** Order Status */
    status: OrderStatus | undefined;
    complete: boolean | undefined = false;

    constructor(data?: IOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.petId = data["petId"];
            this.quantity = data["quantity"];
            this.shipDate = data["shipDate"] ? new Date(data["shipDate"].toString()) : <any>undefined;
            this.status = data["status"];
            this.complete = data["complete"] !== undefined ? data["complete"] : false;
        }
    }

    static fromJS(data: any): Order {
        let result = new Order();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["petId"] = this.petId;
        data["quantity"] = this.quantity;
        data["shipDate"] = this.shipDate ? this.shipDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["complete"] = this.complete;
        return data; 
    }
}

export interface IOrder {
    id: number | undefined;
    petId: number | undefined;
    quantity: number | undefined;
    shipDate: Date | undefined;
    /** Order Status */
    status: OrderStatus | undefined;
    complete: boolean | undefined;
}

export class Category implements ICategory {
    id: number | undefined;
    name: string | undefined;

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): Category {
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface ICategory {
    id: number | undefined;
    name: string | undefined;
}

export class User implements IUser {
    id: number | undefined;
    username: string | undefined;
    firstName: string | undefined;
    lastName: string | undefined;
    email: string | undefined;
    password: string | undefined;
    phone: string | undefined;
    /** User Status */
    userStatus: number | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.username = data["username"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.email = data["email"];
            this.password = data["password"];
            this.phone = data["phone"];
            this.userStatus = data["userStatus"];
        }
    }

    static fromJS(data: any): User {
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["password"] = this.password;
        data["phone"] = this.phone;
        data["userStatus"] = this.userStatus;
        return data; 
    }
}

export interface IUser {
    id: number | undefined;
    username: string | undefined;
    firstName: string | undefined;
    lastName: string | undefined;
    email: string | undefined;
    password: string | undefined;
    phone: string | undefined;
    /** User Status */
    userStatus: number | undefined;
}

export class Tag implements ITag {
    id: number | undefined;
    name: string | undefined;

    constructor(data?: ITag) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): Tag {
        let result = new Tag();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface ITag {
    id: number | undefined;
    name: string | undefined;
}

export class Pet implements IPet {
    id: number | undefined;
    category: Category | undefined;
    name: string;
    photoUrls: string[] = [];
    tags: Tag[] | undefined;
    /** pet status in the store */
    status: PetStatus | undefined;

    constructor(data?: IPet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.category = data["category"] ? Category.fromJS(data["category"]) : <any>undefined;
            this.name = data["name"];
            if (data["photoUrls"] && data["photoUrls"].constructor === Array) {
                this.photoUrls = [];
                for (let item of data["photoUrls"])
                    this.photoUrls.push(item);
            }
            if (data["tags"] && data["tags"].constructor === Array) {
                this.tags = [];
                for (let item of data["tags"])
                    this.tags.push(Tag.fromJS(item));
            }
            this.status = data["status"];
        }
    }

    static fromJS(data: any): Pet {
        let result = new Pet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        data["name"] = this.name;
        if (this.photoUrls && this.photoUrls.constructor === Array) {
            data["photoUrls"] = [];
            for (let item of this.photoUrls)
                data["photoUrls"].push(item);
        }
        if (this.tags && this.tags.constructor === Array) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["status"] = this.status;
        return data; 
    }
}

export interface IPet {
    id: number | undefined;
    category: Category | undefined;
    name: string;
    photoUrls: string[];
    tags: Tag[] | undefined;
    /** pet status in the store */
    status: PetStatus | undefined;
}

export class ApiResponse implements IApiResponse {
    code: number | undefined;
    type: string | undefined;
    message: string | undefined;

    constructor(data?: IApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.type = data["type"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): ApiResponse {
        let result = new ApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["type"] = this.type;
        data["message"] = this.message;
        return data; 
    }
}

export interface IApiResponse {
    code: number | undefined;
    type: string | undefined;
    message: string | undefined;
}

export enum Status {
    Available = <any>"available", 
    Pending = <any>"pending", 
    Sold = <any>"sold", 
}

export enum OrderStatus {
    Placed = <any>"placed", 
    Approved = <any>"approved", 
    Delivered = <any>"delivered", 
}

export enum PetStatus {
    Available = <any>"available", 
    Pending = <any>"pending", 
    Sold = <any>"sold", 
}

