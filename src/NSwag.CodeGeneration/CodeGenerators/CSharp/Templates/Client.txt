<if(hasOperations)>
<if(generateClientInterfaces)>
public partial interface I<class>
{
<operations:{operation | 
<if(operation.HasSummary)>    /// \<summary><operation.Summary>\</summary><endif>
<operation.Parameters:{parameter | 
<if(parameter.HasDescription)>    /// \<param name="<parameter.VariableNameLower>"><parameter.Description>\</param><endif>}>
<if(operation.HasResultDescription)>    /// \<returns><operation.ResultDescription>\</returns><endif>
    /// \<exception cref="<class>.SwaggerException">A server side error occurred.\</exception>
    <operation.resultType> <operation.OperationNameUpper>Async(<operation.Parameters:{parameter | <parameter.Type> <parameter.VariableNameLower><if(!parameter.isLast)>, <endif>}>);

<if(operation.HasSummary)>    /// \<summary><operation.Summary>\</summary><endif>
<operation.Parameters:{parameter | 
<if(parameter.HasDescription)>    /// \<param name="<parameter.VariableNameLower>"><parameter.Description>\</param><endif>}>
    /// \<param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.\</param>
<if(operation.HasResultDescription)>    /// \<returns><operation.ResultDescription>\</returns><endif>
    /// \<exception cref="<class>.SwaggerException">A server side error occurred.\</exception>
    <operation.resultType> <operation.OperationNameUpper>Async(<operation.Parameters:{parameter | <parameter.Type> <parameter.VariableNameLower>, }>CancellationToken cancellationToken);

}>
}
<endif>

public partial class <class> <if(hasBaseType)>: <endif><if(hasBaseClass)><baseClass><if(generateClientInterfaces)>, <endif><endif><if(generateClientInterfaces)>I<class><endif>
{
    public <class>() : this("<baseUrl>") { }

    public <class>(string baseUrl)
    {
        BaseUrl = baseUrl; 
    }

    partial void PrepareRequest(HttpClient request, ref string url);

    partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

    public string BaseUrl { get; set; }

<operations:{operation | 
<if(operation.HasSummary)>    /// \<summary><operation.Summary>\</summary><endif>
<operation.Parameters:{parameter | 
<if(parameter.HasDescription)>    /// \<param name="<parameter.VariableNameLower>"><parameter.Description>\</param><endif>}>
<if(operation.HasResultDescription)>    /// \<returns><operation.ResultDescription>\</returns><endif>
    /// \<exception cref="SwaggerException">A server side error occurred.\</exception>
    public <operation.resultType> <operation.OperationNameUpper>Async(<operation.Parameters:{parameter | <parameter.Type> <parameter.VariableNameLower><if(!parameter.isLast)>, <endif>}>)
    {
        return <operation.OperationNameUpper>Async(<operation.Parameters:{parameter | <parameter.VariableNameLower>, }>CancellationToken.None);
    \}

<if(operation.HasSummary)>    /// \<summary><operation.Summary>\</summary><endif>
<operation.Parameters:{parameter | 
<if(parameter.HasDescription)>    /// \<param name="<parameter.VariableNameLower>"><parameter.Description>\</param><endif>}>
    /// \<param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.\</param>
<if(operation.HasResultDescription)>    /// \<returns><operation.ResultDescription>\</returns><endif>
    /// \<exception cref="SwaggerException">A server side error occurred.\</exception>
    public async <operation.resultType> <operation.OperationNameUpper>Async(<operation.Parameters:{parameter | <parameter.Type> <parameter.VariableNameLower>, }>CancellationToken cancellationToken)
    {
        var url_ = string.Format("{0\}/{1\}?", BaseUrl, "<operation.Path>");

<operation.PathParameters:{parameter | 
        if (<parameter.VariableNameLower> == null)
            throw new ArgumentNullException("<parameter.VariableNameLower>");

        url_ = url_.Replace("{<parameter.Name>\}", <parameter.VariableNameLower>.ToString());
}>

<operation.QueryParameters:{parameter | 
    <if(parameter.IsOptional)>
        if (<parameter.VariableNameLower> != null)
    <else>
        if (<parameter.VariableNameLower> == null)
            throw new ArgumentNullException("<parameter.VariableNameLower>");
        else
    <endif>
    <if(parameter.IsDate)>
    <if(parameter.IsArray)>
            foreach(var item_ in <parameter.VariableNameLower>) { url_ += string.Format("<parameter.Name>={0\}&", Uri.EscapeUriString(item_.ToString("s", CultureInfo.InvariantCulture))); \}
    <else>
            url_ += string.Format("<parameter.Name>={0\}&", Uri.EscapeUriString(<parameter.VariableNameLower>.ToString("s", CultureInfo.InvariantCulture)));
    <endif>
    <else>
    <if(parameter.IsArray)>
            foreach(var item_ in <parameter.VariableNameLower>) { url_ += string.Format("<parameter.Name>={0\}&", Uri.EscapeUriString(item_.ToString())); \}
    <else>
            url_ += string.Format("<parameter.Name>={0\}&", Uri.EscapeUriString(<parameter.VariableNameLower>.ToString()));
    <endif>
    <endif>
}>
        
        <if(useHttpClientCreationMethod)>var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);<else>var client_ = new HttpClient();<endif>
        PrepareRequest(client_, ref url_);

<operation.HeaderParameters:{parameter | 
        client_.DefaultRequestHeaders.TryAddWithoutValidation("<parameter.Name>", <parameter.VariableNameLower>);
}>

<if(operation.HasContent)>
        var content_ = new StringContent(JsonConvert.SerializeObject(<operation.ContentParameter.VariableNameLower>));
        content_.Headers.ContentType.MediaType = "application/json";

        var response_ = await client_.<operation.HttpMethodUpper>Async(url_, content_, cancellationToken).ConfigureAwait(false);
        ProcessResponse(client_, response_);
<else>
    <if(operation.IsGetOrDelete)>
        var response_ = await client_.<operation.HttpMethodUpper>Async(url_, cancellationToken).ConfigureAwait(false);
    <else>
        <if(operation.HasFormParameters)>
        var content_ = new MultipartFormDataContent();
<operation.FormParameters:{parameter |
    <if(parameter.IsOptional)>
        if (<parameter.VariableNameLower> != null)
    <else>
        if (<parameter.VariableNameLower> == null)
            throw new ArgumentNullException("<parameter.VariableNameLower>");
        else
    <endif>
            content_.Add(new StringContent(<parameter.VariableNameLower>.ToString()), "<parameter.Name>");
}>
        <else>
        var content_ = new StringContent(string.Empty);
        <endif>
        var response_ = await client_.<operation.HttpMethodUpper>Async(url_, content_, cancellationToken).ConfigureAwait(false);
    <endif>
        ProcessResponse(client_, response_);
<endif>

        var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
        var status_ = ((int)response_.StatusCode).ToString();

<operation.Responses:{response | 
        if (status_ == "<response.StatusCode>") 
        {
<if(response.HasType)>
    <if(response.IsFile)>
        <if(response.IsSuccess)>
            return responseData_; 
        <else>
            throw new SwaggerException\<byte[]>("A server side error occurred.", response_.StatusCode, responseData_, responseData_, null);
        <endif>
    <else>
            var result_ = default(<response.Type>); 
            try
            {
                if (responseData_.Length > 0)
                    result_ = JsonConvert.DeserializeObject\<<response.Type>>(Encoding.UTF8.GetString(responseData_));                                
        <if(response.IsSuccess)>
                return result_; 
            \} 
            catch (Exception exception) 
            {
                throw new SwaggerException("Could not deserialize the response body.", response_.StatusCode, responseData_, exception);
            \}
        <else>
            \} 
            catch (Exception exception) 
            {
                throw new SwaggerException("Could not deserialize the response body.", response_.StatusCode, responseData_, exception);
            \}

            throw new SwaggerException\<<response.Type>>("A server side error occurred.", response_.StatusCode, responseData_, result_, null);
        <endif>
    <endif>
<else>
    <if(operation.HasResultType)>
            return default(<operation.HasResult>);
    <else>
            return;     
    <endif> 
<endif>
        \}
        else}>
        {
<if(operation.HasDefaultResponse)>
            var result_ = default(<operation.DefaultResponse.Type>); 
            try
            {
                if (responseData_.Length > 0)
                    result_ = JsonConvert.DeserializeObject\<<operation.DefaultResponse.Type>>(Encoding.UTF8.GetString(responseData_));

    <if(operation.HasOnlyDefaultResponse)>
                if (status_.Length == 3 && status_.StartsWith("2"))
                    return result_;
    <endif>
            \} 
            catch (Exception exception_) 
            {
                throw new SwaggerException("Could not deserialize the response body.", response_.StatusCode, responseData_, exception_);
            \}

            throw new SwaggerException\<<operation.DefaultResponse.Type>>("A server side error occurred.", response_.StatusCode, responseData_, result_, null);
<endif>
        \}

        throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", response_.StatusCode, responseData_, null);
    \}

}>

    public class SwaggerException : Exception
    {
        public HttpStatusCode StatusCode { get; private set; \}

        public byte[] ResponseData { get; private set; \}

        public SwaggerException(string message, HttpStatusCode statusCode, byte[] responseData, Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            ResponseData = responseData;
        \}

        public override string ToString()
        {
            return string.Format("HTTP Response: \n{0}\n{1}", Encoding.UTF8.GetString(ResponseData), base.ToString());
        \}
    \}

    public class SwaggerException\<TResponse> : SwaggerException
    {
        public TResponse Response { get; private set; \}

        public SwaggerException(string message, HttpStatusCode statusCode, byte[] responseData, TResponse response, Exception innerException) 
            : base(message, statusCode, responseData, innerException)
        {
            Response = response;
        \}
    \}
}
<endif>

