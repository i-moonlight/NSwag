// The AngularJS client template is currently NOT TESTET!

<if(hasOperations)>
<if(generateClientInterfaces)>
export interface I<class> {
<operations:{operation | 
<if(operation.HasDocumentation)>    /**
<if(operation.HasSummary)>     * <operation.Summary><endif>
<operation.Parameters:{parameter | 
<if(parameter.HasDescription)>     * @<parameter.VariableNameLower> <parameter.Description><endif>}>
<if(operation.HasResultDescription)>     * @return <operation.ResultDescription><endif>
     */
<endif>    <operation.OperationNameLower>(<operation.Parameters:{parameter | <parameter.VariableNameLower>: <parameter.Type><if(!parameter.IsLast)>,<endif> }>): ng.IPromise\<<operation.ResultType>>;
}>}
<endif>

export class <class> <if(generateClientInterfaces)>implements I<class> <endif>{
    baseUrl: string = undefined; 
    http: ng.IHttpService = null; 

    constructor($http: ng.IHttpService, baseUrl?: string) {
        this.http = $http; 
        this.baseUrl = baseUrl !== undefined ? baseUrl : "<baseUrl>"; 
    }
<operations:{operation | 

<if(operation.HasDocumentation)>    /**
<if(operation.HasSummary)>     * <operation.Summary><endif>
<operation.Parameters:{parameter | 
<if(parameter.HasDescription)>     * @<parameter.VariableNameLower> <parameter.Description><endif>}>
<if(operation.HasResultDescription)>     * @return <operation.ResultDescription><endif>
     */
<endif>    <operation.OperationNameLower>(<operation.Parameters:{parameter | <parameter.VariableNameLower>: <parameter.Type><if(!parameter.IsLast)>,<endif> }>): ng.IPromise\<<operation.ResultType>> {
        var url = this.baseUrl + "/<operation.Path>?"; 

<operation.PathParameters:{parameter | 
    <if(parameter.IsDate)>
        url = url.replace("{<parameter.Name>\}", "" + <parameter.VariableNameLower>.toJSON()); 
    <else>
        url = url.replace("{<parameter.Name>\}", "" + <parameter.VariableNameLower>); 
    <endif>
}>

<operation.QueryParameters:{parameter | 
        if (<parameter.VariableNameLower> !== undefined && <parameter.VariableNameLower> !== null)
    <if(parameter.IsDate)>
            url += "<parameter.Name>=" + encodeURIComponent("" + <parameter.VariableNameLower>.toJSON()) + "&"; 
    <else>
    <if(parameter.IsArray)>
            <parameter.VariableNameLower>.forEach(item => { url += "<parameter.Name>=" + encodeURIComponent("" + item) + "&"; \});
    <else>
            url += "<parameter.Name>=" + encodeURIComponent("" + <parameter.VariableNameLower>) + "&"; 
    <endif>
    <endif>
}>

<if(operation.HasContent)>
        var content = JSON.stringify(<operation.ContentParameter.VariableNameLower>);
<else>
        var content = "";
<endif>

        return this.http({
            url: url,
            method: "<operation.HttpMethod>",
            data: content,
            headers: {
<operation.HeaderParameters:{parameter | 
                "<parameter.Name>": <parameter.VariableNameLower>, 
}>                "Content-Type": "application/json; charset=UTF-8"
            \}
        \}).then((response) => {
            return this.process<operation.OperationNameUpper>(response);
        \});
    \}

    private process<operation.OperationNameUpper>(response: any) {
        var data = response.data; 
        var status = response.status; 

<operation.Responses:{response | 
        if (status === "<response.StatusCode>") {
            var result<response.StatusCode>: <response.Type> = null; 
<if(response.TypeIsDate)>
            result<response.StatusCode> = new Date(data);
<else>
            result<response.StatusCode> = \<<response.Type>>data;
<endif>
<if(response.IsSuccess)>
            return result<response.StatusCode>; 
<else>
            throw result<response.StatusCode>; 
<endif>
        \}
        else}>
        {
<if(operation.HasDefaultResponse)>
            var result: <operation.DefaultResponse.Type> = null; 
    <if(operation.DefaultResponse.TypeIsDate)>
            result = new Date(data);
    <else>
            result = \<<operation.DefaultResponse.Type>>data;
    <endif>
    <if(operation.DefaultResponse.IsSuccess)>
            return result; 
    <else>
            throw result; 
    <endif>
<else>
            throw "error_no_callback_for_the_received_http_status"; 
<endif>
        \}
    \}
}>}
<endif>

