//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v5.4.6091.41181 (http://NSwag.org)
// </auto-generated>
//----------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace NSwag.Integration.WebAPI
{
    #pragma warning disable // Disable all warnings

    [GeneratedCode("NSwag", "5.4.6091.41181")]
    public partial class PersonsClient 
    {
        public PersonsClient() : this("http://localhost:13452") { }
    
        public PersonsClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<Person>> GetAllAsync()
        {
            return GetAllAsync(CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<Person>> GetAllAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Persons");
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(ObservableCollection<Person>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<ObservableCollection<Person>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Person> GetAsync(int id)
        {
            return GetAsync(id, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Person> GetAsync(int id, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Persons/{id}");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{id}", Uri.EscapeUriString(id.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(Person); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Person>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<string> GetNameAsync(int id)
        {
            return GetNameAsync(id, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<string> GetNameAsync(int id, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Persons/{id}/Name");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{id}", Uri.EscapeUriString(id.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(string); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<string>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.5.6091.37159")]
    public partial class Person 
    {
    
        [JsonProperty("FirstName", Required = Required.Always)]
        [Required]
        public string FirstName { get; set; }
    
        [JsonProperty("LastName", Required = Required.Always)]
        [Required]
        public string LastName { get; set; }
    
        [JsonProperty("DateOfBirth", Required = Required.Always)]
        [Required]
        public DateTime DateOfBirth { get; set; }
    
        [JsonProperty("Address", Required = Required.Always)]
        [Required]
        public Address Address { get; set; } = new Address();
    
        [JsonProperty("Children", Required = Required.Always)]
        [Required]
        public ObservableCollection<Person> Children { get; set; } = new ObservableCollection<Person>();
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Person FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Person>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.5.6091.37159")]
    public partial class Address 
    {
    
        [JsonProperty("City", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string City { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Address FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Address>(data);
        }
    }

    [GeneratedCode("NSwag", "5.4.6091.41181")]
    public class SwaggerException : Exception
    {
        public string StatusCode { get; private set; }

        public byte[] ResponseData { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            ResponseData = responseData;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: n{0}n{1}", Encoding.UTF8.GetString(ResponseData, 0, ResponseData.Length), base.ToString());
        }
    }

    [GeneratedCode("NSwag", "5.4.6091.41181")]
    public class SwaggerException<TResponse> : SwaggerException
    {
        public TResponse Response { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, TResponse response, Exception innerException) 
            : base(message, statusCode, responseData, innerException)
        {
            Response = response;
        }
    }

}