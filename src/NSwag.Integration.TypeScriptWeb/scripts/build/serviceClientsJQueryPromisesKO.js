/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.5.6264.39438 (NJsonSchema v8.6.6263.34621) (http://NSwag.org)
// </auto-generated>
//----------------------
class GeoClient {
    constructor(baseUrl) {
        this.baseUrl = undefined;
        this.beforeSend = undefined;
        this.jsonParseReviver = undefined;
        this.baseUrl = baseUrl !== undefined ? baseUrl : "http://localhost:13452";
    }
    fromBodyTest(location) {
        return new Promise((resolve, reject) => {
            this.fromBodyTestWithCallbacks(location, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    fromBodyTestWithCallbacks(location, onSuccess, onFail) {
        let url_ = this.baseUrl + "/api/Geo/FromBodyTest";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(location ? location.toJS() : null);
        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processFromBodyTestWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFromBodyTestWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }
    processFromBodyTestWithCallbacks(url, xhr, onSuccess, onFail) {
        try {
            let result = this.processFromBodyTest(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }
    processFromBodyTest(xhr) {
        const responseText = xhr.responseText;
        const status = xhr.status;
        if (status === 204) {
            return null;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    fromUriTest(latitude, longitude) {
        return new Promise((resolve, reject) => {
            this.fromUriTestWithCallbacks(latitude, longitude, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    fromUriTestWithCallbacks(latitude, longitude, onSuccess, onFail) {
        let url_ = this.baseUrl + "/api/Geo/FromUriTest?";
        if (latitude === null)
            throw new Error("The parameter 'latitude' cannot be null.");
        else if (latitude !== undefined)
            url_ += "Latitude=" + encodeURIComponent("" + latitude) + "&";
        if (longitude === null)
            throw new Error("The parameter 'longitude' cannot be null.");
        else if (longitude !== undefined)
            url_ += "Longitude=" + encodeURIComponent("" + longitude) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processFromUriTestWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFromUriTestWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }
    processFromUriTestWithCallbacks(url, xhr, onSuccess, onFail) {
        try {
            let result = this.processFromUriTest(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }
    processFromUriTest(xhr) {
        const responseText = xhr.responseText;
        const status = xhr.status;
        if (status === 204) {
            return null;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    addPolygon(points) {
        return new Promise((resolve, reject) => {
            this.addPolygonWithCallbacks(points, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    addPolygonWithCallbacks(points, onSuccess, onFail) {
        let url_ = this.baseUrl + "/api/Geo/AddPolygon";
        url_ = url_.replace(/[?&]$/, "");
        let contentData_ = [];
        if (points) {
            for (let item of points)
                contentData_.push(item.toJS());
        }
        const content_ = JSON.stringify(points ? contentData_ : null);
        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processAddPolygonWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAddPolygonWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }
    processAddPolygonWithCallbacks(url, xhr, onSuccess, onFail) {
        try {
            let result = this.processAddPolygon(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }
    processAddPolygon(xhr) {
        const responseText = xhr.responseText;
        const status = xhr.status;
        if (status === 204) {
            return null;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    filter(currentStates) {
        return new Promise((resolve, reject) => {
            this.filterWithCallbacks(currentStates, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    filterWithCallbacks(currentStates, onSuccess, onFail) {
        let url_ = this.baseUrl + "/api/Geo/Filter?";
        if (currentStates !== undefined)
            currentStates.forEach(item => { url_ += "currentStates=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processFilterWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFilterWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }
    processFilterWithCallbacks(url, xhr, onSuccess, onFail) {
        try {
            let result = this.processFilter(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }
    processFilter(xhr) {
        const responseText = xhr.responseText;
        const status = xhr.status;
        if (status === 204) {
            return null;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    reverse(values) {
        return new Promise((resolve, reject) => {
            this.reverseWithCallbacks(values, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    reverseWithCallbacks(values, onSuccess, onFail) {
        let url_ = this.baseUrl + "/api/Geo/Reverse?";
        if (values !== undefined)
            values.forEach(item => { url_ += "values=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processReverseWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processReverseWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }
    processReverseWithCallbacks(url, xhr, onSuccess, onFail) {
        try {
            let result = this.processReverse(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }
    processReverse(xhr) {
        const responseText = xhr.responseText;
        const status = xhr.status;
        if (status === 200) {
            let result200 = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    refresh() {
        return new Promise((resolve, reject) => {
            this.refreshWithCallbacks((result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    refreshWithCallbacks(onSuccess, onFail) {
        let url_ = this.baseUrl + "/api/Geo/Refresh";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processRefreshWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processRefreshWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }
    processRefreshWithCallbacks(url, xhr, onSuccess, onFail) {
        try {
            let result = this.processRefresh(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }
    processRefresh(xhr) {
        const responseText = xhr.responseText;
        const status = xhr.status;
        if (status === 204) {
            return null;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    uploadFile(file) {
        return new Promise((resolve, reject) => {
            this.uploadFileWithCallbacks(file, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    uploadFileWithCallbacks(file, onSuccess, onFail) {
        let url_ = this.baseUrl + "/api/Geo/UploadFile";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = new FormData();
        if (file !== null)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            mimeType: "multipart/form-data",
            contentType: false,
            headers: {
                "Content-Type": "multipart/form-data; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processUploadFileWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processUploadFileWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }
    processUploadFileWithCallbacks(url, xhr, onSuccess, onFail) {
        try {
            let result = this.processUploadFile(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }
    processUploadFile(xhr) {
        const responseText = xhr.responseText;
        const status = xhr.status;
        if (status === 200) {
            let result200 = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    uploadFiles(files) {
        return new Promise((resolve, reject) => {
            this.uploadFilesWithCallbacks(files, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    uploadFilesWithCallbacks(files, onSuccess, onFail) {
        let url_ = this.baseUrl + "/api/Geo/UploadFiles";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = new FormData();
        if (files !== null)
            files.forEach(item_ => content_.append("files", item_.data, item_.fileName ? item_.fileName : "files"));
        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            mimeType: "multipart/form-data",
            contentType: false,
            headers: {
                "Content-Type": "multipart/form-data; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processUploadFilesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processUploadFilesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }
    processUploadFilesWithCallbacks(url, xhr, onSuccess, onFail) {
        try {
            let result = this.processUploadFiles(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }
    processUploadFiles(xhr) {
        const responseText = xhr.responseText;
        const status = xhr.status;
        if (status === 204) {
            return null;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    saveItems(request) {
        return new Promise((resolve, reject) => {
            this.saveItemsWithCallbacks(request, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    saveItemsWithCallbacks(request, onSuccess, onFail) {
        let url_ = this.baseUrl + "/api/Geo/SaveItems";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(request ? request.toJS() : null);
        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processSaveItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSaveItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }
    processSaveItemsWithCallbacks(url, xhr, onSuccess, onFail) {
        try {
            let result = this.processSaveItems(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }
    processSaveItems(xhr) {
        const responseText = xhr.responseText;
        const status = xhr.status;
        if (status === 204) {
            return null;
        }
        else if (status === 450) {
            let result450 = null;
            let resultData450 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result450 = resultData450 ? Exception.fromJS(resultData450) : null;
            this.throwException("A server error occurred.", status, responseText, result450);
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    getUploadedFile(id, override) {
        return new Promise((resolve, reject) => {
            this.getUploadedFileWithCallbacks(id, override, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    getUploadedFileWithCallbacks(id, override, onSuccess, onFail) {
        let url_ = this.baseUrl + "/api/Geo/GetUploadedFile/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (override === null)
            throw new Error("The parameter 'override' cannot be null.");
        else if (override !== undefined)
            url_ += "override=" + encodeURIComponent("" + override) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processGetUploadedFileWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetUploadedFileWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }
    processGetUploadedFileWithCallbacks(url, xhr, onSuccess, onFail) {
        try {
            let result = this.processGetUploadedFile(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }
    processGetUploadedFile(xhr) {
        const responseText = xhr.responseText;
        const status = xhr.status;
        if (status === 200) {
            let result200 = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    throwException(message, status, response, result) {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}
exports.GeoClient = GeoClient;
class PersonsClient {
    constructor(baseUrl) {
        this.baseUrl = undefined;
        this.beforeSend = undefined;
        this.jsonParseReviver = undefined;
        this.baseUrl = baseUrl !== undefined ? baseUrl : "http://localhost:13452";
    }
    getAll() {
        return new Promise((resolve, reject) => {
            this.getAllWithCallbacks((result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    getAllWithCallbacks(onSuccess, onFail) {
        let url_ = this.baseUrl + "/api/Persons";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }
    processGetAllWithCallbacks(url, xhr, onSuccess, onFail) {
        try {
            let result = this.processGetAll(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }
    processGetAll(xhr) {
        const responseText = xhr.responseText;
        const status = xhr.status;
        if (status === 200) {
            let result200 = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    add(person) {
        return new Promise((resolve, reject) => {
            this.addWithCallbacks(person, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    addWithCallbacks(person, onSuccess, onFail) {
        let url_ = this.baseUrl + "/api/Persons";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(person ? person.toJS() : null);
        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processAddWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAddWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }
    processAddWithCallbacks(url, xhr, onSuccess, onFail) {
        try {
            let result = this.processAdd(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }
    processAdd(xhr) {
        const responseText = xhr.responseText;
        const status = xhr.status;
        if (status === 204) {
            return null;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    find(gender) {
        return new Promise((resolve, reject) => {
            this.findWithCallbacks(gender, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    findWithCallbacks(gender, onSuccess, onFail) {
        let url_ = this.baseUrl + "/api/Persons/find/{gender}";
        if (gender === undefined || gender === null)
            throw new Error("The parameter 'gender' must be defined.");
        url_ = url_.replace("{gender}", encodeURIComponent("" + gender));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processFindWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFindWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }
    processFindWithCallbacks(url, xhr, onSuccess, onFail) {
        try {
            let result = this.processFind(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }
    processFind(xhr) {
        const responseText = xhr.responseText;
        const status = xhr.status;
        if (status === 200) {
            let result200 = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    findOptional(gender) {
        return new Promise((resolve, reject) => {
            this.findOptionalWithCallbacks(gender, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    findOptionalWithCallbacks(gender, onSuccess, onFail) {
        let url_ = this.baseUrl + "/api/Persons/find2?";
        if (gender === undefined)
            throw new Error("The parameter 'gender' must be defined.");
        else
            url_ += "gender=" + encodeURIComponent("" + gender) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processFindOptionalWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFindOptionalWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }
    processFindOptionalWithCallbacks(url, xhr, onSuccess, onFail) {
        try {
            let result = this.processFindOptional(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }
    processFindOptional(xhr) {
        const responseText = xhr.responseText;
        const status = xhr.status;
        if (status === 200) {
            let result200 = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    get(id) {
        return new Promise((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    getWithCallbacks(id, onSuccess, onFail) {
        let url_ = this.baseUrl + "/api/Persons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }
    processGetWithCallbacks(url, xhr, onSuccess, onFail) {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }
    processGet(xhr) {
        const responseText = xhr.responseText;
        const status = xhr.status;
        if (status === 200) {
            let result200 = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Person.fromJS(resultData200) : null;
            return result200;
        }
        else if (status === 500) {
            let result500 = null;
            let resultData500 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result500 = resultData500 ? PersonNotFoundException.fromJS(resultData500) : null;
            this.throwException("A server error occurred.", status, responseText, result500);
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    delete(id) {
        return new Promise((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    deleteWithCallbacks(id, onSuccess, onFail) {
        let url_ = this.baseUrl + "/api/Persons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }
    processDeleteWithCallbacks(url, xhr, onSuccess, onFail) {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }
    processDelete(xhr) {
        const responseText = xhr.responseText;
        const status = xhr.status;
        if (status === 204) {
            return null;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    throw(id) {
        return new Promise((resolve, reject) => {
            this.throwWithCallbacks(id, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    throwWithCallbacks(id, onSuccess, onFail) {
        let url_ = this.baseUrl + "/api/Persons/Throw?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processThrowWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processThrowWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }
    processThrowWithCallbacks(url, xhr, onSuccess, onFail) {
        try {
            let result = this.processThrow(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }
    processThrow(xhr) {
        const responseText = xhr.responseText;
        const status = xhr.status;
        if (status === 200) {
            let result200 = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Person.fromJS(resultData200) : null;
            return result200;
        }
        else if (status === 500) {
            let result500 = null;
            let resultData500 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result500 = resultData500 ? PersonNotFoundException.fromJS(resultData500) : null;
            this.throwException("A server error occurred.", status, responseText, result500);
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    /**
     * Gets the name of a person.
     * @id The person ID.
     * @return The person's name.
     */
    getName(id) {
        return new Promise((resolve, reject) => {
            this.getNameWithCallbacks(id, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    getNameWithCallbacks(id, onSuccess, onFail) {
        let url_ = this.baseUrl + "/api/Persons/{id}/Name";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = "";
        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processGetNameWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetNameWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }
    processGetNameWithCallbacks(url, xhr, onSuccess, onFail) {
        try {
            let result = this.processGetName(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }
    processGetName(xhr) {
        const responseText = xhr.responseText;
        const status = xhr.status;
        if (status === 200) {
            let result200 = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        }
        else if (status === 500) {
            let result500 = null;
            let resultData500 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result500 = resultData500 ? PersonNotFoundException.fromJS(resultData500) : null;
            this.throwException("A server error occurred.", status, responseText, result500);
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    addXml(person) {
        return new Promise((resolve, reject) => {
            this.addXmlWithCallbacks(person, (result) => resolve(result), (exception, reason) => reject(exception));
        });
    }
    addXmlWithCallbacks(person, onSuccess, onFail) {
        let url_ = this.baseUrl + "/api/Persons/AddXml";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = person;
        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/xml; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processAddXmlWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAddXmlWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }
    processAddXmlWithCallbacks(url, xhr, onSuccess, onFail) {
        try {
            let result = this.processAddXml(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }
    processAddXml(xhr) {
        const responseText = xhr.responseText;
        const status = xhr.status;
        if (status === 200) {
            let result200 = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
    throwException(message, status, response, result) {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}
exports.PersonsClient = PersonsClient;
class GeoPoint {
    constructor(data) {
        this.latitude = ko.observable();
        this.longitude = ko.observable();
        if (data !== undefined) {
            var latitude_ = null;
            latitude_ = data["Latitude"] !== undefined ? data["Latitude"] : undefined;
            this.latitude(latitude_);
            var longitude_ = null;
            longitude_ = data["Longitude"] !== undefined ? data["Longitude"] : undefined;
            this.longitude(longitude_);
        }
    }
    static fromJS(data) {
        return new GeoPoint(data);
    }
    toJS(data) {
        data = data === undefined ? {} : data;
        var latitude_ = this.latitude();
        data["Latitude"] = latitude_ !== undefined ? latitude_ : undefined;
        var longitude_ = this.longitude();
        data["Longitude"] = longitude_ !== undefined ? longitude_ : undefined;
        return data;
    }
    toJSON() {
        return JSON.stringify(this.toJS());
    }
    clone() {
        var json = this.toJSON();
        return new GeoPoint(JSON.parse(json));
    }
}
exports.GeoPoint = GeoPoint;
class GenericRequestOfAddressAndPerson {
    constructor(data) {
        this.item1 = ko.observable();
        this.item2 = ko.observable();
        if (data !== undefined) {
            var item1_ = null;
            item1_ = data["Item1"] ? Address.fromJS(data["Item1"]) : undefined;
            this.item1(item1_);
            var item2_ = null;
            item2_ = data["Item2"] ? Person.fromJS(data["Item2"]) : undefined;
            this.item2(item2_);
        }
    }
    static fromJS(data) {
        return new GenericRequestOfAddressAndPerson(data);
    }
    toJS(data) {
        data = data === undefined ? {} : data;
        var item1_ = this.item1();
        data["Item1"] = item1_ ? item1_.toJS() : undefined;
        var item2_ = this.item2();
        data["Item2"] = item2_ ? item2_.toJS() : undefined;
        return data;
    }
    toJSON() {
        return JSON.stringify(this.toJS());
    }
    clone() {
        var json = this.toJSON();
        return new GenericRequestOfAddressAndPerson(JSON.parse(json));
    }
}
exports.GenericRequestOfAddressAndPerson = GenericRequestOfAddressAndPerson;
class Address {
    constructor(data) {
        this.isPrimary = ko.observable();
        this.city = ko.observable();
        if (data !== undefined) {
            var isPrimary_ = null;
            isPrimary_ = data["IsPrimary"] !== undefined ? data["IsPrimary"] : undefined;
            this.isPrimary(isPrimary_);
            var city_ = null;
            city_ = data["City"] !== undefined ? data["City"] : undefined;
            this.city(city_);
        }
    }
    static fromJS(data) {
        return new Address(data);
    }
    toJS(data) {
        data = data === undefined ? {} : data;
        var isPrimary_ = this.isPrimary();
        data["IsPrimary"] = isPrimary_ !== undefined ? isPrimary_ : undefined;
        var city_ = this.city();
        data["City"] = city_ !== undefined ? city_ : undefined;
        return data;
    }
    toJSON() {
        return JSON.stringify(this.toJS());
    }
    clone() {
        var json = this.toJSON();
        return new Address(JSON.parse(json));
    }
}
exports.Address = Address;
class Person {
    constructor(data) {
        this.id = ko.observable();
        /** Gets or sets the first name. */
        this.firstName = ko.observable();
        /** Gets or sets the last name. */
        this.lastName = ko.observable();
        this.gender = ko.observable();
        this.dateOfBirth = ko.observable();
        this.weight = ko.observable();
        this.height = ko.observable();
        this.age = ko.observable();
        this.averageSleepTime = ko.observable();
        this.address = ko.observable(new Address());
        this.children = ko.observableArray([]);
        this.skills = ko.observable();
        this._discriminator = "Person";
        if (data !== undefined) {
            var id_ = null;
            id_ = data["Id"] !== undefined ? data["Id"] : undefined;
            this.id(id_);
            var firstName_ = null;
            firstName_ = data["FirstName"] !== undefined ? data["FirstName"] : undefined;
            this.firstName(firstName_);
            var lastName_ = null;
            lastName_ = data["LastName"] !== undefined ? data["LastName"] : undefined;
            this.lastName(lastName_);
            var gender_ = null;
            gender_ = data["Gender"] !== undefined ? data["Gender"] : undefined;
            this.gender(gender_);
            var dateOfBirth_ = null;
            dateOfBirth_ = data["DateOfBirth"] ? new Date(data["DateOfBirth"].toString()) : undefined;
            this.dateOfBirth(dateOfBirth_);
            var weight_ = null;
            weight_ = data["Weight"] !== undefined ? data["Weight"] : undefined;
            this.weight(weight_);
            var height_ = null;
            height_ = data["Height"] !== undefined ? data["Height"] : undefined;
            this.height(height_);
            var age_ = null;
            age_ = data["Age"] !== undefined ? data["Age"] : undefined;
            this.age(age_);
            var averageSleepTime_ = null;
            averageSleepTime_ = data["AverageSleepTime"] !== undefined ? data["AverageSleepTime"] : undefined;
            this.averageSleepTime(averageSleepTime_);
            var address_ = null;
            address_ = data["Address"] ? Address.fromJS(data["Address"]) : new Address();
            this.address(address_);
            var children_ = null;
            if (data["Children"] && data["Children"].constructor === Array) {
                children_ = [];
                for (let item of data["Children"])
                    children_.push(Person.fromJS(item));
            }
            this.children(children_);
            var skills_ = null;
            if (data["Skills"]) {
                skills_ = {};
                for (let key in data["Skills"]) {
                    if (data["Skills"].hasOwnProperty(key))
                        skills_[key] = data["Skills"][key] !== undefined ? data["Skills"][key] : undefined;
                }
            }
            this.skills(skills_);
        }
    }
    static fromJS(data) {
        if (data["discriminator"] === "Teacher")
            return new Teacher(data);
        return new Person(data);
    }
    toJS(data) {
        data = data === undefined ? {} : data;
        data["discriminator"] = this._discriminator;
        var id_ = this.id();
        data["Id"] = id_ !== undefined ? id_ : undefined;
        var firstName_ = this.firstName();
        data["FirstName"] = firstName_ !== undefined ? firstName_ : undefined;
        var lastName_ = this.lastName();
        data["LastName"] = lastName_ !== undefined ? lastName_ : undefined;
        var gender_ = this.gender();
        data["Gender"] = gender_ !== undefined ? gender_ : undefined;
        var dateOfBirth_ = this.dateOfBirth();
        data["DateOfBirth"] = dateOfBirth_ ? dateOfBirth_.toISOString() : undefined;
        var weight_ = this.weight();
        data["Weight"] = weight_ !== undefined ? weight_ : undefined;
        var height_ = this.height();
        data["Height"] = height_ !== undefined ? height_ : undefined;
        var age_ = this.age();
        data["Age"] = age_ !== undefined ? age_ : undefined;
        var averageSleepTime_ = this.averageSleepTime();
        data["AverageSleepTime"] = averageSleepTime_ !== undefined ? averageSleepTime_ : undefined;
        var address_ = this.address();
        data["Address"] = address_ ? address_.toJS() : undefined;
        var children_ = this.children();
        if (children_ && children_.constructor === Array) {
            data["Children"] = [];
            for (let item of children_)
                data["Children"].push(item.toJS());
        }
        var skills_ = this.skills();
        if (skills_) {
            data["Skills"] = {};
            for (let key in skills_) {
                if (skills_.hasOwnProperty(key))
                    data["Skills"][key] = skills_[key] !== undefined ? skills_[key] : undefined;
            }
        }
        return data;
    }
    toJSON() {
        return JSON.stringify(this.toJS());
    }
    clone() {
        var json = this.toJSON();
        return new Person(JSON.parse(json));
    }
}
exports.Person = Person;
var Gender;
(function (Gender) {
    Gender[Gender["Male"] = "Male"] = "Male";
    Gender[Gender["Female"] = "Female"] = "Female";
})(Gender = exports.Gender || (exports.Gender = {}));
var SkillLevel;
(function (SkillLevel) {
    SkillLevel[SkillLevel["Low"] = 0] = "Low";
    SkillLevel[SkillLevel["Medium"] = 1] = "Medium";
    SkillLevel[SkillLevel["Height"] = 2] = "Height";
})(SkillLevel = exports.SkillLevel || (exports.SkillLevel = {}));
class Teacher extends Person {
    constructor(data) {
        super(data);
        this.course = ko.observable();
        this.skillLevel = ko.observable(SkillLevel.Medium);
        this._discriminator = "Teacher";
        if (data !== undefined) {
            var course_ = null;
            course_ = data["Course"] !== undefined ? data["Course"] : undefined;
            this.course(course_);
            var skillLevel_ = null;
            skillLevel_ = data["SkillLevel"] !== undefined ? data["SkillLevel"] : undefined;
            this.skillLevel(skillLevel_);
        }
    }
    static fromJS(data) {
        return new Teacher(data);
    }
    toJS(data) {
        data = data === undefined ? {} : data;
        var course_ = this.course();
        data["Course"] = course_ !== undefined ? course_ : undefined;
        var skillLevel_ = this.skillLevel();
        data["SkillLevel"] = skillLevel_ !== undefined ? skillLevel_ : undefined;
        super.toJS(data);
        return data;
    }
    toJSON() {
        return JSON.stringify(this.toJS());
    }
    clone() {
        var json = this.toJSON();
        return new Teacher(JSON.parse(json));
    }
}
exports.Teacher = Teacher;
class Exception {
    constructor(data) {
        this.message = ko.observable();
        this.innerException = ko.observable();
        this.stackTrace = ko.observable();
        this.source = ko.observable();
        if (data !== undefined) {
            var message_ = null;
            message_ = data["Message"] !== undefined ? data["Message"] : undefined;
            this.message(message_);
            var innerException_ = null;
            innerException_ = data["InnerException"] ? Exception.fromJS(data["InnerException"]) : undefined;
            this.innerException(innerException_);
            var stackTrace_ = null;
            stackTrace_ = data["StackTrace"] !== undefined ? data["StackTrace"] : undefined;
            this.stackTrace(stackTrace_);
            var source_ = null;
            source_ = data["Source"] !== undefined ? data["Source"] : undefined;
            this.source(source_);
        }
    }
    static fromJS(data) {
        return new Exception(data);
    }
    toJS(data) {
        data = data === undefined ? {} : data;
        var message_ = this.message();
        data["Message"] = message_ !== undefined ? message_ : undefined;
        var innerException_ = this.innerException();
        data["InnerException"] = innerException_ ? innerException_.toJS() : undefined;
        var stackTrace_ = this.stackTrace();
        data["StackTrace"] = stackTrace_ !== undefined ? stackTrace_ : undefined;
        var source_ = this.source();
        data["Source"] = source_ !== undefined ? source_ : undefined;
        return data;
    }
    toJSON() {
        return JSON.stringify(this.toJS());
    }
    clone() {
        var json = this.toJSON();
        return new Exception(JSON.parse(json));
    }
}
exports.Exception = Exception;
class PersonNotFoundException extends Exception {
    constructor(data) {
        super(data);
        this.id = ko.observable();
        if (data !== undefined) {
            var id_ = null;
            id_ = data["id"] !== undefined ? data["id"] : undefined;
            this.id(id_);
        }
    }
    static fromJS(data) {
        return new PersonNotFoundException(data);
    }
    toJS(data) {
        data = data === undefined ? {} : data;
        var id_ = this.id();
        data["id"] = id_ !== undefined ? id_ : undefined;
        super.toJS(data);
        return data;
    }
    toJSON() {
        return JSON.stringify(this.toJS());
    }
    clone() {
        var json = this.toJSON();
        return new PersonNotFoundException(JSON.parse(json));
    }
}
exports.PersonNotFoundException = PersonNotFoundException;
class SwaggerException extends Error {
    constructor(message, status, response, result) {
        super();
        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}
exports.SwaggerException = SwaggerException;
//# sourceMappingURL=serviceClientsJQueryPromisesKO.js.map