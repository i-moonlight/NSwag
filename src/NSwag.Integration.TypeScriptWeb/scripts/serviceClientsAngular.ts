//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.11.0.0 (NJsonSchema v9.9.10.0 (Newtonsoft.Json v9.0.0.0)) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


export class GeoPoint implements IGeoPoint {
    latitude: number;
    longitude: number;

    constructor(data?: IGeoPoint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any, _mappings?: any) {
        if (data) {
            this.latitude = data["Latitude"];
            this.longitude = data["Longitude"];
        }
    }

    static fromJS(data: any, _mappings?: any): GeoPoint {
        return createInstance<GeoPoint>(data, _mappings, GeoPoint);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Latitude"] = this.latitude;
        data["Longitude"] = this.longitude;
        return data; 
    }
}

export interface IGeoPoint {
    latitude: number;
    longitude: number;
}

export class GenericRequestOfAddressAndPerson implements IGenericRequestOfAddressAndPerson {
    item1: Address | undefined;
    item2: Person | undefined;

    constructor(data?: IGenericRequestOfAddressAndPerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any, _mappings?: any) {
        if (data) {
            this.item1 = data["Item1"] ? Address.fromJS(data["Item1"], _mappings) : <any>undefined;
            this.item2 = data["Item2"] ? Person.fromJS(data["Item2"], _mappings) : <any>undefined;
        }
    }

    static fromJS(data: any, _mappings?: any): GenericRequestOfAddressAndPerson {
        return createInstance<GenericRequestOfAddressAndPerson>(data, _mappings, GenericRequestOfAddressAndPerson);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Item1"] = this.item1 ? this.item1.toJSON() : <any>undefined;
        data["Item2"] = this.item2 ? this.item2.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGenericRequestOfAddressAndPerson {
    item1: Address | undefined;
    item2: Person | undefined;
}

export class Address implements IAddress {
    isPrimary: boolean;
    city: string | undefined;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any, _mappings?: any) {
        if (data) {
            this.isPrimary = data["IsPrimary"];
            this.city = data["City"];
        }
    }

    static fromJS(data: any, _mappings?: any): Address {
        return createInstance<Address>(data, _mappings, Address);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IsPrimary"] = this.isPrimary;
        data["City"] = this.city;
        return data; 
    }
}

export interface IAddress {
    isPrimary: boolean;
    city: string | undefined;
}

export class Person implements IPerson {
    id: string;
    /** Gets or sets the first name. */
    firstName: string;
    /** Gets or sets the last name. */
    lastName: string;
    gender: Gender;
    dateOfBirth: Date;
    weight: number;
    height: number;
    age: number;
    averageSleepTime: string;
    address: Address = new Address();
    children: Person[] = [];
    skills: { [key: string] : SkillLevel; } | undefined;

    protected _discriminator: string;

    constructor(data?: IPerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "Person";
    }

    init(data?: any, _mappings?: any) {
        if (data) {
            this.id = data["Id"];
            this.firstName = data["FirstName"];
            this.lastName = data["LastName"];
            this.gender = data["Gender"];
            this.dateOfBirth = data["DateOfBirth"] ? new Date(data["DateOfBirth"].toString()) : <any>undefined;
            this.weight = data["Weight"];
            this.height = data["Height"];
            this.age = data["Age"];
            this.averageSleepTime = data["AverageSleepTime"];
            this.address = data["Address"] ? Address.fromJS(data["Address"], _mappings) : new Address();
            if (data["Children"] && data["Children"].constructor === Array) {
                this.children = [];
                for (let item of data["Children"])
                    this.children.push(Person.fromJS(item, _mappings));
            }
            if (data["Skills"]) {
                this.skills = {};
                for (let key in data["Skills"]) {
                    if (data["Skills"].hasOwnProperty(key))
                        this.skills[key] = data["Skills"][key];
                }
            }
        }
    }

    static fromJS(data: any, _mappings?: any): Person {
        if (data["discriminator"] === "Teacher")
            return createInstance<Teacher>(data, _mappings, Teacher);
        return createInstance<Person>(data, _mappings, Person);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator; 
        data["Id"] = this.id;
        data["FirstName"] = this.firstName;
        data["LastName"] = this.lastName;
        data["Gender"] = this.gender;
        data["DateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["Weight"] = this.weight;
        data["Height"] = this.height;
        data["Age"] = this.age;
        data["AverageSleepTime"] = this.averageSleepTime;
        data["Address"] = this.address ? this.address.toJSON() : <any>undefined;
        if (this.children && this.children.constructor === Array) {
            data["Children"] = [];
            for (let item of this.children)
                data["Children"].push(item.toJSON());
        }
        if (this.skills) {
            data["Skills"] = {};
            for (let key in this.skills) {
                if (this.skills.hasOwnProperty(key))
                    data["Skills"][key] = this.skills[key];
            }
        }
        return data; 
    }
}

export interface IPerson {
    id: string;
    /** Gets or sets the first name. */
    firstName: string;
    /** Gets or sets the last name. */
    lastName: string;
    gender: Gender;
    dateOfBirth: Date;
    weight: number;
    height: number;
    age: number;
    averageSleepTime: string;
    address: Address;
    children: Person[];
    skills: { [key: string] : SkillLevel; } | undefined;
}

export enum Gender {
    Male = <any>"Male", 
    Female = <any>"Female", 
}

export enum SkillLevel {
    Low = 0, 
    Medium = 1, 
    Height = 2, 
}

export class Teacher extends Person implements ITeacher {
    course: string | undefined;
    skillLevel: SkillLevel = SkillLevel.Medium;

    constructor(data?: ITeacher) {
        super(data);
        this._discriminator = "Teacher";
    }

    init(data?: any, _mappings?: any) {
        super.init(data);
        if (data) {
            this.course = data["Course"];
            this.skillLevel = data["SkillLevel"];
        }
    }

    static fromJS(data: any, _mappings?: any): Teacher {
        return createInstance<Teacher>(data, _mappings, Teacher);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Course"] = this.course;
        data["SkillLevel"] = this.skillLevel;
        super.toJSON(data);
        return data; 
    }
}

export interface ITeacher extends IPerson {
    course: string | undefined;
    skillLevel: SkillLevel;
}

export class Exception implements IException {
    message: string | undefined;
    innerException: Exception | undefined;
    stackTrace: string | undefined;
    source: string | undefined;

    constructor(data?: IException) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any, _mappings?: any) {
        if (data) {
            this.message = data["Message"];
            this.innerException = data["InnerException"] ? Exception.fromJS(data["InnerException"], _mappings) : <any>undefined;
            this.stackTrace = data["StackTrace"];
            this.source = data["Source"];
        }
    }

    static fromJS(data: any, _mappings?: any): Exception {
        return createInstance<Exception>(data, _mappings, Exception);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Message"] = this.message;
        data["InnerException"] = this.innerException ? this.innerException.toJSON() : <any>undefined;
        data["StackTrace"] = this.stackTrace;
        data["Source"] = this.source;
        return data; 
    }
}

export interface IException {
    message: string | undefined;
    innerException: Exception | undefined;
    stackTrace: string | undefined;
    source: string | undefined;
}

export class PersonNotFoundException extends Exception implements IPersonNotFoundException {
    id: string;

    constructor(data?: IPersonNotFoundException) {
        super(data);
    }

    init(data?: any, _mappings?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any, _mappings?: any): PersonNotFoundException {
        return createInstance<PersonNotFoundException>(data, _mappings, PersonNotFoundException);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

export interface IPersonNotFoundException extends IException {
    id: string;
}

