<#@ template visibility="internal" #>
<#@ import namespace="NJsonSchema.CodeGeneration" #>
<#@ import namespace="NSwag.CodeGeneration.CodeGenerators.TypeScript" #>
<#@ import namespace="System.Linq" #>

<#if(Model.HasOperations){#>
<#if(Model.GenerateClientInterfaces){#>
export interface I<#=Model.Class#> {
<#foreach(var operation in Model.Operations){#>
<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescription){#>     * @<#=parameter.VariableName#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>    <#=operation.OperationNameLower#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#>: <#=parameter.Type#><#if(!parameter.IsLast){#>, <#}#><#}#>): Promise<<#=operation.ResultType#>>;
<#}#>}
<#}#>

<#if(Model.UseAureliaHttpInjection){#>
@inject(String, HttpClient)
<#}#>
export class <#=Model.Class#> <#if(Model.GenerateClientInterfaces){#>implements I<#=Model.Class#> <#}#>{
    private baseUrl: string; 
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
	protected jsonParseReviver: (key: string, value: any) => any = undefined; 

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.baseUrl = baseUrl ? baseUrl : "";
        this.http = http ? http : window;
    }
<#if(Model.IsExtended){#>

    protected transformOptions(options: RequestInit) {
        return options; 
    }

    protected transformResult(url: string, response: Response, processor: (response: Response) => any) {
        return processor(response);
    }
<#}#>
<#foreach(var operation in Model.Operations){#>

<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescription){#>     * @<#=parameter.VariableName#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>    <#=operation.OperationNameLower#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#>: <#=parameter.Type#><#if(!parameter.IsLast){#>, <#}#><#}#>): Promise<<#=operation.ResultType#>> {
        <#=RequestUrlGenerator.Render(operation, 2)#>

<#if(!operation.IsGetOrHead){#>
        <#=RequestBodyGenerator.Render(operation, 2)#>
<#}#>
        return this.http.fetch(url_, <#if(Model.IsExtended){#>this.transformOptions(<#}#>{
<#if(!operation.IsGetOrHead){#>
			body: content_,
<#}#>
            method: "<#=operation.HttpMethodUpper.ToUpperInvariant()#>",
            headers: {
<#foreach(var parameter in operation.HeaderParameters){#>
                "<#=parameter.Name#>": <#=parameter.VariableName#>, 
<#}#>
<#if(operation.HasFormParameters){#>                'Content-Type': undefined
<#}else{#>
                "Content-Type": "application/json; charset=UTF-8"
<#}#>
            }
        }<#if(Model.IsExtended){#>)<#}#>).then((response) => {
<#if(Model.IsExtended){#>
            return this.transformResult(url_, response, (response) => this.process<#=operation.OperationNameUpper#>(response));
<#}else{#>
            return this.process<#=operation.OperationNameUpper#>(response);
<#}#>
        });
    }

    private process<#=operation.OperationNameUpper#>(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

<#foreach(var response in operation.Responses){#>
            if (status === "<#=response.StatusCode#>") {
<#if(response.HasType){#>
                let result<#=response.StatusCode#>: <#=response.Type#> = null; 
<#  if(response.IsDate){#>
                result<#=response.StatusCode#> = new Date(data);
<#  }else{#>
<#      if(response.UseDtoClass){#>
                let resultData<#=response.StatusCode#> = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
                <#=ConversionUtilities.Tab(response.DataConversionCode, 4)#>
<#      }else{#>
                result<#=response.StatusCode#> = data === "" ? null : <<#=response.Type#>>JSON.parse(data, this.jsonParseReviver);
<#      }#>
<#  }#>
<#  if(response.IsSuccess){#>
                return result<#=response.StatusCode#>; 
<#  }else{#>
                throw result<#=response.StatusCode#>; 
<#  }
}#>
            }
            else
<#}#>            {
<#if(operation.HasDefaultResponse){#>
                let result: <#=operation.DefaultResponse.Type#> = null; 
<#  if(operation.DefaultResponse.IsDate){#>
                result = new Date(data);
<#  }else{#>
<#      if(operation.DefaultResponse.UseDtoClass){#>
                let resultData = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            <#=ConversionUtilities.Tab(operation.DefaultResponse.DataConversionCode, 3)#>
<#      }else{#>
                result = data === "" ? null : <<#=operation.DefaultResponse.Type#>>JSON.parse(data, this.jsonParseReviver);
<#      }#>
<#  }#>
<#  if(operation.DefaultResponse.IsSuccess){#>
                return result; 
<#  }else{#>
                throw result; 
<#  }
}else{#>
                throw new Error("error_no_callback_for_the_received_http_status"); 
<#}#>
            }
        });
    }
<#}#>}
<#}#>

