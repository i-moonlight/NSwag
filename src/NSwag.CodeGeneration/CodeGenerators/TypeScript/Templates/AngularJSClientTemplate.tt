<#@ template visibility="internal" #>
<#@ import namespace="NJsonSchema" #>
<#@ import namespace="CodeGenerators.TypeScript" #>

<#if(Model.HasOperations){#>
<#if(Model.GenerateClientInterfaces){#>
export interface I<#=Model.Class#> {
<#foreach(var operation in Model.Operations){#>
<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescription){#>     * @<#=parameter.VariableName#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>    <#=operation.OperationNameLower#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#>: <#=parameter.Type#><#if(!parameter.IsLast){#>, <#}#><#}#>): ng.IPromise<<#=operation.ResultType#>>;
<#}#>}
<#}#>

export class <#=Model.Class#> <#if(Model.GenerateClientInterfaces){#>implements I<#=Model.Class#> <#}#>{
    private baseUrl: string = undefined; 
    private http: ng.IHttpService = null; 
    protected jsonParseReviver: <#if(Model.SupportsStrictNullChecks){#>((key: string, value: any) => any) | undefined<#}else{#>(key: string, value: any) => any<#}#> = undefined;

    constructor($http: ng.IHttpService, baseUrl?: string) {
        this.http = $http; 
        this.baseUrl = baseUrl !== undefined ? baseUrl : "<#=Model.BaseUrl#>"; 
    }
<#if(Model.IsExtended){#>

    protected transformOptions(options: any) {
        return options; 
    }

    protected transformResult(url: string, response: any, processor: (response: any) => any) {
        return processor(response);
    }
<#}#>
<#foreach(var operation in Model.Operations){#>

<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescription){#>     * @<#=parameter.VariableName#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>    <#=operation.OperationNameLower#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#>: <#=parameter.Type#><#if(!parameter.IsLast){#>, <#}#><#}#>): ng.IPromise<<#=operation.ResultType#>> {
        <#=TemplatePartGenerator.RenderRequestUrlCode(operation, 2)#>

        <#=TemplatePartGenerator.RenderRequestBodyCode(operation, 2)#>

        return this.http(<#if(Model.IsExtended){#>this.transformOptions(<#}#>{
            url: url_,
            method: "<#=operation.HttpMethodUpper.ToUpperInvariant()#>",
            data: content_,
            transformResponse: [], 
            headers: {
<#foreach(var parameter in operation.HeaderParameters){#>
                "<#=parameter.Name#>": <#=parameter.VariableName#>, 
<#}#>
<#if(operation.HasFormParameters){#>                'Content-Type': undefined
<#}else{#>
                "Content-Type": "application/json; charset=UTF-8"
<#}#>
            }
        }<#if(Model.IsExtended){#>)<#}#>).then((response) => {
<#if(Model.IsExtended){#>
            return this.transformResult(url_, response, (response) => this.process<#=operation.OperationNameUpper#>(response));
<#}else{#>
            return this.process<#=operation.OperationNameUpper#>(response);
<#}#>
        }, (response) => {
            if (response.status)
<#if(Model.IsExtended){#>
                return this.transformResult(url_, response, (response) => this.process<#=operation.OperationNameUpper#>(response));
<#}else{#>
                return this.process<#=operation.OperationNameUpper#>(response);
<#}#>
            throw response;
        });
    }

    private process<#=operation.OperationNameUpper#>(response: any) {
        const responseText = response.data;
        const status = response.status; 

		<#=TemplatePartGenerator.RenderProcessResponseCode(operation, 2)#>
    }
<#}#>

    <#=TemplatePartGenerator.RenderClientMethodsCode(Model, 1)#>
}
<#}#>