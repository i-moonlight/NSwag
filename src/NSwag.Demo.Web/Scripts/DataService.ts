//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v3.10.6019.184 (http://NSwag.org)
// </auto-generated>
//----------------------

export class DataService {
    baseUrl: string = undefined; 
    beforeSend: any = undefined; 

    constructor(baseUrl?: string) {
        this.baseUrl = baseUrl !== undefined ? baseUrl : ""; 
    }

    xyz(data: any, onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void) {
        var url = this.baseUrl + "/api/Person/xyz/{data}?"; 

        if (data === undefined || data === null)
            throw new Error("The parameter 'data' must be defined.");
        url = url.replace("{data}", encodeURIComponent("" + data)); 

        var content = "";

        jQuery.ajax({
            url: url,
            beforeSend: this.beforeSend,
            type: "put",
            data: content,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processXyzWithCallbacks(url, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processXyzWithCallbacks(url, xhr, onSuccess, onFail);
        });
    }

    private processXyzWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any) {
        try {
            var result = this.processXyz(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    private processXyz(xhr: any) {
        var data = xhr.responseText; 
        var status = xhr.status.toString(); 

        if (status === "200") {
            var result200: string = null; 
            if (data !== undefined && data !== null && data !== "") {
                result200 = data === "" ? null : <string>jQuery.parseJSON(data);
            }
            return result200;
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    }

    /**
     * @deprecated
     */
    get(onSuccess?: (result: Person[]) => void, onFail?: (exception: string, reason: string) => void) {
        var url = this.baseUrl + "/api/Persons/Get?"; 

        var content = "";

        jQuery.ajax({
            url: url,
            beforeSend: this.beforeSend,
            type: "get",
            data: content,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processGetWithCallbacks(url, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any) {
        try {
            var result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    private processGet(xhr: any) {
        var data = xhr.responseText; 
        var status = xhr.status.toString(); 

        if (status === "200") {
            var result200: Person[] = null; 
            if (data !== undefined && data !== null && data !== "") {
                result200 = data === "" ? null : <Person[]>jQuery.parseJSON(data);
            }
            return result200;
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    }

    /**
     * Gets a person.
     * @id The ID of 
the person.
     * @return The person.
     */
    get2(id: number, onSuccess?: (result: Person) => void, onFail?: (exception: PersonNotFoundException | string, reason: string) => void) {
        var url = this.baseUrl + "/api/Persons/Get/{id}?"; 

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id)); 

        var content = "";

        jQuery.ajax({
            url: url,
            beforeSend: this.beforeSend,
            type: "get",
            data: content,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processGet2WithCallbacks(url, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGet2WithCallbacks(url, xhr, onSuccess, onFail);
        });
    }

    private processGet2WithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any) {
        try {
            var result = this.processGet2(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    private processGet2(xhr: any) {
        var data = xhr.responseText; 
        var status = xhr.status.toString(); 

        if (status === "200") {
            var result200: Person = null; 
            if (data !== undefined && data !== null && data !== "") {
                result200 = data === "" ? null : <Person>jQuery.parseJSON(data);
            }
            return result200;
        }
        else
        if (status === "500") {
            var result500: PersonNotFoundException = null; 
            if (data !== undefined && data !== null && data !== "") {
                result500 = data === "" ? null : <PersonNotFoundException>jQuery.parseJSON(data);
            }
            throw result500;
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    }

    /**
     * Creates a new person.
     * @value (optional) The person.
     */
    post(value: Person, onSuccess?: () => void, onFail?: (exception: string, reason: string) => void) {
        var url = this.baseUrl + "/api/Persons/Post?"; 

        var content = JSON.stringify(value);

        jQuery.ajax({
            url: url,
            beforeSend: this.beforeSend,
            type: "post",
            data: content,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processPostWithCallbacks(url, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any) {
        try {
            var result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    private processPost(xhr: any) {
        var data = xhr.responseText; 
        var status = xhr.status.toString(); 

        if (status === "204") {
            var result204: any = undefined; 
            return result204;
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    }

    /**
     * Updates the existing person.
     * @id The ID.
     * @value (optional) The person.
     */
    put(id: number, value: Person, onSuccess?: () => void, onFail?: (exception: string, reason: string) => void) {
        var url = this.baseUrl + "/api/Persons/Put/{id}?"; 

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id)); 

        var content = JSON.stringify(value);

        jQuery.ajax({
            url: url,
            beforeSend: this.beforeSend,
            type: "put",
            data: content,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processPutWithCallbacks(url, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any) {
        try {
            var result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    private processPut(xhr: any) {
        var data = xhr.responseText; 
        var status = xhr.status.toString(); 

        if (status === "204") {
            var result204: any = undefined; 
            return result204;
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    }

    delete(id: number, onSuccess?: () => void, onFail?: (exception: string, reason: string) => void) {
        var url = this.baseUrl + "/api/Persons/Delete/{id}?"; 

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id)); 

        var content = "";

        jQuery.ajax({
            url: url,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processDeleteWithCallbacks(url, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any) {
        try {
            var result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    private processDelete(xhr: any) {
        var data = xhr.responseText; 
        var status = xhr.status.toString(); 

        if (status === "204") {
            var result204: any = undefined; 
            return result204;
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    }

    /**
     * Calculates the sum of a, b and c.
     */
    calculate(a: number, b: number, c: number, onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void) {
        var url = this.baseUrl + "/api/Person/Calculate/{a}/{b}?"; 

        if (a === undefined || a === null)
            throw new Error("The parameter 'a' must be defined.");
        url = url.replace("{a}", encodeURIComponent("" + a)); 
        if (b === undefined || b === null)
            throw new Error("The parameter 'b' must be defined.");
        url = url.replace("{b}", encodeURIComponent("" + b)); 

        if (c === undefined || c === null)
            throw new Error("The parameter 'c' must be defined.");
        else
            url += "c=" + encodeURIComponent("" + c) + "&"; 

        var content = "";

        jQuery.ajax({
            url: url,
            beforeSend: this.beforeSend,
            type: "get",
            data: content,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processCalculateWithCallbacks(url, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processCalculateWithCallbacks(url, xhr, onSuccess, onFail);
        });
    }

    private processCalculateWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any) {
        try {
            var result = this.processCalculate(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    private processCalculate(xhr: any) {
        var data = xhr.responseText; 
        var status = xhr.status.toString(); 

        if (status === "200") {
            var result200: number = null; 
            if (data !== undefined && data !== null && data !== "") {
                result200 = data === "" ? null : <number>jQuery.parseJSON(data);
            }
            return result200;
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    }

    addHour(time: Date, onSuccess?: (result: Date) => void, onFail?: (exception: string, reason: string) => void) {
        var url = this.baseUrl + "/api/Persons/AddHour?"; 

        if (time === undefined || time === null)
            throw new Error("The parameter 'time' must be defined.");
        else
            url += "time=" + encodeURIComponent("" + time.toJSON()) + "&"; 

        var content = "";

        jQuery.ajax({
            url: url,
            beforeSend: this.beforeSend,
            type: "get",
            data: content,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processAddHourWithCallbacks(url, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAddHourWithCallbacks(url, xhr, onSuccess, onFail);
        });
    }

    private processAddHourWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any) {
        try {
            var result = this.processAddHour(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    private processAddHour(xhr: any) {
        var data = xhr.responseText; 
        var status = xhr.status.toString(); 

        if (status === "200") {
            var result200: Date = null; 
            if (data !== undefined && data !== null && data !== "") {
                result200 = new Date(data);
            }
            return result200;
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    }

    test(onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void) {
        var url = this.baseUrl + "/api/Persons/TestAsync?"; 

        var content = "";

        jQuery.ajax({
            url: url,
            beforeSend: this.beforeSend,
            type: "get",
            data: content,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processTestWithCallbacks(url, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTestWithCallbacks(url, xhr, onSuccess, onFail);
        });
    }

    private processTestWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any) {
        try {
            var result = this.processTest(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    private processTest(xhr: any) {
        var data = xhr.responseText; 
        var status = xhr.status.toString(); 

        if (status === "200") {
            var result200: number = null; 
            if (data !== undefined && data !== null && data !== "") {
                result200 = data === "" ? null : <number>jQuery.parseJSON(data);
            }
            return result200;
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    }

    loadComplexObject(onSuccess?: (result: Car) => void, onFail?: (exception: string, reason: string) => void) {
        var url = this.baseUrl + "/api/Persons/LoadComplexObject2?"; 

        var content = "";

        jQuery.ajax({
            url: url,
            beforeSend: this.beforeSend,
            type: "get",
            data: content,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).done((data, textStatus, xhr) => {
            this.processLoadComplexObjectWithCallbacks(url, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processLoadComplexObjectWithCallbacks(url, xhr, onSuccess, onFail);
        });
    }

    private processLoadComplexObjectWithCallbacks(url: string, xhr: any, onSuccess?: any, onFail?: any) {
        try {
            var result = this.processLoadComplexObject(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    private processLoadComplexObject(xhr: any) {
        var data = xhr.responseText; 
        var status = xhr.status.toString(); 

        if (status === "200") {
            var result200: Car = null; 
            if (data !== undefined && data !== null && data !== "") {
                result200 = data === "" ? null : <Car>jQuery.parseJSON(data);
            }
            return result200;
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    }
}

/** The DTO class for a person. */
export interface Person {
    /** Gets or sets the first name. */
    firstName: string;
    LastName: string;
    Birthday: Date;
    /** Gets or sets 
the height in cm. */
    Height: number;
    Cars: Car[];
    Type: ObjectType;
}

export interface Car {
    Name: string;
    Driver: Person;
    Type: ObjectType;
}

/** Foo bar */
export enum ObjectType {
    Foo = <any>"Foo", 
    Bar = <any>"Bar", 
}

export interface Exception {
    Message: string;
    InnerException: Exception;
    StackTrace: string;
    Source: string;
}

export interface PersonNotFoundException extends Exception {
    PersonId: number;
}